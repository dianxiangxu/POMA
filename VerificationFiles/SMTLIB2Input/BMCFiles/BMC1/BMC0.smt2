(set-logic QF_ALL)
(set-option :produce-models true)
(declare-fun USERS () (Set (Tuple Int Int)))
(assert (= USERS (set.insert (tuple 11 11) 
(tuple 17 17) 
(tuple 2 2) 
(tuple 22 22) 
(tuple 15 15) 
(tuple 8 8) 
(tuple 13 13) 
(set.singleton (tuple 6 6)))))
(declare-fun ASSIGN* (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN* 0) (set.insert (tuple 10 10) 
(tuple 11 1) 
(tuple 9 10) 
(tuple 17 17) 
(tuple 3 20) 
(tuple 11 10) 
(tuple 24 24) 
(tuple 19 10) 
(tuple 12 12) 
(tuple 17 18) 
(tuple 20 10) 
(tuple 18 10) 
(tuple 13 4) 
(tuple 16 10) 
(tuple 2 19) 
(tuple 5 10) 
(tuple 18 18) 
(tuple 22 10) 
(tuple 15 19) 
(tuple 22 22) 
(tuple 21 10) 
(tuple 15 15) 
(tuple 17 10) 
(tuple 3 3) 
(tuple 4 10) 
(tuple 4 4) 
(tuple 6 23) 
(tuple 1 1) 
(tuple 2 2) 
(tuple 23 10) 
(tuple 14 10) 
(tuple 14 14) 
(tuple 3 10) 
(tuple 24 10) 
(tuple 21 21) 
(tuple 6 10) 
(tuple 15 10) 
(tuple 13 13) 
(tuple 2 10) 
(tuple 12 10) 
(tuple 19 19) 
(tuple 23 23) 
(tuple 16 16) 
(tuple 7 10) 
(tuple 20 20) 
(tuple 1 10) 
(tuple 5 24) 
(tuple 9 9) 
(tuple 11 11) 
(tuple 8 10) 
(tuple 22 20) 
(tuple 8 4) 
(tuple 13 10) 
(tuple 5 5) 
(tuple 8 8) 
(tuple 6 6) 
(set.singleton (tuple 7 7)))))
(declare-fun ASSIGN (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN 0) (set.insert (tuple 4 10) 
(tuple 3 3) 
(tuple 4 4) 
(tuple 11 1) 
(tuple 6 23) 
(tuple 9 10) 
(tuple 1 1) 
(tuple 17 17) 
(tuple 2 2) 
(tuple 23 10) 
(tuple 14 10) 
(tuple 14 14) 
(tuple 3 20) 
(tuple 24 24) 
(tuple 24 10) 
(tuple 21 21) 
(tuple 13 13) 
(tuple 19 10) 
(tuple 12 12) 
(tuple 12 10) 
(tuple 19 19) 
(tuple 23 23) 
(tuple 17 18) 
(tuple 16 16) 
(tuple 7 10) 
(tuple 20 10) 
(tuple 20 20) 
(tuple 18 10) 
(tuple 1 10) 
(tuple 16 10) 
(tuple 13 4) 
(tuple 2 19) 
(tuple 5 24) 
(tuple 11 11) 
(tuple 9 9) 
(tuple 18 18) 
(tuple 22 20) 
(tuple 15 19) 
(tuple 22 22) 
(tuple 8 4) 
(tuple 21 10) 
(tuple 15 15) 
(tuple 5 5) 
(tuple 8 8) 
(tuple 6 6) 
(set.singleton (tuple 7 7)))))
(declare-fun ASSOC (Int) (Set (Tuple Int Int Int)))

(assert (= (ASSOC 0) (set.insert(tuple 7 29 24) 
(tuple 9 28 24) 
(tuple 12 25 24) 
(tuple 14 27 24) 
(tuple 21 26 24) 
(tuple 23 26 24) 
(tuple 7 29 24) 
(tuple 9 28 24) 
(tuple 12 25 24) 
(tuple 14 27 24) 
(tuple 21 26 24) 
(tuple 23 26 24) 
(tuple 7 29 24) 
(tuple 9 28 24) 
(tuple 12 25 24) 
(tuple 14 27 24) 
(tuple 21 26 24) 
(set.singleton (tuple 23 26 24)))))

(declare-fun NODES () (Set (Tuple Int Int)))
(assert (= NODES (set.insert (tuple 1 1) 
(tuple 2 2) 
(tuple 3 3) 
(tuple 4 4) 
(tuple 5 5) 
(tuple 6 6) 
(tuple 7 7) 
(tuple 8 8) 
(tuple 9 9) 
(tuple 10 10) 
(tuple 11 11) 
(tuple 12 12) 
(tuple 13 13) 
(tuple 14 14) 
(tuple 15 15) 
(tuple 16 16) 
(tuple 17 17) 
(tuple 18 18) 
(tuple 19 19) 
(tuple 20 20) 
(tuple 21 21) 
(tuple 22 22) 
(tuple 23 23) 
(set.singleton (tuple 24 24))))) 


(declare-fun obligation1_obligation2 (Int) Bool)
(declare-fun obligation2_obligation1 (Int) Bool)
(declare-fun obligation2 (Int) Bool)
(declare-fun obligation1 (Int) Bool)
(declare-fun queryVARu () Int)
(declare-fun queryVARar () Int)
(declare-fun queryVARat () Int)
(assert 
(and (= (obligation1_obligation2 -1) true)
 (= obligation1_obligation2U_-1 queryVARu ) (= obligation1_obligation2ar_-1 queryVARar ) (= obligation1_obligation2T_-1 queryVARat )))
(check-sat)
(get-value (obligation1_obligation2))
(get-value (obligation2_obligation1))
(get-value (obligation2))
(get-value (obligation1))
(get-value (queryVARu))
(get-value (queryVARar))
(get-value (queryVARat))
(get-value ((ASSIGN 0)))
(get-value ((ASSOC 0)))
