(set-logic ALL)
(set-option :produce-models true)
(declare-fun USERS () (Set (Tuple Int Int)))
(assert (= USERS (set.insert (tuple 3 3) 
(tuple 11 11) 
(tuple 18 18) 
(tuple 1 1) 
(tuple 14 14) 
(tuple 8 8) 
(set.singleton (tuple 13 13)))))
(declare-fun ASSIGN* (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN* 0) (set.insert (tuple 1 7) 
(tuple 1 17) 
(tuple 3 3) 
(tuple 4 4) 
(tuple 6 17) 
(tuple 10 10) 
(tuple 1 1) 
(tuple 17 17) 
(tuple 2 2) 
(tuple 16 17) 
(tuple 3 10) 
(tuple 14 14) 
(tuple 14 4) 
(tuple 12 17) 
(tuple 18 2) 
(tuple 13 17) 
(tuple 5 17) 
(tuple 18 17) 
(tuple 9 17) 
(tuple 8 9) 
(tuple 13 13) 
(tuple 12 12) 
(tuple 14 17) 
(tuple 19 19) 
(tuple 3 17) 
(tuple 19 17) 
(tuple 16 16) 
(tuple 4 17) 
(tuple 8 17) 
(tuple 13 4) 
(tuple 10 17) 
(tuple 5 12) 
(tuple 9 9) 
(tuple 11 11) 
(tuple 7 17) 
(tuple 15 17) 
(tuple 18 18) 
(tuple 2 17) 
(tuple 11 17) 
(tuple 15 15) 
(tuple 5 5) 
(tuple 8 8) 
(tuple 6 6) 
(tuple 11 15) 
(set.singleton (tuple 7 7)))))
(declare-fun ASSIGN (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN 0) (set.insert (tuple 1 7) 
(tuple 3 3) 
(tuple 4 4) 
(tuple 6 17) 
(tuple 10 10) 
(tuple 1 1) 
(tuple 2 2) 
(tuple 16 17) 
(tuple 14 14) 
(tuple 14 4) 
(tuple 3 10) 
(tuple 12 17) 
(tuple 18 2) 
(tuple 9 17) 
(tuple 8 9) 
(tuple 13 13) 
(tuple 12 12) 
(tuple 19 19) 
(tuple 19 17) 
(tuple 4 17) 
(tuple 16 16) 
(tuple 13 4) 
(tuple 10 17) 
(tuple 5 12) 
(tuple 11 11) 
(tuple 9 9) 
(tuple 7 17) 
(tuple 18 18) 
(tuple 15 17) 
(tuple 2 17) 
(tuple 15 15) 
(tuple 5 5) 
(tuple 8 8) 
(tuple 11 15) 
(tuple 6 6) 
(set.singleton (tuple 7 7)))))
(declare-fun ASSOC (Int) (Set (Tuple Int Int Int)))

(assert (= (ASSOC 0) (set.insert(tuple 4 21 16) 
(tuple 15 20 16) 
(tuple 15 22 16) 
(tuple 4 21 16) 
(tuple 15 20 16) 
(tuple 15 22 16) 
(tuple 4 21 16) 
(tuple 15 20 16) 
(set.singleton (tuple 15 22 16)))))

(declare-fun NODES () (Set (Tuple Int Int)))
(assert (= NODES (set.insert (tuple 1 1) 
(tuple 2 2) 
(tuple 3 3) 
(tuple 4 4) 
(tuple 5 5) 
(tuple 6 6) 
(tuple 7 7) 
(tuple 8 8) 
(tuple 9 9) 
(tuple 10 10) 
(tuple 11 11) 
(tuple 12 12) 
(tuple 13 13) 
(tuple 14 14) 
(tuple 15 15) 
(tuple 16 16) 
(tuple 17 17) 
(tuple 18 18) 
(set.singleton (tuple 19 19))))) 


(declare-fun obligation1 (Int) Bool)
(declare-fun obligation0 (Int) Bool)
;--------------------------------------------------------------------------------------------------------------------
;STEP1

; 5.1 a->PRE
(declare-fun obligation0U_0 () Int)
(declare-fun obligation0UA_0 () Int)
(declare-fun obligation0AT_0 () Int)
(declare-fun obligation0UO_0 () Int)
(declare-fun obligation0ar_0 () Int)
(declare-fun obligation0S_0 () Int)
(declare-fun obligation0T_0 () Int)
(assert (>= obligation0U_0 0))
(assert (>= obligation0UA_0 0))
(assert (>= obligation0AT_0 0))
(assert (>= obligation0UO_0 0))
(assert (or (= obligation0ar_0 22)
))
(assert (= obligation0S_0 15))
(assert (= obligation0T_0 16))
(assert (=> (= (obligation0 0) true) (and
 (set.member (tuple  obligation0U_0 obligation0S_0) (ASSIGN* 0))
 (set.member (tuple  obligation0U_0 obligation0UA_0) (ASSIGN* 0))
 (set.member (tuple obligation0UA_0 obligation0ar_0 obligation0AT_0) (ASSOC 0))
 (set.member (tuple  obligation0UO_0 obligation0T_0) (ASSIGN* 0))
 (set.member (tuple  obligation0UO_0 obligation0AT_0) (ASSIGN* 0))
 (set.member (tuple  obligation0U_0 obligation0U_0) USERS)
 (distinct obligation0S_0 obligation0U_0)
)))


(declare-fun obligation1U_0 () Int)
(declare-fun obligation1UA_0 () Int)
(declare-fun obligation1AT_0 () Int)
(declare-fun obligation1UO_0 () Int)
(declare-fun obligation1ar_0 () Int)
(declare-fun obligation1S_0 () Int)
(declare-fun obligation1T_0 () Int)
(assert (>= obligation1U_0 0))
(assert (>= obligation1UA_0 0))
(assert (>= obligation1AT_0 0))
(assert (>= obligation1UO_0 0))
(assert (or (= obligation1ar_0 20)
))
(assert (= obligation1S_0 15))
(assert (= obligation1T_0 16))
(assert (=> (= (obligation1 0) true) (and
 (set.member (tuple  obligation1U_0 obligation1S_0) (ASSIGN* 0))
 (set.member (tuple  obligation1U_0 obligation1UA_0) (ASSIGN* 0))
 (set.member (tuple obligation1UA_0 obligation1ar_0 obligation1AT_0) (ASSOC 0))
 (set.member (tuple  obligation1UO_0 obligation1T_0) (ASSIGN* 0))
 (set.member (tuple  obligation1UO_0 obligation1AT_0) (ASSIGN* 0))
 (set.member (tuple  obligation1U_0 obligation1U_0) USERS)
 (distinct obligation1S_0 obligation1U_0)
)))




; 5.2 a->Eff

(declare-fun obligation0_AssignAction_1_0 () (Set (Tuple Int Int)))

(declare-fun obligation0_AssignAction_1_1 () (Set (Tuple Int Int)))

(declare-fun obligation0_AssignAction_1_0_* () (Set (Tuple Int Int)))

(declare-fun obligation0_AssignAction_1_1_* () (Set (Tuple Int Int)))

(assert (=> (= ( obligation0 0) true)
(and


(or
	(and
	;NEGATED PRECONDITION: obligation0_AssignAction_1_1
	(not 	(and
		(and 
			(not (set.member (tuple 13 15) (ASSIGN 0))) 
			(not (set.subset (set.singleton(tuple 13 15)) (set.union (set.singleton (tuple 14 15)) (rel.join (set.singleton (tuple 14 15)) (rel.join (set.singleton (tuple 15 15)) (ASSIGN* 0)))) )		)
		)
		(and 
			(not (set.member (tuple 15 13) (ASSIGN 0))) 
			(not (set.subset (set.singleton(tuple 15 13)) (set.union (set.singleton (tuple 14 15)) (rel.join (set.singleton (tuple 14 15)) (rel.join (set.singleton (tuple 15 15)) (ASSIGN* 0)))) )		)
		)
	))
	;NEGATED POSTCONDITION: obligation0_AssignAction_1_1
	(= obligation0_AssignAction_1_1 (as set.empty (Set (Tuple Int Int))))
	)

	(and
	;PRECONDITION: obligation0_AssignAction_1_1
	(and
		(and 
			(not (set.member (tuple 13 15) (ASSIGN 0))) 
			(not (set.subset (set.singleton(tuple 13 15)) (set.union (set.singleton (tuple 14 15)) (rel.join (set.singleton (tuple 14 15)) (rel.join (set.singleton (tuple 15 15)) (ASSIGN* 0)))) )		)
		)
		(and 
			(not (set.member (tuple 15 13) (ASSIGN 0))) 
			(not (set.subset (set.singleton(tuple 15 13)) (set.union (set.singleton (tuple 14 15)) (rel.join (set.singleton (tuple 14 15)) (rel.join (set.singleton (tuple 15 15)) (ASSIGN* 0)))) )		)
		)
	)
	;POSTCONDITION: obligation0_AssignAction_1_1
	(= obligation0_AssignAction_1_1 (set.singleton( tuple 13 15)))
	)
)

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation0_AssignAction_1_0
		(=>(and(not (set.member (tuple 14 15) (ASSIGN 0)))(not (= 14 15))(not (set.member (tuple 15 14) (ASSIGN* 0)))) (and (= obligation0_AssignAction_1_0 (set.singleton( tuple 14 15))) (= obligation0_AssignAction_1_0_* (set.union (set.singleton (tuple 14 15)) (rel.join (set.singleton (tuple 14 15)) (rel.join (set.singleton (tuple 15 15)) (ASSIGN* 0)))))))

		(=>(not (and(not (set.member (tuple 14 15) (ASSIGN 0)))(not (= 14 15))(not (set.member (tuple 15 14) (ASSIGN* 0))))) (and (= obligation0_AssignAction_1_0 (as set.empty (Set (Tuple Int Int)))) (= obligation0_AssignAction_1_0_* (as set.empty (Set (Tuple Int Int))))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 1) 
	(set.union (ASSIGN 0) (set.union obligation0_AssignAction_1_1  obligation0_AssignAction_1_0))
))
(assert (= (ASSIGN* 1) 
	(set.union (ASSIGN* 0) (set.union obligation0_AssignAction_1_1_*  obligation0_AssignAction_1_0_*))
))
(assert (= (ASSOC 1) (ASSOC 0)))



(declare-fun obligation1_AssignAction_1_0 () (Set (Tuple Int Int)))

(declare-fun obligation1_AssignAction_1_0_* () (Set (Tuple Int Int)))

(assert (=> (= ( obligation1 0) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation1_AssignAction_1_0
		(=>(and(not (set.member (tuple 13 15) (ASSIGN 0)))(not (= 13 15))(not (set.member (tuple 15 13) (ASSIGN* 0)))) (and (= obligation1_AssignAction_1_0 (set.singleton( tuple 13 15))) (= obligation1_AssignAction_1_0_* (set.union (set.singleton (tuple 13 15)) (rel.join (set.singleton (tuple 13 15)) (rel.join (set.singleton (tuple 15 15)) (ASSIGN* 0)))))))

		(=>(not (and(not (set.member (tuple 13 15) (ASSIGN 0)))(not (= 13 15))(not (set.member (tuple 15 13) (ASSIGN* 0))))) (and (= obligation1_AssignAction_1_0 (as set.empty (Set (Tuple Int Int)))) (= obligation1_AssignAction_1_0_* (as set.empty (Set (Tuple Int Int))))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 1) 
	(set.union (ASSIGN 0)  obligation1_AssignAction_1_0)
))
(assert (= (ASSIGN* 1) 
	(set.union (ASSIGN* 0)  obligation1_AssignAction_1_0_*)
))
(assert (= (ASSOC 1) (ASSOC 0)))



; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 1) (ASSIGN* 0))
(or 
(= (obligation1 0) true)(= (obligation0 0) true))))
(assert (=> (distinct (ASSIGN 1) (ASSIGN 0))
(or (= (obligation1 0) true)(= (obligation0 0) true))))
(assert (=> (distinct (ASSOC 1) (ASSOC 0))
(or 
(= (obligation1 0) true)(= (obligation0 0) true))))


; 5.4 Exactly one naive
; AT LEAST ONE
(assert (or(= (obligation1 0) true)(= (obligation0 0) true)))


;--------------------------------------------------------------------------------------------------------------------
;STEP2

; 5.1 a->PRE
(declare-fun obligation0U_1 () Int)
(declare-fun obligation0UA_1 () Int)
(declare-fun obligation0AT_1 () Int)
(declare-fun obligation0UO_1 () Int)
(declare-fun obligation0ar_1 () Int)
(declare-fun obligation0S_1 () Int)
(declare-fun obligation0T_1 () Int)
(assert (>= obligation0U_1 0))
(assert (>= obligation0UA_1 0))
(assert (>= obligation0AT_1 0))
(assert (>= obligation0UO_1 0))
(assert (or (= obligation0ar_1 22)
))
(assert (= obligation0S_1 15))
(assert (= obligation0T_1 16))
(assert (=> (= (obligation0 1) true) (and
 (set.member (tuple  obligation0U_1 obligation0S_1) (ASSIGN* 1))
 (set.member (tuple  obligation0U_1 obligation0UA_1) (ASSIGN* 1))
 (set.member (tuple obligation0UA_1 obligation0ar_1 obligation0AT_1) (ASSOC 1))
 (set.member (tuple  obligation0UO_1 obligation0T_1) (ASSIGN* 1))
 (set.member (tuple  obligation0UO_1 obligation0AT_1) (ASSIGN* 1))
 (set.member (tuple  obligation0U_1 obligation0U_1) USERS)
 (distinct obligation0S_1 obligation0U_1)
)))


(declare-fun obligation1U_1 () Int)
(declare-fun obligation1UA_1 () Int)
(declare-fun obligation1AT_1 () Int)
(declare-fun obligation1UO_1 () Int)
(declare-fun obligation1ar_1 () Int)
(declare-fun obligation1S_1 () Int)
(declare-fun obligation1T_1 () Int)
(assert (>= obligation1U_1 0))
(assert (>= obligation1UA_1 0))
(assert (>= obligation1AT_1 0))
(assert (>= obligation1UO_1 0))
(assert (or (= obligation1ar_1 20)
))
(assert (= obligation1S_1 15))
(assert (= obligation1T_1 16))
(assert (=> (= (obligation1 1) true) (and
 (set.member (tuple  obligation1U_1 obligation1S_1) (ASSIGN* 1))
 (set.member (tuple  obligation1U_1 obligation1UA_1) (ASSIGN* 1))
 (set.member (tuple obligation1UA_1 obligation1ar_1 obligation1AT_1) (ASSOC 1))
 (set.member (tuple  obligation1UO_1 obligation1T_1) (ASSIGN* 1))
 (set.member (tuple  obligation1UO_1 obligation1AT_1) (ASSIGN* 1))
 (set.member (tuple  obligation1U_1 obligation1U_1) USERS)
 (distinct obligation1S_1 obligation1U_1)
)))




; 5.2 a->Eff

(declare-fun obligation0_AssignAction_2_0 () (Set (Tuple Int Int)))

(declare-fun obligation0_AssignAction_2_1 () (Set (Tuple Int Int)))

(declare-fun obligation0_AssignAction_2_0_* () (Set (Tuple Int Int)))

(declare-fun obligation0_AssignAction_2_1_* () (Set (Tuple Int Int)))

(assert (=> (= ( obligation0 1) true)
(and


(or
	(and
	;NEGATED PRECONDITION: obligation0_AssignAction_2_1
	(not 	(and
		(and 
			(not (set.member (tuple 13 15) (ASSIGN 1))) 
			(not (set.subset (set.singleton(tuple 13 15)) (set.union (set.singleton (tuple 14 15)) (rel.join (set.singleton (tuple 14 15)) (rel.join (set.singleton (tuple 15 15)) (ASSIGN* 1)))) )		)
		)
		(and 
			(not (set.member (tuple 15 13) (ASSIGN 1))) 
			(not (set.subset (set.singleton(tuple 15 13)) (set.union (set.singleton (tuple 14 15)) (rel.join (set.singleton (tuple 14 15)) (rel.join (set.singleton (tuple 15 15)) (ASSIGN* 1)))) )		)
		)
	))
	;NEGATED POSTCONDITION: obligation0_AssignAction_2_1
	(= obligation0_AssignAction_2_1 (as set.empty (Set (Tuple Int Int))))
	)

	(and
	;PRECONDITION: obligation0_AssignAction_2_1
	(and
		(and 
			(not (set.member (tuple 13 15) (ASSIGN 1))) 
			(not (set.subset (set.singleton(tuple 13 15)) (set.union (set.singleton (tuple 14 15)) (rel.join (set.singleton (tuple 14 15)) (rel.join (set.singleton (tuple 15 15)) (ASSIGN* 1)))) )		)
		)
		(and 
			(not (set.member (tuple 15 13) (ASSIGN 1))) 
			(not (set.subset (set.singleton(tuple 15 13)) (set.union (set.singleton (tuple 14 15)) (rel.join (set.singleton (tuple 14 15)) (rel.join (set.singleton (tuple 15 15)) (ASSIGN* 1)))) )		)
		)
	)
	;POSTCONDITION: obligation0_AssignAction_2_1
	(= obligation0_AssignAction_2_1 (set.singleton( tuple 13 15)))
	)
)

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation0_AssignAction_2_0
		(=>(and(not (set.member (tuple 14 15) (ASSIGN 1)))(not (= 14 15))(not (set.member (tuple 15 14) (ASSIGN* 1)))) (and (= obligation0_AssignAction_2_0 (set.singleton( tuple 14 15))) (= obligation0_AssignAction_2_0_* (set.union (set.singleton (tuple 14 15)) (rel.join (set.singleton (tuple 14 15)) (rel.join (set.singleton (tuple 15 15)) (ASSIGN* 1)))))))

		(=>(not (and(not (set.member (tuple 14 15) (ASSIGN 1)))(not (= 14 15))(not (set.member (tuple 15 14) (ASSIGN* 1))))) (and (= obligation0_AssignAction_2_0 (as set.empty (Set (Tuple Int Int)))) (= obligation0_AssignAction_2_0_* (as set.empty (Set (Tuple Int Int))))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 2) 
	(set.union (ASSIGN 1) (set.union obligation0_AssignAction_2_1  obligation0_AssignAction_2_0))
))
(assert (= (ASSIGN* 2) 
	(set.union (ASSIGN* 1) (set.union obligation0_AssignAction_2_1_*  obligation0_AssignAction_2_0_*))
))
(assert (= (ASSOC 2) (ASSOC 1)))



(declare-fun obligation1_AssignAction_2_0 () (Set (Tuple Int Int)))

(declare-fun obligation1_AssignAction_2_0_* () (Set (Tuple Int Int)))

(assert (=> (= ( obligation1 1) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation1_AssignAction_2_0
		(=>(and(not (set.member (tuple 13 15) (ASSIGN 1)))(not (= 13 15))(not (set.member (tuple 15 13) (ASSIGN* 1)))) (and (= obligation1_AssignAction_2_0 (set.singleton( tuple 13 15))) (= obligation1_AssignAction_2_0_* (set.union (set.singleton (tuple 13 15)) (rel.join (set.singleton (tuple 13 15)) (rel.join (set.singleton (tuple 15 15)) (ASSIGN* 1)))))))

		(=>(not (and(not (set.member (tuple 13 15) (ASSIGN 1)))(not (= 13 15))(not (set.member (tuple 15 13) (ASSIGN* 1))))) (and (= obligation1_AssignAction_2_0 (as set.empty (Set (Tuple Int Int)))) (= obligation1_AssignAction_2_0_* (as set.empty (Set (Tuple Int Int))))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 2) 
	(set.union (ASSIGN 1)  obligation1_AssignAction_2_0)
))
(assert (= (ASSIGN* 2) 
	(set.union (ASSIGN* 1)  obligation1_AssignAction_2_0_*)
))
(assert (= (ASSOC 2) (ASSOC 1)))



; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 2) (ASSIGN* 1))
(or 
(= (obligation1 1) true)(= (obligation0 1) true))))
(assert (=> (distinct (ASSIGN 2) (ASSIGN 1))
(or (= (obligation1 1) true)(= (obligation0 1) true))))
(assert (=> (distinct (ASSOC 2) (ASSOC 1))
(or 
(= (obligation1 1) true)(= (obligation0 1) true))))


; 5.4 Exactly one naive
; AT LEAST ONE
(assert (or(= (obligation1 1) true)(= (obligation0 1) true)))

;PRE PROPERTY
(declare-fun queryVARar () Int)
(declare-fun queryVARat () Int)
(assert 
(and (= (obligation0 0) true)
 (= obligation0U_0 11 ) 
 (= obligation0ar_0 queryVARar ) 
 (= obligation0T_0 queryVARat )
 ))

;POST PROPERTY
(assert 
(and (= (obligation1 1) true)
 (= obligation1U_1 14 ) 
 (= obligation1ar_1 queryVARar ) 
 (= obligation1T_1 queryVARat )
 ))
(check-sat)
(get-value (obligation1))
(get-value (obligation0))
(get-value (obligation0U_0))
(get-value (obligation0UA_0))
(get-value (obligation0AT_0))
(get-value (obligation0UO_0))
(get-value (obligation0S_0))
(get-value (obligation0T_0))
(get-value (obligation0ar_0))
(get-value (obligation1U_0))
(get-value (obligation1UA_0))
(get-value (obligation1AT_0))
(get-value (obligation1UO_0))
(get-value (obligation1S_0))
(get-value (obligation1T_0))
(get-value (obligation1ar_0))
(get-value (obligation0U_0))
(get-value (obligation0UA_0))
(get-value (obligation0AT_0))
(get-value (obligation0UO_0))
(get-value (obligation0S_0))
(get-value (obligation0T_0))
(get-value (obligation0ar_0))
(get-value (obligation1U_0))
(get-value (obligation1UA_0))
(get-value (obligation1AT_0))
(get-value (obligation1UO_0))
(get-value (obligation1S_0))
(get-value (obligation1T_0))
(get-value (obligation1ar_0))
(get-value (obligation0U_1))
(get-value (obligation0UA_1))
(get-value (obligation0AT_1))
(get-value (obligation0UO_1))
(get-value (obligation0S_1))
(get-value (obligation0T_1))
(get-value (obligation0ar_1))
(get-value (obligation1U_1))
(get-value (obligation1UA_1))
(get-value (obligation1AT_1))
(get-value (obligation1UO_1))
(get-value (obligation1S_1))
(get-value (obligation1T_1))
(get-value (obligation1ar_1))
(get-value (queryVARar))
(get-value (queryVARat))
(get-value ((ASSIGN 0)))
(get-value ((ASSIGN 1)))
(get-value ((ASSIGN 2)))
(get-value ((ASSOC 0)))
(get-value ((ASSOC 1)))
(get-value ((ASSOC 2)))
