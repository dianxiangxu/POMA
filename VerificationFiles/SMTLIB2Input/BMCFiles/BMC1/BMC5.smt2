(set-logic ALL)
(set-option :produce-models true)
(declare-fun SetToCheckUA () (Set (Tuple Int Int)))
(assert (= SetToCheckUA (insert (mkTuple 71 71) 
(mkTuple 26 26) 
(mkTuple 56 56) 
(mkTuple 63 63) 
(mkTuple 18 18) 
(mkTuple 48 48) 
(mkTuple 11 11) 
(mkTuple 70 70) 
(mkTuple 25 25) 
(mkTuple 55 55) 
(mkTuple 62 62) 
(mkTuple 17 17) 
(mkTuple 47 47) 
(mkTuple 77 77) 
(mkTuple 39 39) 
(mkTuple 43 43) 
(mkTuple 46 46) 
(mkTuple 12 12) 
(mkTuple 72 72) 
(mkTuple 68 68) 
(mkTuple 27 27) 
(mkTuple 75 75) 
(mkTuple 49 49) 
(mkTuple 37 37) 
(mkTuple 67 67) 
(mkTuple 60 60) 
(mkTuple 15 15) 
(mkTuple 2 2) 
(mkTuple 59 59) 
(mkTuple 1 1) 
(mkTuple 82 82) 
(mkTuple 14 14) 
(mkTuple 44 44) 
(mkTuple 58 58) 
(mkTuple 81 81) 
(mkTuple 36 36) 
(mkTuple 54 54) 
(mkTuple 13 13) 
(mkTuple 69 69) 
(mkTuple 28 28) 
(mkTuple 32 32) 
(mkTuple 20 20) 
(mkTuple 80 80) 
(mkTuple 76 76) 
(mkTuple 83 83) 
(mkTuple 5 5) 
(mkTuple 42 42) 
(mkTuple 4 4) 
(mkTuple 6 6) 
(mkTuple 61 61) 
(mkTuple 45 45) 
(mkTuple 9 9) 
(singleton (mkTuple 23 23)))))
(declare-fun SetToCheckAT () (Set (Tuple Int Int)))
(assert (= SetToCheckAT (insert (mkTuple 41 41) 
(mkTuple 29 29) 
(mkTuple 33 33) 
(mkTuple 3 3) 
(mkTuple 22 22) 
(mkTuple 52 52) 
(mkTuple 78 78) 
(mkTuple 66 66) 
(mkTuple 74 74) 
(mkTuple 21 21) 
(mkTuple 10 10) 
(mkTuple 40 40) 
(mkTuple 24 24) 
(mkTuple 84 84) 
(mkTuple 73 73) 
(mkTuple 16 16) 
(mkTuple 50 50) 
(mkTuple 35 35) 
(mkTuple 65 65) 
(mkTuple 38 38) 
(mkTuple 7 7) 
(mkTuple 31 31) 
(mkTuple 57 57) 
(mkTuple 34 34) 
(mkTuple 64 64) 
(mkTuple 19 19) 
(singleton (mkTuple 53 53)))))
(declare-fun ASSIGN* (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN* 0) (insert (mkTuple 46 51) 
(mkTuple 16 21) 
(mkTuple 38 51) 
(mkTuple 43 30) 
(mkTuple 18 18) 
(mkTuple 24 21) 
(mkTuple 48 48) 
(mkTuple 52 22) 
(mkTuple 78 78) 
(mkTuple 25 25) 
(mkTuple 47 8) 
(mkTuple 55 55) 
(mkTuple 9 8) 
(mkTuple 62 62) 
(mkTuple 75 20) 
(mkTuple 77 17) 
(mkTuple 7 65) 
(mkTuple 58 8) 
(mkTuple 16 22) 
(mkTuple 43 43) 
(mkTuple 12 8) 
(mkTuple 2 37) 
(mkTuple 43 55) 
(mkTuple 4 56) 
(mkTuple 71 20) 
(mkTuple 3 51) 
(mkTuple 50 50) 
(mkTuple 49 61) 
(mkTuple 72 37) 
(mkTuple 26 51) 
(mkTuple 15 30) 
(mkTuple 52 21) 
(mkTuple 69 51) 
(mkTuple 58 63) 
(mkTuple 71 8) 
(mkTuple 74 51) 
(mkTuple 77 6) 
(mkTuple 31 51) 
(mkTuple 12 20) 
(mkTuple 40 21) 
(mkTuple 36 69) 
(mkTuple 66 65) 
(mkTuple 14 1) 
(mkTuple 82 6) 
(mkTuple 81 18) 
(mkTuple 50 51) 
(mkTuple 15 55) 
(mkTuple 59 59) 
(mkTuple 15 67) 
(mkTuple 66 66) 
(mkTuple 23 54) 
(mkTuple 70 8) 
(mkTuple 45 60) 
(mkTuple 70 60) 
(mkTuple 23 30) 
(mkTuple 14 14) 
(mkTuple 42 9) 
(mkTuple 37 61) 
(mkTuple 43 6) 
(mkTuple 77 15) 
(mkTuple 21 21) 
(mkTuple 31 30) 
(mkTuple 76 6) 
(mkTuple 42 83) 
(mkTuple 22 51) 
(mkTuple 84 10) 
(mkTuple 65 51) 
(mkTuple 78 51) 
(mkTuple 73 73) 
(mkTuple 7 51) 
(mkTuple 32 32) 
(mkTuple 11 9) 
(mkTuple 35 51) 
(mkTuple 32 20) 
(mkTuple 80 80) 
(mkTuple 24 10) 
(mkTuple 70 28) 
(mkTuple 23 55) 
(mkTuple 36 79) 
(mkTuple 79 79) 
(mkTuple 4 4) 
(mkTuple 70 9) 
(mkTuple 1 79) 
(mkTuple 42 8) 
(mkTuple 47 20) 
(mkTuple 77 60) 
(mkTuple 18 51) 
(mkTuple 8 8) 
(mkTuple 58 17) 
(mkTuple 23 67) 
(mkTuple 55 30) 
(mkTuple 58 5) 
(mkTuple 78 74) 
(mkTuple 15 17) 
(mkTuple 5 55) 
(mkTuple 33 21) 
(mkTuple 35 74) 
(mkTuple 48 20) 
(mkTuple 33 33) 
(mkTuple 63 63) 
(mkTuple 63 8) 
(mkTuple 53 74) 
(mkTuple 58 20) 
(mkTuple 70 30) 
(mkTuple 58 32) 
(mkTuple 70 54) 
(mkTuple 44 30) 
(mkTuple 29 51) 
(mkTuple 2 61) 
(mkTuple 81 51) 
(mkTuple 23 68) 
(mkTuple 24 24) 
(mkTuple 84 84) 
(mkTuple 5 30) 
(mkTuple 13 9) 
(mkTuple 69 79) 
(mkTuple 26 79) 
(mkTuple 65 65) 
(mkTuple 56 83) 
(mkTuple 49 37) 
(mkTuple 12 12) 
(mkTuple 45 9) 
(mkTuple 58 55) 
(mkTuple 2 8) 
(mkTuple 23 8) 
(mkTuple 44 55) 
(mkTuple 75 63) 
(mkTuple 45 11) 
(mkTuple 62 83) 
(mkTuple 72 20) 
(mkTuple 44 43) 
(mkTuple 75 75) 
(mkTuple 75 8) 
(mkTuple 14 51) 
(mkTuple 57 51) 
(mkTuple 2 72) 
(mkTuple 29 74) 
(mkTuple 49 49) 
(mkTuple 66 21) 
(mkTuple 13 8) 
(mkTuple 29 29) 
(mkTuple 32 63) 
(mkTuple 76 67) 
(mkTuple 3 3) 
(mkTuple 76 55) 
(mkTuple 82 30) 
(mkTuple 58 30) 
(mkTuple 23 9) 
(mkTuple 61 20) 
(mkTuple 44 44) 
(mkTuple 74 74) 
(mkTuple 44 56) 
(mkTuple 25 51) 
(mkTuple 38 21) 
(mkTuple 57 74) 
(mkTuple 77 11) 
(mkTuple 54 54) 
(mkTuple 13 13) 
(mkTuple 58 6) 
(mkTuple 82 55) 
(mkTuple 19 51) 
(mkTuple 10 51) 
(mkTuple 23 11) 
(mkTuple 53 51) 
(mkTuple 7 7) 
(mkTuple 2 6) 
(mkTuple 36 51) 
(mkTuple 64 64) 
(mkTuple 19 19) 
(mkTuple 23 23) 
(mkTuple 41 41) 
(mkTuple 54 11) 
(mkTuple 71 71) 
(mkTuple 33 65) 
(mkTuple 63 71) 
(mkTuple 26 46) 
(mkTuple 50 21) 
(mkTuple 11 11) 
(mkTuple 43 82) 
(mkTuple 80 51) 
(mkTuple 64 51) 
(mkTuple 44 9) 
(mkTuple 6 55) 
(mkTuple 34 21) 
(mkTuple 49 20) 
(mkTuple 21 51) 
(mkTuple 22 21) 
(mkTuple 39 39) 
(mkTuple 76 30) 
(mkTuple 27 8) 
(mkTuple 46 46) 
(mkTuple 37 20) 
(mkTuple 17 30) 
(mkTuple 50 10) 
(mkTuple 65 21) 
(mkTuple 6 30) 
(mkTuple 44 8) 
(mkTuple 27 27) 
(mkTuple 34 10) 
(mkTuple 75 71) 
(mkTuple 34 34) 
(mkTuple 14 79) 
(mkTuple 4 83) 
(mkTuple 53 53) 
(mkTuple 56 9) 
(mkTuple 2 76) 
(mkTuple 84 51) 
(mkTuple 59 51) 
(mkTuple 60 60) 
(mkTuple 33 51) 
(mkTuple 15 15) 
(mkTuple 15 6) 
(mkTuple 73 10) 
(mkTuple 2 2) 
(mkTuple 24 51) 
(mkTuple 62 9) 
(mkTuple 27 9) 
(mkTuple 22 22) 
(mkTuple 32 71) 
(mkTuple 52 52) 
(mkTuple 41 51) 
(mkTuple 17 55) 
(mkTuple 45 8) 
(mkTuple 58 58) 
(mkTuple 68 55) 
(mkTuple 68 67) 
(mkTuple 77 67) 
(mkTuple 62 56) 
(mkTuple 77 55) 
(mkTuple 16 51) 
(mkTuple 41 74) 
(mkTuple 18 59) 
(mkTuple 52 51) 
(mkTuple 56 8) 
(mkTuple 43 17) 
(mkTuple 69 69) 
(mkTuple 73 21) 
(mkTuple 28 28) 
(mkTuple 76 76) 
(mkTuple 62 8) 
(mkTuple 68 6) 
(mkTuple 35 35) 
(mkTuple 83 83) 
(mkTuple 23 6) 
(mkTuple 38 38) 
(mkTuple 42 42) 
(mkTuple 6 6) 
(mkTuple 70 55) 
(mkTuple 45 45) 
(mkTuple 68 30) 
(mkTuple 84 21) 
(mkTuple 41 21) 
(mkTuple 26 26) 
(mkTuple 60 9) 
(mkTuple 56 56) 
(mkTuple 11 8) 
(mkTuple 19 10) 
(mkTuple 46 79) 
(mkTuple 28 55) 
(mkTuple 83 9) 
(mkTuple 70 70) 
(mkTuple 72 8) 
(mkTuple 82 17) 
(mkTuple 20 8) 
(mkTuple 17 6) 
(mkTuple 23 60) 
(mkTuple 17 17) 
(mkTuple 44 82) 
(mkTuple 47 47) 
(mkTuple 54 9) 
(mkTuple 10 10) 
(mkTuple 77 77) 
(mkTuple 40 40) 
(mkTuple 77 9) 
(mkTuple 5 82) 
(mkTuple 7 21) 
(mkTuple 35 21) 
(mkTuple 78 21) 
(mkTuple 60 8) 
(mkTuple 11 60) 
(mkTuple 73 51) 
(mkTuple 81 59) 
(mkTuple 19 21) 
(mkTuple 54 60) 
(mkTuple 48 8) 
(mkTuple 58 71) 
(mkTuple 28 30) 
(mkTuple 77 30) 
(mkTuple 39 51) 
(mkTuple 77 54) 
(mkTuple 72 72) 
(mkTuple 68 68) 
(mkTuple 31 31) 
(mkTuple 44 4) 
(mkTuple 37 8) 
(mkTuple 54 8) 
(mkTuple 10 21) 
(mkTuple 44 83) 
(mkTuple 53 21) 
(mkTuple 37 37) 
(mkTuple 27 60) 
(mkTuple 29 21) 
(mkTuple 67 67) 
(mkTuple 2 20) 
(mkTuple 30 30) 
(mkTuple 61 8) 
(mkTuple 32 8) 
(mkTuple 67 6) 
(mkTuple 49 8) 
(mkTuple 67 55) 
(mkTuple 1 51) 
(mkTuple 58 82) 
(mkTuple 1 1) 
(mkTuple 82 82) 
(mkTuple 5 6) 
(mkTuple 34 51) 
(mkTuple 72 61) 
(mkTuple 3 21) 
(mkTuple 4 9) 
(mkTuple 12 61) 
(mkTuple 51 51) 
(mkTuple 81 81) 
(mkTuple 36 36) 
(mkTuple 40 74) 
(mkTuple 2 67) 
(mkTuple 2 55) 
(mkTuple 83 8) 
(mkTuple 16 16) 
(mkTuple 20 20) 
(mkTuple 63 20) 
(mkTuple 67 30) 
(mkTuple 44 17) 
(mkTuple 5 5) 
(mkTuple 44 6) 
(mkTuple 74 21) 
(mkTuple 61 61) 
(mkTuple 57 57) 
(mkTuple 4 8) 
(mkTuple 70 11) 
(mkTuple 38 74) 
(mkTuple 57 21) 
(mkTuple 9 9) 
(mkTuple 48 71) 
(mkTuple 2 30) 
(mkTuple 5 17) 
(mkTuple 66 51) 
(mkTuple 40 51) 
(singleton (mkTuple 77 8)))))
(declare-fun ASSIGN (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN 0) (insert (mkTuple 41 41) 
(mkTuple 71 71) 
(mkTuple 26 26) 
(mkTuple 56 56) 
(mkTuple 33 33) 
(mkTuple 63 63) 
(mkTuple 18 18) 
(mkTuple 48 48) 
(mkTuple 78 78) 
(mkTuple 11 11) 
(mkTuple 70 70) 
(mkTuple 25 25) 
(mkTuple 55 55) 
(mkTuple 62 62) 
(mkTuple 17 17) 
(mkTuple 47 47) 
(mkTuple 10 10) 
(mkTuple 77 77) 
(mkTuple 40 40) 
(mkTuple 24 24) 
(mkTuple 84 84) 
(mkTuple 39 39) 
(mkTuple 43 43) 
(mkTuple 50 50) 
(mkTuple 46 46) 
(mkTuple 65 65) 
(mkTuple 12 12) 
(mkTuple 72 72) 
(mkTuple 68 68) 
(mkTuple 31 31) 
(mkTuple 27 27) 
(mkTuple 75 75) 
(mkTuple 34 34) 
(mkTuple 53 53) 
(mkTuple 49 49) 
(mkTuple 37 37) 
(mkTuple 67 67) 
(mkTuple 60 60) 
(mkTuple 15 15) 
(mkTuple 2 2) 
(mkTuple 29 29) 
(mkTuple 3 3) 
(mkTuple 59 59) 
(mkTuple 22 22) 
(mkTuple 52 52) 
(mkTuple 1 1) 
(mkTuple 82 82) 
(mkTuple 66 66) 
(mkTuple 14 14) 
(mkTuple 44 44) 
(mkTuple 74 74) 
(mkTuple 58 58) 
(mkTuple 21 21) 
(mkTuple 81 81) 
(mkTuple 36 36) 
(mkTuple 54 54) 
(mkTuple 13 13) 
(mkTuple 73 73) 
(mkTuple 69 69) 
(mkTuple 28 28) 
(mkTuple 32 32) 
(mkTuple 16 16) 
(mkTuple 20 20) 
(mkTuple 80 80) 
(mkTuple 76 76) 
(mkTuple 35 35) 
(mkTuple 83 83) 
(mkTuple 5 5) 
(mkTuple 38 38) 
(mkTuple 42 42) 
(mkTuple 4 4) 
(mkTuple 7 7) 
(mkTuple 6 6) 
(mkTuple 61 61) 
(mkTuple 57 57) 
(mkTuple 45 45) 
(mkTuple 9 9) 
(mkTuple 64 64) 
(mkTuple 19 19) 
(singleton (mkTuple 23 23)))))
(declare-fun ASSOC (Int) (Set (Tuple Int Int Int)))

(assert (= (ASSOC 0) (insert(mkTuple 17 95 31) 
(mkTuple 18 205 74) 
(mkTuple 18 201 59) 
(mkTuple 18 202 59) 
(mkTuple 59 180 21) 
(mkTuple 81 198 18) 
(mkTuple 81 199 18) 
(mkTuple 81 92 64) 
(mkTuple 81 205 22) 
(mkTuple 81 106 31) 
(singleton (mkTuple 81 93 31)))))

(declare-fun NODES () (Set (Tuple Int Int)))
(assert (= NODES (insert (mkTuple 1 1) 
(mkTuple 2 2) 
(mkTuple 3 3) 
(mkTuple 4 4) 
(mkTuple 5 5) 
(mkTuple 6 6) 
(mkTuple 7 7) 
(mkTuple 8 8) 
(mkTuple 9 9) 
(mkTuple 10 10) 
(mkTuple 11 11) 
(mkTuple 12 12) 
(mkTuple 13 13) 
(mkTuple 14 14) 
(mkTuple 15 15) 
(mkTuple 16 16) 
(mkTuple 17 17) 
(mkTuple 18 18) 
(mkTuple 19 19) 
(mkTuple 20 20) 
(mkTuple 21 21) 
(mkTuple 22 22) 
(mkTuple 23 23) 
(mkTuple 24 24) 
(mkTuple 25 25) 
(mkTuple 26 26) 
(mkTuple 27 27) 
(mkTuple 28 28) 
(mkTuple 29 29) 
(mkTuple 30 30) 
(mkTuple 31 31) 
(mkTuple 32 32) 
(mkTuple 33 33) 
(mkTuple 34 34) 
(mkTuple 35 35) 
(mkTuple 36 36) 
(mkTuple 37 37) 
(mkTuple 38 38) 
(mkTuple 39 39) 
(mkTuple 40 40) 
(mkTuple 41 41) 
(mkTuple 42 42) 
(mkTuple 43 43) 
(mkTuple 44 44) 
(mkTuple 45 45) 
(mkTuple 46 46) 
(mkTuple 47 47) 
(mkTuple 48 48) 
(mkTuple 49 49) 
(mkTuple 50 50) 
(mkTuple 51 51) 
(mkTuple 52 52) 
(mkTuple 53 53) 
(mkTuple 54 54) 
(mkTuple 55 55) 
(mkTuple 56 56) 
(mkTuple 57 57) 
(mkTuple 58 58) 
(mkTuple 59 59) 
(mkTuple 60 60) 
(mkTuple 61 61) 
(mkTuple 62 62) 
(mkTuple 63 63) 
(mkTuple 64 64) 
(mkTuple 65 65) 
(mkTuple 66 66) 
(mkTuple 67 67) 
(mkTuple 68 68) 
(mkTuple 69 69) 
(mkTuple 70 70) 
(mkTuple 71 71) 
(mkTuple 72 72) 
(mkTuple 73 73) 
(mkTuple 74 74) 
(mkTuple 75 75) 
(mkTuple 76 76) 
(mkTuple 77 77) 
(mkTuple 78 78) 
(mkTuple 79 79) 
(mkTuple 80 80) 
(mkTuple 81 81) 
(mkTuple 82 82) 
(mkTuple 83 83) 
(singleton (mkTuple 84 84))))) 


(declare-fun ASSOC*UA (Int) (Set (Tuple Int Int Int)))
(declare-fun ASSIGN*UUA (Int) (Set (Tuple Int Int)))
(declare-fun ASSIGN*AT (Int) (Set (Tuple Int Int)))
(declare-fun ASSOC*(Int) (Set (Tuple Int Int Int)))

(assert (= (ASSIGN*UUA 0) (join SetToCheckUA (ASSIGN* 0))))
(assert (= (ASSIGN*AT 0) (join SetToCheckAT (ASSIGN* 0))))
(assert (= (ASSOC*UA 0) (join (ASSIGN*UUA 0) (ASSOC 0))))
(assert (= (ASSOC* 0) (join (ASSOC*UA 0) (transpose (ASSIGN*AT 0)))))

(declare-fun create_proposal (Int) Int)
(declare-fun add_copi (Int) Int)
(declare-fun add_sp (Int) Int)
(declare-fun delete_copi (Int) Int)
(declare-fun delete_sp (Int) Int)
(declare-fun submit_proposal (Int) Int)
(declare-fun chair_approve (Int) Int)
(declare-fun chair_disapprove (Int) Int)
(declare-fun bm_approve (Int) Int)
(declare-fun bm_disapprove (Int) Int)
(declare-fun dean_approve (Int) Int)
(declare-fun dean_disapprove (Int) Int)
(declare-fun irb_approve (Int) Int)
(declare-fun irb_disapprove (Int) Int)
(declare-fun ra_approve (Int) Int)
(declare-fun ra_disapprove (Int) Int)
(declare-fun rd_approve (Int) Int)
(declare-fun rd_disapprove (Int) Int)
(declare-fun ra_submit (Int) Int)
(declare-fun add_copi0 (Int) Int)
(declare-fun delete_copi0 (Int) Int)
(declare-fun add_copi1 (Int) Int)
(declare-fun delete_copi1 (Int) Int)
(declare-fun ChairApproved0 (Int) Int)
(declare-fun BMApproved0 (Int) Int)
(declare-fun DeanApproved0 (Int) Int)
(declare-fun ChairApproved1 (Int) Int)
(declare-fun BMApproved1 (Int) Int)
(declare-fun DeanApproved1 (Int) Int)
(declare-fun ChairApproved2 (Int) Int)
(declare-fun BMApproved2 (Int) Int)
(declare-fun DeanApproved2 (Int) Int)
(declare-fun chair_approve0 (Int) Int)
(declare-fun bm_approve0 (Int) Int)
(declare-fun dean_approve0 (Int) Int)
(declare-fun chair_approve1 (Int) Int)
(declare-fun bm_approve1 (Int) Int)
(declare-fun dean_approve1 (Int) Int)
(declare-fun chair_approve2 (Int) Int)
(declare-fun bm_approve2 (Int) Int)
(declare-fun dean_approve2 (Int) Int)
;--------------------------------------------------------------------------------------------------------------------
;STEP1
(assert 
(xor 
(= (create_proposal 0) 0) 
(and (member (mkTuple 81 95 31) (ASSOC* 0))  (member (mkTuple 77 17) (ASSIGN* 0)) (= (create_proposal 0) 1))
)
)				

(assert 
(xor 
(= (add_copi0 0) 0) 
(and (member (mkTuple 81 199 18) (ASSOC* 0))  (member (mkTuple 70 6) (ASSIGN* 0)) (= (add_copi0 0) 1))
)
)				

(assert 
(xor 
(= (add_copi1 0) 0) 
(and (member (mkTuple 81 199 18) (ASSOC* 0))  (member (mkTuple 23 6) (ASSIGN* 0)) (= (add_copi1 0) 1))
)
)				

(assert 
(xor 
(= (submit_proposal 0) 0) 
(and (member (mkTuple 81 106 31) (ASSOC* 0))   (= (submit_proposal 0) 1))
)
)				
(assert 
(xor 
(= (chair_approve0 0) 0) 
(and (member (mkTuple 39 194 34) (ASSOC* 0))   (= (chair_approve0 0) 1))
)
)				
(assert 
(xor 
(= (chair_approve1 0) 0) 
(and (member (mkTuple 39 194 34) (ASSOC* 0))   (= (chair_approve1 0) 1))
)
)				
(assert 
(xor 
(= (chair_approve2 0) 0) 
(and (member (mkTuple 39 194 34) (ASSOC* 0))   (= (chair_approve2 0) 1))
)
)				
(assert 
(xor 
(= (chair_disapprove 0) 0) 
(and (member (mkTuple 39 203 34) (ASSOC* 0))   (= (chair_disapprove 0) 1))
)
)				
(assert 
(xor 
(= (bm_approve0 0) 0) 
(and (member (mkTuple 80 194 24) (ASSOC* 0))   (= (bm_approve0 0) 1))
)
)				
(assert 
(xor 
(= (bm_approve1 0) 0) 
(and (member (mkTuple 80 194 24) (ASSOC* 0))   (= (bm_approve1 0) 1))
)
)				
(assert 
(xor 
(= (bm_approve2 0) 0) 
(and (member (mkTuple 80 194 24) (ASSOC* 0))   (= (bm_approve2 0) 1))
)
)				
(assert 
(xor 
(= (bm_disapprove 0) 0) 
(and (member (mkTuple 80 203 24) (ASSOC* 0))   (= (bm_disapprove 0) 1))
)
)				
(assert 
(xor 
(= (dean_approve0 0) 0) 
(and (member (mkTuple 25 194 50) (ASSOC* 0))   (= (dean_approve0 0) 1))
)
)				
(assert 
(xor 
(= (dean_approve1 0) 0) 
(and (member (mkTuple 25 194 50) (ASSOC* 0))   (= (dean_approve1 0) 1))
)
)				
(assert 
(xor 
(= (dean_approve2 0) 0) 
(and (member (mkTuple 25 194 50) (ASSOC* 0))   (= (dean_approve2 0) 1))
)
)				
(assert 
(xor 
(= (dean_disapprove 0) 0) 
(and (member (mkTuple 25 203 50) (ASSOC* 0))   (= (dean_disapprove 0) 1))
)
)				
(assert 
(xor 
(= (irb_approve 0) 0) 
(and (member (mkTuple 69 194 84) (ASSOC* 0))   (= (irb_approve 0) 1))
)
)				
(assert 
(xor 
(= (irb_disapprove 0) 0) 
(and (member (mkTuple 69 203 84) (ASSOC* 0))   (= (irb_disapprove 0) 1))
)
)				
(assert 
(xor 
(= (ra_approve 0) 0) 
(and (member (mkTuple 1 194 73) (ASSOC* 0))   (= (ra_approve 0) 1))
)
)				
(assert 
(xor 
(= (ra_disapprove 0) 0) 
(and (member (mkTuple 1 203 73) (ASSOC* 0))   (= (ra_disapprove 0) 1))
)
)				
(assert 
(xor 
(= (rd_approve 0) 0) 
(and (member (mkTuple 46 194 19) (ASSOC* 0))   (= (rd_approve 0) 1))
)
)				
(assert 
(xor 
(= (rd_disapprove 0) 0) 
(and (member (mkTuple 46 203 19) (ASSOC* 0))   (= (rd_disapprove 0) 1))
)
)				
(assert 
(xor 
(= (ra_submit 0) 0) 
(and (member (mkTuple 1 206 31) (ASSOC* 0))   (= (ra_submit 0) 1))
)
)				

(assert (or 
(and   (= (create_proposal 0) 1)
(xor (= (ASSIGN* 1) 
(union (join (join (union (singleton (mkTuple 77 77)) (join (ASSIGN* 0) (singleton (mkTuple 77 77)))) (singleton (mkTuple 77 81))) (union (singleton (mkTuple 81 81)) (join (singleton (mkTuple 81 81)) (ASSIGN* 0) ))) (ASSIGN* 0))(union (join (join (union (singleton (mkTuple 11 11)) (join (ASSIGN* 0) (singleton (mkTuple 11 11)))) (singleton (mkTuple 11 39))) (union (singleton (mkTuple 39 39)) (join (singleton (mkTuple 39 39)) (ASSIGN* 0) ))) (ASSIGN* 0))(union (join (join (union (singleton (mkTuple 60 60)) (join (ASSIGN* 0) (singleton (mkTuple 60 60)))) (singleton (mkTuple 60 80))) (union (singleton (mkTuple 80 80)) (join (singleton (mkTuple 80 80)) (ASSIGN* 0) ))) (ASSIGN* 0))(union (join (join (union (singleton (mkTuple 9 9)) (join (ASSIGN* 0) (singleton (mkTuple 9 9)))) (singleton (mkTuple 9 25))) (union (singleton (mkTuple 25 25)) (join (singleton (mkTuple 25 25)) (ASSIGN* 0) ))) (ASSIGN* 0)))
(= (ASSIGN* 1) (ASSIGN* 0))))

(and   (= (add_copi0 0) 1)
(xor (= (ASSIGN* 1) 
(union (join (join (union (singleton (mkTuple 70 70)) (join (ASSIGN* 0) (singleton (mkTuple 70 70)))) (singleton (mkTuple 70 18))) (union (singleton (mkTuple 18 18)) (join (singleton (mkTuple 18 18)) (ASSIGN* 0) ))) (ASSIGN* 0))(union (join (join (union (singleton (mkTuple 11 11)) (join (ASSIGN* 0) (singleton (mkTuple 11 11)))) (singleton (mkTuple 11 39))) (union (singleton (mkTuple 39 39)) (join (singleton (mkTuple 39 39)) (ASSIGN* 0) ))) (ASSIGN* 0))(union (join (join (union (singleton (mkTuple 60 60)) (join (ASSIGN* 0) (singleton (mkTuple 60 60)))) (singleton (mkTuple 60 80))) (union (singleton (mkTuple 80 80)) (join (singleton (mkTuple 80 80)) (ASSIGN* 0) ))) (ASSIGN* 0))(union (join (join (union (singleton (mkTuple 9 9)) (join (ASSIGN* 0) (singleton (mkTuple 9 9)))) (singleton (mkTuple 9 25))) (union (singleton (mkTuple 25 25)) (join (singleton (mkTuple 25 25)) (ASSIGN* 0) ))) (ASSIGN* 0)))
(= (ASSIGN* 1) (ASSIGN* 0))))

(and   (= (add_copi1 0) 1)
(xor (= (ASSIGN* 1) 
(union (join (join (union (singleton (mkTuple 23 23)) (join (ASSIGN* 0) (singleton (mkTuple 23 23)))) (singleton (mkTuple 23 18))) (union (singleton (mkTuple 18 18)) (join (singleton (mkTuple 18 18)) (ASSIGN* 0) ))) (ASSIGN* 0))(union (join (join (union (singleton (mkTuple 11 11)) (join (ASSIGN* 0) (singleton (mkTuple 11 11)))) (singleton (mkTuple 11 39))) (union (singleton (mkTuple 39 39)) (join (singleton (mkTuple 39 39)) (ASSIGN* 0) ))) (ASSIGN* 0))(union (join (join (union (singleton (mkTuple 60 60)) (join (ASSIGN* 0) (singleton (mkTuple 60 60)))) (singleton (mkTuple 60 80))) (union (singleton (mkTuple 80 80)) (join (singleton (mkTuple 80 80)) (ASSIGN* 0) ))) (ASSIGN* 0))(union (join (join (union (singleton (mkTuple 9 9)) (join (ASSIGN* 0) (singleton (mkTuple 9 9)))) (singleton (mkTuple 9 25))) (union (singleton (mkTuple 25 25)) (join (singleton (mkTuple 25 25)) (ASSIGN* 0) ))) (ASSIGN* 0)))
(= (ASSIGN* 1) (ASSIGN* 0))))

(and   (= (delete_copi0 0) 1)
(xor (= (ASSIGN* 1) 
(setminus (ASSIGN* 0) (setminus (setminus (union (singleton (mkTuple 70 18)) (join (singleton (mkTuple 70 18)) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 70 70)) (join (ASSIGN* 0)  (singleton (mkTuple 70 70)))) (transpose (union  (singleton (mkTuple 70 70)) (join (ASSIGN* 0)  (singleton (mkTuple 70 70)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 70 18)))) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 70 70)) (join (ASSIGN* 0)  (singleton (mkTuple 70 70)))) (transpose (union  (singleton (mkTuple 70 70)) (join (ASSIGN* 0)  (singleton (mkTuple 70 70)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 70 18)))) (ASSIGN* 0))))(setminus (ASSIGN* 0) (setminus (join (singleton (mkTuple 70 18)) (ASSIGN* 0)) (join (join (singleton (mkTuple 70 70)) (setminus (setminus (ASSIGN 0) (singleton (mkTuple 70 18))) (singleton (mkTuple 70 70)))) (ASSIGN* 0))))(setminus (ASSIGN* 0) (setminus (setminus (union (singleton (mkTuple 11 39)) (join (singleton (mkTuple 11 39)) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 0)  (singleton (mkTuple 11 11)))) (transpose (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 0)  (singleton (mkTuple 11 11)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 11 39)))) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 0)  (singleton (mkTuple 11 11)))) (transpose (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 0)  (singleton (mkTuple 11 11)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 11 39)))) (ASSIGN* 0))))(setminus (ASSIGN* 0) (setminus (join (singleton (mkTuple 11 39)) (ASSIGN* 0)) (join (join (singleton (mkTuple 11 11)) (setminus (setminus (ASSIGN 0) (singleton (mkTuple 11 39))) (singleton (mkTuple 11 11)))) (ASSIGN* 0))))(setminus (ASSIGN* 0) (setminus (setminus (union (singleton (mkTuple 60 80)) (join (singleton (mkTuple 60 80)) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 0)  (singleton (mkTuple 60 60)))) (transpose (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 0)  (singleton (mkTuple 60 60)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 60 80)))) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 0)  (singleton (mkTuple 60 60)))) (transpose (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 0)  (singleton (mkTuple 60 60)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 60 80)))) (ASSIGN* 0))))(setminus (ASSIGN* 0) (setminus (join (singleton (mkTuple 60 80)) (ASSIGN* 0)) (join (join (singleton (mkTuple 60 60)) (setminus (setminus (ASSIGN 0) (singleton (mkTuple 60 80))) (singleton (mkTuple 60 60)))) (ASSIGN* 0))))(setminus (ASSIGN* 0) (setminus (setminus (union (singleton (mkTuple 9 25)) (join (singleton (mkTuple 9 25)) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 0)  (singleton (mkTuple 9 9)))) (transpose (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 0)  (singleton (mkTuple 9 9)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 9 25)))) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 0)  (singleton (mkTuple 9 9)))) (transpose (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 0)  (singleton (mkTuple 9 9)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 9 25)))) (ASSIGN* 0))))(setminus (ASSIGN* 0) (setminus (join (singleton (mkTuple 9 25)) (ASSIGN* 0)) (join (join (singleton (mkTuple 9 9)) (setminus (setminus (ASSIGN 0) (singleton (mkTuple 9 25))) (singleton (mkTuple 9 9)))) (ASSIGN* 0)))))
(= (ASSIGN* 1) (ASSIGN* 0))))

(and   (= (delete_copi1 0) 1)
(xor (= (ASSIGN* 1) 
(setminus (ASSIGN* 0) (setminus (setminus (union (singleton (mkTuple 23 18)) (join (singleton (mkTuple 23 18)) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 23 23)) (join (ASSIGN* 0)  (singleton (mkTuple 23 23)))) (transpose (union  (singleton (mkTuple 23 23)) (join (ASSIGN* 0)  (singleton (mkTuple 23 23)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 23 18)))) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 23 23)) (join (ASSIGN* 0)  (singleton (mkTuple 23 23)))) (transpose (union  (singleton (mkTuple 23 23)) (join (ASSIGN* 0)  (singleton (mkTuple 23 23)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 23 18)))) (ASSIGN* 0))))(setminus (ASSIGN* 0) (setminus (join (singleton (mkTuple 23 18)) (ASSIGN* 0)) (join (join (singleton (mkTuple 23 23)) (setminus (setminus (ASSIGN 0) (singleton (mkTuple 23 18))) (singleton (mkTuple 23 23)))) (ASSIGN* 0))))(setminus (ASSIGN* 0) (setminus (setminus (union (singleton (mkTuple 11 39)) (join (singleton (mkTuple 11 39)) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 0)  (singleton (mkTuple 11 11)))) (transpose (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 0)  (singleton (mkTuple 11 11)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 11 39)))) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 0)  (singleton (mkTuple 11 11)))) (transpose (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 0)  (singleton (mkTuple 11 11)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 11 39)))) (ASSIGN* 0))))(setminus (ASSIGN* 0) (setminus (join (singleton (mkTuple 11 39)) (ASSIGN* 0)) (join (join (singleton (mkTuple 11 11)) (setminus (setminus (ASSIGN 0) (singleton (mkTuple 11 39))) (singleton (mkTuple 11 11)))) (ASSIGN* 0))))(setminus (ASSIGN* 0) (setminus (setminus (union (singleton (mkTuple 60 80)) (join (singleton (mkTuple 60 80)) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 0)  (singleton (mkTuple 60 60)))) (transpose (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 0)  (singleton (mkTuple 60 60)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 60 80)))) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 0)  (singleton (mkTuple 60 60)))) (transpose (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 0)  (singleton (mkTuple 60 60)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 60 80)))) (ASSIGN* 0))))(setminus (ASSIGN* 0) (setminus (join (singleton (mkTuple 60 80)) (ASSIGN* 0)) (join (join (singleton (mkTuple 60 60)) (setminus (setminus (ASSIGN 0) (singleton (mkTuple 60 80))) (singleton (mkTuple 60 60)))) (ASSIGN* 0))))(setminus (ASSIGN* 0) (setminus (setminus (union (singleton (mkTuple 9 25)) (join (singleton (mkTuple 9 25)) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 0)  (singleton (mkTuple 9 9)))) (transpose (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 0)  (singleton (mkTuple 9 9)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 9 25)))) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 0)  (singleton (mkTuple 9 9)))) (transpose (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 0)  (singleton (mkTuple 9 9)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 9 25)))) (ASSIGN* 0))))(setminus (ASSIGN* 0) (setminus (join (singleton (mkTuple 9 25)) (ASSIGN* 0)) (join (join (singleton (mkTuple 9 9)) (setminus (setminus (ASSIGN 0) (singleton (mkTuple 9 25))) (singleton (mkTuple 9 9)))) (ASSIGN* 0)))))
(= (ASSIGN* 1) (ASSIGN* 0))))

(= (ASSIGN* 1) (ASSIGN* 0))))
(assert (or
(and   (= (create_proposal 0) 1)
(xor (= (ASSIGN 1) 
(union (ASSIGN 0) (singleton (mkTuple 77 81)))(union (ASSIGN 0) (singleton (mkTuple 11 39)))(union (ASSIGN 0) (singleton (mkTuple 60 80)))(union (ASSIGN 0) (singleton (mkTuple 9 25))))
(= (ASSIGN 1) (ASSIGN 0))))

(and   (= (add_copi0 0) 1)
(xor (= (ASSIGN 1) 
(union (ASSIGN 0) (singleton (mkTuple 70 18)))(union (ASSIGN 0) (singleton (mkTuple 11 39)))(union (ASSIGN 0) (singleton (mkTuple 60 80)))(union (ASSIGN 0) (singleton (mkTuple 9 25))))
(= (ASSIGN 1) (ASSIGN 0))))

(and   (= (add_copi1 0) 1)
(xor (= (ASSIGN 1) 
(union (ASSIGN 0) (singleton (mkTuple 23 18)))(union (ASSIGN 0) (singleton (mkTuple 11 39)))(union (ASSIGN 0) (singleton (mkTuple 60 80)))(union (ASSIGN 0) (singleton (mkTuple 9 25))))
(= (ASSIGN 1) (ASSIGN 0))))

(and   (= (delete_copi0 0) 1)
(xor (= (ASSIGN 1) 
(setminus (ASSIGN 0) (singleton (mkTuple 70 18)))(setminus (ASSIGN 0) (singleton (mkTuple 11 39)))(setminus (ASSIGN 0) (singleton (mkTuple 60 80)))(setminus (ASSIGN 0) (singleton (mkTuple 9 25))))
(= (ASSIGN 1) (ASSIGN 0))))

(and   (= (delete_copi1 0) 1)
(xor (= (ASSIGN 1) 
(setminus (ASSIGN 0) (singleton (mkTuple 23 18)))(setminus (ASSIGN 0) (singleton (mkTuple 11 39)))(setminus (ASSIGN 0) (singleton (mkTuple 60 80)))(setminus (ASSIGN 0) (singleton (mkTuple 9 25))))
(= (ASSIGN 1) (ASSIGN 0))))

(= (ASSIGN 1) (ASSIGN 0))))
(assert (or 
(and  (= (submit_proposal 0) 1)
(xor (= (ASSOC 1) 
(union (union (union (union (setminus (setminus (setminus (setminus (setminus  (ASSOC 0) (singleton(mkTuple 81 106 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 202 59))) (singleton(mkTuple 39 205 34))) (singleton(mkTuple 39 194 31))) (singleton(mkTuple 39 180 21))) (singleton(mkTuple 39 194 31))))
(= (ASSOC 1) (ASSOC 0))))

(and (= (ChairApproved0 1) 1) (= (ChairApproved1 1) 1) (= (ChairApproved2 1) 1)  (= (chair_approve0 0) 1)
(xor (= (ASSOC 1) 
(union (union (union (union (union (union (setminus (setminus  (ASSOC 0) (singleton(mkTuple 39 194 34))) (singleton(mkTuple 39 194 31))) (singleton(mkTuple 80 205 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 80 180 21))) (singleton(mkTuple 69 205 84))) (singleton(mkTuple 69 180 21))) (singleton(mkTuple 69 194 31))))
(= (ASSOC 1) (ASSOC 0))))

(and (= (ChairApproved0 1) 1) (= (ChairApproved1 1) 1) (= (ChairApproved2 1) 1)  (= (chair_approve1 0) 1)
(xor (= (ASSOC 1) 
(union (union (union (union (union (union (setminus (setminus  (ASSOC 0) (singleton(mkTuple 39 194 34))) (singleton(mkTuple 39 194 31))) (singleton(mkTuple 80 205 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 80 180 21))) (singleton(mkTuple 69 205 84))) (singleton(mkTuple 69 180 21))) (singleton(mkTuple 69 194 31))))
(= (ASSOC 1) (ASSOC 0))))

(and (= (ChairApproved0 1) 1) (= (ChairApproved1 1) 1) (= (ChairApproved2 1) 1)  (= (chair_approve2 0) 1)
(xor (= (ASSOC 1) 
(union (union (union (union (union (union (setminus (setminus  (ASSOC 0) (singleton(mkTuple 39 194 34))) (singleton(mkTuple 39 194 31))) (singleton(mkTuple 80 205 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 80 180 21))) (singleton(mkTuple 69 205 84))) (singleton(mkTuple 69 180 21))) (singleton(mkTuple 69 194 31))))
(= (ASSOC 1) (ASSOC 0))))

(and  (= (chair_disapprove 0) 1)
(xor (= (ASSOC 1) 
(union (union (union (union (union (setminus (setminus (setminus  (ASSOC 0) (singleton(mkTuple 39 203 34))) (singleton(mkTuple 39 203 31))) (singleton(mkTuple 39 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))))
(= (ASSOC 1) (ASSOC 0))))

(and (= (BMApproved0 1) 1) (= (BMApproved1 1) 1) (= (BMApproved2 1) 1)  (= (bm_approve0 0) 1)
(xor (= (ASSOC 1) 
(union (union (union (setminus (setminus  (ASSOC 0) (singleton(mkTuple 80 194 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 25 205 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 25 180 21))))
(= (ASSOC 1) (ASSOC 0))))

(and (= (BMApproved0 1) 1) (= (BMApproved1 1) 1) (= (BMApproved2 1) 1)  (= (bm_approve1 0) 1)
(xor (= (ASSOC 1) 
(union (union (union (setminus (setminus  (ASSOC 0) (singleton(mkTuple 80 194 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 25 205 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 25 180 21))))
(= (ASSOC 1) (ASSOC 0))))

(and (= (BMApproved0 1) 1) (= (BMApproved1 1) 1) (= (BMApproved2 1) 1)  (= (bm_approve2 0) 1)
(xor (= (ASSOC 1) 
(union (union (union (setminus (setminus  (ASSOC 0) (singleton(mkTuple 80 194 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 25 205 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 25 180 21))))
(= (ASSOC 1) (ASSOC 0))))

(and  (= (bm_disapprove 0) 1)
(xor (= (ASSOC 1) 
(setminus (union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 0) (singleton(mkTuple 69 203 84))) (singleton(mkTuple 69 203 31))) (singleton(mkTuple 69 203 21))) (singleton(mkTuple 80 203 24))) (singleton(mkTuple 80 203 31))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))) (singleton(mkTuple 39 203 21))))
(= (ASSOC 1) (ASSOC 0))))

(and (= (DeanApproved0 1) 1) (= (DeanApproved1 1) 1) (= (DeanApproved2 1) 1)  (= (dean_approve0 0) 1)
(xor (= (ASSOC 1) 
(union (union (union (union (union (union (union (union (setminus (setminus  (ASSOC 0) (singleton(mkTuple 25 194 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 180 21))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 180 21))))
(= (ASSOC 1) (ASSOC 0))))

(and (= (DeanApproved0 1) 1) (= (DeanApproved1 1) 1) (= (DeanApproved2 1) 1)  (= (dean_approve1 0) 1)
(xor (= (ASSOC 1) 
(union (union (union (union (union (union (union (union (setminus (setminus  (ASSOC 0) (singleton(mkTuple 25 194 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 180 21))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 180 21))))
(= (ASSOC 1) (ASSOC 0))))

(and (= (DeanApproved0 1) 1) (= (DeanApproved1 1) 1) (= (DeanApproved2 1) 1)  (= (dean_approve2 0) 1)
(xor (= (ASSOC 1) 
(union (union (union (union (union (union (union (union (setminus (setminus  (ASSOC 0) (singleton(mkTuple 25 194 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 180 21))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 180 21))))
(= (ASSOC 1) (ASSOC 0))))

(and  (= (dean_disapprove 0) 1)
(xor (= (ASSOC 1) 
(setminus (union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 0) (singleton(mkTuple 69 203 84))) (singleton(mkTuple 69 203 31))) (singleton(mkTuple 69 203 21))) (singleton(mkTuple 80 203 24))) (singleton(mkTuple 80 203 31))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 25 203 50))) (singleton(mkTuple 25 203 31))) (singleton(mkTuple 25 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))) (singleton(mkTuple 39 203 21))))
(= (ASSOC 1) (ASSOC 0))))

(and  (= (irb_approve 0) 1)
(xor (= (ASSOC 1) 
(union (union (union (setminus (setminus  (ASSOC 0) (singleton(mkTuple 69 194 84))) (singleton(mkTuple 69 194 31))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))))
(= (ASSOC 1) (ASSOC 0))))

(and  (= (irb_disapprove 0) 1)
(xor (= (ASSOC 1) 
(setminus (union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 0) (singleton(mkTuple 69 203 84))) (singleton(mkTuple 69 203 31))) (singleton(mkTuple 69 203 21))) (singleton(mkTuple 80 203 24))) (singleton(mkTuple 80 203 31))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 25 203 50))) (singleton(mkTuple 25 203 31))) (singleton(mkTuple 25 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))) (singleton(mkTuple 39 203 21))))
(= (ASSOC 1) (ASSOC 0))))

(and  (= (ra_approve 0) 1)
(xor (= (ASSOC 1) 
(union (union (union (union (setminus (setminus (setminus  (ASSOC 0) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 194 73))) (singleton(mkTuple 1 194 3))) (singleton(mkTuple 46 194 31))) (singleton(mkTuple 46 205 19))) (singleton(mkTuple 46 180 21))) (singleton(mkTuple 46 205 3))))
(= (ASSOC 1) (ASSOC 0))))

(and  (= (ra_disapprove 0) 1)
(xor (= (ASSOC 1) 
(union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 0) (singleton(mkTuple 1 203 31))) (singleton(mkTuple 1 203 73))) (singleton(mkTuple 1 203 21))) (singleton(mkTuple 1 203 3))) (singleton(mkTuple 39 203 21))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 25 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))))
(= (ASSOC 1) (ASSOC 0))))

(and  (= (rd_approve 0) 1)
(xor (= (ASSOC 1) 
(union (union (setminus (setminus (setminus  (ASSOC 0) (singleton(mkTuple 46 194 19))) (singleton(mkTuple 46 194 31))) (singleton(mkTuple 46 194 3))) (singleton(mkTuple 1 196 31))) (singleton(mkTuple 1 205 73))))
(= (ASSOC 1) (ASSOC 0))))

(and  (= (rd_disapprove 0) 1)
(xor (= (ASSOC 1) 
(union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 0) (singleton(mkTuple 46 203 21))) (singleton(mkTuple 46 203 31))) (singleton(mkTuple 46 203 3))) (singleton(mkTuple 46 203 19))) (singleton(mkTuple 1 203 21))) (singleton(mkTuple 39 203 21))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 25 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))))
(= (ASSOC 1) (ASSOC 0))))

(and  (= (ra_submit 0) 1)
(xor (= (ASSOC 1) 
(union (union (setminus (setminus (setminus  (ASSOC 0) (singleton(mkTuple 1 206 31))) (singleton(mkTuple 1 206 73))) (singleton(mkTuple 1 206 3))) (singleton(mkTuple 46 204 31))) (singleton(mkTuple 46 205 19))))
(= (ASSOC 1) (ASSOC 0))))

(= (ASSOC 1) (ASSOC 0))))
(assert (and (= (dean_approve1 1) 1) (= (DeanApproved1 1) 1) ))
(assert (and (= (dean_approve0 1) 1) (= (DeanApproved0 1) 1) ))
(assert (and (= (dean_approve2 1) 1) (= (DeanApproved2 1) 1) ))
(assert (and (= (bm_approve1 1) 1) (= (BMApproved1 1) 1) ))
(assert (and (= (chair_approve2 1) 1) (= (ChairApproved2 1) 1) ))
(assert (and (= (chair_approve1 1) 1) (= (ChairApproved1 1) 1) ))
(assert (and (= (bm_approve2 1) 1) (= (BMApproved2 1) 1) ))
(assert (and (= (chair_approve0 1) 1) (= (ChairApproved0 1) 1) ))
(assert (and (= (bm_approve0 1) 1) (= (BMApproved0 1) 1) ))


(assert (= (ASSIGN*UUA 1) (join SetToCheckUA (ASSIGN* 1))))
(assert (= (ASSIGN*AT 1) (join SetToCheckAT (ASSIGN* 1))))
(assert (= (ASSOC*UA 1) (join (ASSIGN*UUA 1) (ASSOC 1))))
(assert (= (ASSOC* 1) (join (ASSOC*UA 1) (transpose (ASSIGN*AT 1)))))


;--------------------------------------------------------------------------------------------------------------------
;STEP2
(assert 
(xor 
(= (create_proposal 1) 0) 
(and (member (mkTuple 81 95 31) (ASSOC* 1))  (member (mkTuple 77 17) (ASSIGN* 1)) (= (create_proposal 1) 1))
)
)				

(assert 
(xor 
(= (add_copi0 1) 0) 
(and (member (mkTuple 81 199 18) (ASSOC* 1))  (member (mkTuple 70 6) (ASSIGN* 1)) (= (add_copi0 1) 1))
)
)				

(assert 
(xor 
(= (add_copi1 1) 0) 
(and (member (mkTuple 81 199 18) (ASSOC* 1))  (member (mkTuple 23 6) (ASSIGN* 1)) (= (add_copi1 1) 1))
)
)				

(assert 
(xor 
(= (submit_proposal 1) 0) 
(and (member (mkTuple 81 106 31) (ASSOC* 1))   (= (submit_proposal 1) 1))
)
)				
(assert 
(xor 
(= (chair_approve0 1) 0) 
(and (member (mkTuple 39 194 34) (ASSOC* 1))   (= (chair_approve0 1) 1))
)
)				
(assert 
(xor 
(= (chair_approve1 1) 0) 
(and (member (mkTuple 39 194 34) (ASSOC* 1))   (= (chair_approve1 1) 1))
)
)				
(assert 
(xor 
(= (chair_approve2 1) 0) 
(and (member (mkTuple 39 194 34) (ASSOC* 1))   (= (chair_approve2 1) 1))
)
)				
(assert 
(xor 
(= (chair_disapprove 1) 0) 
(and (member (mkTuple 39 203 34) (ASSOC* 1))   (= (chair_disapprove 1) 1))
)
)				
(assert 
(xor 
(= (bm_approve0 1) 0) 
(and (member (mkTuple 80 194 24) (ASSOC* 1))   (= (bm_approve0 1) 1))
)
)				
(assert 
(xor 
(= (bm_approve1 1) 0) 
(and (member (mkTuple 80 194 24) (ASSOC* 1))   (= (bm_approve1 1) 1))
)
)				
(assert 
(xor 
(= (bm_approve2 1) 0) 
(and (member (mkTuple 80 194 24) (ASSOC* 1))   (= (bm_approve2 1) 1))
)
)				
(assert 
(xor 
(= (bm_disapprove 1) 0) 
(and (member (mkTuple 80 203 24) (ASSOC* 1))   (= (bm_disapprove 1) 1))
)
)				
(assert 
(xor 
(= (dean_approve0 1) 0) 
(and (member (mkTuple 25 194 50) (ASSOC* 1))   (= (dean_approve0 1) 1))
)
)				
(assert 
(xor 
(= (dean_approve1 1) 0) 
(and (member (mkTuple 25 194 50) (ASSOC* 1))   (= (dean_approve1 1) 1))
)
)				
(assert 
(xor 
(= (dean_approve2 1) 0) 
(and (member (mkTuple 25 194 50) (ASSOC* 1))   (= (dean_approve2 1) 1))
)
)				
(assert 
(xor 
(= (dean_disapprove 1) 0) 
(and (member (mkTuple 25 203 50) (ASSOC* 1))   (= (dean_disapprove 1) 1))
)
)				
(assert 
(xor 
(= (irb_approve 1) 0) 
(and (member (mkTuple 69 194 84) (ASSOC* 1))   (= (irb_approve 1) 1))
)
)				
(assert 
(xor 
(= (irb_disapprove 1) 0) 
(and (member (mkTuple 69 203 84) (ASSOC* 1))   (= (irb_disapprove 1) 1))
)
)				
(assert 
(xor 
(= (ra_approve 1) 0) 
(and (member (mkTuple 1 194 73) (ASSOC* 1))   (= (ra_approve 1) 1))
)
)				
(assert 
(xor 
(= (ra_disapprove 1) 0) 
(and (member (mkTuple 1 203 73) (ASSOC* 1))   (= (ra_disapprove 1) 1))
)
)				
(assert 
(xor 
(= (rd_approve 1) 0) 
(and (member (mkTuple 46 194 19) (ASSOC* 1))   (= (rd_approve 1) 1))
)
)				
(assert 
(xor 
(= (rd_disapprove 1) 0) 
(and (member (mkTuple 46 203 19) (ASSOC* 1))   (= (rd_disapprove 1) 1))
)
)				
(assert 
(xor 
(= (ra_submit 1) 0) 
(and (member (mkTuple 1 206 31) (ASSOC* 1))   (= (ra_submit 1) 1))
)
)				

(assert (or 
(and   (= (create_proposal 1) 1)
(xor (= (ASSIGN* 2) 
(union (join (join (union (singleton (mkTuple 77 77)) (join (ASSIGN* 1) (singleton (mkTuple 77 77)))) (singleton (mkTuple 77 81))) (union (singleton (mkTuple 81 81)) (join (singleton (mkTuple 81 81)) (ASSIGN* 1) ))) (ASSIGN* 1))(union (join (join (union (singleton (mkTuple 11 11)) (join (ASSIGN* 1) (singleton (mkTuple 11 11)))) (singleton (mkTuple 11 39))) (union (singleton (mkTuple 39 39)) (join (singleton (mkTuple 39 39)) (ASSIGN* 1) ))) (ASSIGN* 1))(union (join (join (union (singleton (mkTuple 60 60)) (join (ASSIGN* 1) (singleton (mkTuple 60 60)))) (singleton (mkTuple 60 80))) (union (singleton (mkTuple 80 80)) (join (singleton (mkTuple 80 80)) (ASSIGN* 1) ))) (ASSIGN* 1))(union (join (join (union (singleton (mkTuple 9 9)) (join (ASSIGN* 1) (singleton (mkTuple 9 9)))) (singleton (mkTuple 9 25))) (union (singleton (mkTuple 25 25)) (join (singleton (mkTuple 25 25)) (ASSIGN* 1) ))) (ASSIGN* 1)))
(= (ASSIGN* 2) (ASSIGN* 1))))

(and   (= (add_copi0 1) 1)
(xor (= (ASSIGN* 2) 
(union (join (join (union (singleton (mkTuple 70 70)) (join (ASSIGN* 1) (singleton (mkTuple 70 70)))) (singleton (mkTuple 70 18))) (union (singleton (mkTuple 18 18)) (join (singleton (mkTuple 18 18)) (ASSIGN* 1) ))) (ASSIGN* 1))(union (join (join (union (singleton (mkTuple 11 11)) (join (ASSIGN* 1) (singleton (mkTuple 11 11)))) (singleton (mkTuple 11 39))) (union (singleton (mkTuple 39 39)) (join (singleton (mkTuple 39 39)) (ASSIGN* 1) ))) (ASSIGN* 1))(union (join (join (union (singleton (mkTuple 60 60)) (join (ASSIGN* 1) (singleton (mkTuple 60 60)))) (singleton (mkTuple 60 80))) (union (singleton (mkTuple 80 80)) (join (singleton (mkTuple 80 80)) (ASSIGN* 1) ))) (ASSIGN* 1))(union (join (join (union (singleton (mkTuple 9 9)) (join (ASSIGN* 1) (singleton (mkTuple 9 9)))) (singleton (mkTuple 9 25))) (union (singleton (mkTuple 25 25)) (join (singleton (mkTuple 25 25)) (ASSIGN* 1) ))) (ASSIGN* 1)))
(= (ASSIGN* 2) (ASSIGN* 1))))

(and   (= (add_copi1 1) 1)
(xor (= (ASSIGN* 2) 
(union (join (join (union (singleton (mkTuple 23 23)) (join (ASSIGN* 1) (singleton (mkTuple 23 23)))) (singleton (mkTuple 23 18))) (union (singleton (mkTuple 18 18)) (join (singleton (mkTuple 18 18)) (ASSIGN* 1) ))) (ASSIGN* 1))(union (join (join (union (singleton (mkTuple 11 11)) (join (ASSIGN* 1) (singleton (mkTuple 11 11)))) (singleton (mkTuple 11 39))) (union (singleton (mkTuple 39 39)) (join (singleton (mkTuple 39 39)) (ASSIGN* 1) ))) (ASSIGN* 1))(union (join (join (union (singleton (mkTuple 60 60)) (join (ASSIGN* 1) (singleton (mkTuple 60 60)))) (singleton (mkTuple 60 80))) (union (singleton (mkTuple 80 80)) (join (singleton (mkTuple 80 80)) (ASSIGN* 1) ))) (ASSIGN* 1))(union (join (join (union (singleton (mkTuple 9 9)) (join (ASSIGN* 1) (singleton (mkTuple 9 9)))) (singleton (mkTuple 9 25))) (union (singleton (mkTuple 25 25)) (join (singleton (mkTuple 25 25)) (ASSIGN* 1) ))) (ASSIGN* 1)))
(= (ASSIGN* 2) (ASSIGN* 1))))

(and   (= (delete_copi0 1) 1)
(xor (= (ASSIGN* 2) 
(setminus (ASSIGN* 1) (setminus (setminus (union (singleton (mkTuple 70 18)) (join (singleton (mkTuple 70 18)) (ASSIGN* 1))) (join (join (intersection (join (union  (singleton (mkTuple 70 70)) (join (ASSIGN* 1)  (singleton (mkTuple 70 70)))) (transpose (union  (singleton (mkTuple 70 70)) (join (ASSIGN* 1)  (singleton (mkTuple 70 70)))))) NODES) (setminus (ASSIGN 1) (singleton (mkTuple 70 18)))) (ASSIGN* 1))) (join (join (intersection (join (union  (singleton (mkTuple 70 70)) (join (ASSIGN* 1)  (singleton (mkTuple 70 70)))) (transpose (union  (singleton (mkTuple 70 70)) (join (ASSIGN* 1)  (singleton (mkTuple 70 70)))))) NODES) (setminus (ASSIGN 1) (singleton (mkTuple 70 18)))) (ASSIGN* 1))))(setminus (ASSIGN* 1) (setminus (join (singleton (mkTuple 70 18)) (ASSIGN* 1)) (join (join (singleton (mkTuple 70 70)) (setminus (setminus (ASSIGN 1) (singleton (mkTuple 70 18))) (singleton (mkTuple 70 70)))) (ASSIGN* 1))))(setminus (ASSIGN* 1) (setminus (setminus (union (singleton (mkTuple 11 39)) (join (singleton (mkTuple 11 39)) (ASSIGN* 1))) (join (join (intersection (join (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 1)  (singleton (mkTuple 11 11)))) (transpose (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 1)  (singleton (mkTuple 11 11)))))) NODES) (setminus (ASSIGN 1) (singleton (mkTuple 11 39)))) (ASSIGN* 1))) (join (join (intersection (join (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 1)  (singleton (mkTuple 11 11)))) (transpose (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 1)  (singleton (mkTuple 11 11)))))) NODES) (setminus (ASSIGN 1) (singleton (mkTuple 11 39)))) (ASSIGN* 1))))(setminus (ASSIGN* 1) (setminus (join (singleton (mkTuple 11 39)) (ASSIGN* 1)) (join (join (singleton (mkTuple 11 11)) (setminus (setminus (ASSIGN 1) (singleton (mkTuple 11 39))) (singleton (mkTuple 11 11)))) (ASSIGN* 1))))(setminus (ASSIGN* 1) (setminus (setminus (union (singleton (mkTuple 60 80)) (join (singleton (mkTuple 60 80)) (ASSIGN* 1))) (join (join (intersection (join (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 1)  (singleton (mkTuple 60 60)))) (transpose (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 1)  (singleton (mkTuple 60 60)))))) NODES) (setminus (ASSIGN 1) (singleton (mkTuple 60 80)))) (ASSIGN* 1))) (join (join (intersection (join (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 1)  (singleton (mkTuple 60 60)))) (transpose (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 1)  (singleton (mkTuple 60 60)))))) NODES) (setminus (ASSIGN 1) (singleton (mkTuple 60 80)))) (ASSIGN* 1))))(setminus (ASSIGN* 1) (setminus (join (singleton (mkTuple 60 80)) (ASSIGN* 1)) (join (join (singleton (mkTuple 60 60)) (setminus (setminus (ASSIGN 1) (singleton (mkTuple 60 80))) (singleton (mkTuple 60 60)))) (ASSIGN* 1))))(setminus (ASSIGN* 1) (setminus (setminus (union (singleton (mkTuple 9 25)) (join (singleton (mkTuple 9 25)) (ASSIGN* 1))) (join (join (intersection (join (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 1)  (singleton (mkTuple 9 9)))) (transpose (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 1)  (singleton (mkTuple 9 9)))))) NODES) (setminus (ASSIGN 1) (singleton (mkTuple 9 25)))) (ASSIGN* 1))) (join (join (intersection (join (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 1)  (singleton (mkTuple 9 9)))) (transpose (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 1)  (singleton (mkTuple 9 9)))))) NODES) (setminus (ASSIGN 1) (singleton (mkTuple 9 25)))) (ASSIGN* 1))))(setminus (ASSIGN* 1) (setminus (join (singleton (mkTuple 9 25)) (ASSIGN* 1)) (join (join (singleton (mkTuple 9 9)) (setminus (setminus (ASSIGN 1) (singleton (mkTuple 9 25))) (singleton (mkTuple 9 9)))) (ASSIGN* 1)))))
(= (ASSIGN* 2) (ASSIGN* 1))))

(and   (= (delete_copi1 1) 1)
(xor (= (ASSIGN* 2) 
(setminus (ASSIGN* 1) (setminus (setminus (union (singleton (mkTuple 23 18)) (join (singleton (mkTuple 23 18)) (ASSIGN* 1))) (join (join (intersection (join (union  (singleton (mkTuple 23 23)) (join (ASSIGN* 1)  (singleton (mkTuple 23 23)))) (transpose (union  (singleton (mkTuple 23 23)) (join (ASSIGN* 1)  (singleton (mkTuple 23 23)))))) NODES) (setminus (ASSIGN 1) (singleton (mkTuple 23 18)))) (ASSIGN* 1))) (join (join (intersection (join (union  (singleton (mkTuple 23 23)) (join (ASSIGN* 1)  (singleton (mkTuple 23 23)))) (transpose (union  (singleton (mkTuple 23 23)) (join (ASSIGN* 1)  (singleton (mkTuple 23 23)))))) NODES) (setminus (ASSIGN 1) (singleton (mkTuple 23 18)))) (ASSIGN* 1))))(setminus (ASSIGN* 1) (setminus (join (singleton (mkTuple 23 18)) (ASSIGN* 1)) (join (join (singleton (mkTuple 23 23)) (setminus (setminus (ASSIGN 1) (singleton (mkTuple 23 18))) (singleton (mkTuple 23 23)))) (ASSIGN* 1))))(setminus (ASSIGN* 1) (setminus (setminus (union (singleton (mkTuple 11 39)) (join (singleton (mkTuple 11 39)) (ASSIGN* 1))) (join (join (intersection (join (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 1)  (singleton (mkTuple 11 11)))) (transpose (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 1)  (singleton (mkTuple 11 11)))))) NODES) (setminus (ASSIGN 1) (singleton (mkTuple 11 39)))) (ASSIGN* 1))) (join (join (intersection (join (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 1)  (singleton (mkTuple 11 11)))) (transpose (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 1)  (singleton (mkTuple 11 11)))))) NODES) (setminus (ASSIGN 1) (singleton (mkTuple 11 39)))) (ASSIGN* 1))))(setminus (ASSIGN* 1) (setminus (join (singleton (mkTuple 11 39)) (ASSIGN* 1)) (join (join (singleton (mkTuple 11 11)) (setminus (setminus (ASSIGN 1) (singleton (mkTuple 11 39))) (singleton (mkTuple 11 11)))) (ASSIGN* 1))))(setminus (ASSIGN* 1) (setminus (setminus (union (singleton (mkTuple 60 80)) (join (singleton (mkTuple 60 80)) (ASSIGN* 1))) (join (join (intersection (join (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 1)  (singleton (mkTuple 60 60)))) (transpose (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 1)  (singleton (mkTuple 60 60)))))) NODES) (setminus (ASSIGN 1) (singleton (mkTuple 60 80)))) (ASSIGN* 1))) (join (join (intersection (join (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 1)  (singleton (mkTuple 60 60)))) (transpose (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 1)  (singleton (mkTuple 60 60)))))) NODES) (setminus (ASSIGN 1) (singleton (mkTuple 60 80)))) (ASSIGN* 1))))(setminus (ASSIGN* 1) (setminus (join (singleton (mkTuple 60 80)) (ASSIGN* 1)) (join (join (singleton (mkTuple 60 60)) (setminus (setminus (ASSIGN 1) (singleton (mkTuple 60 80))) (singleton (mkTuple 60 60)))) (ASSIGN* 1))))(setminus (ASSIGN* 1) (setminus (setminus (union (singleton (mkTuple 9 25)) (join (singleton (mkTuple 9 25)) (ASSIGN* 1))) (join (join (intersection (join (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 1)  (singleton (mkTuple 9 9)))) (transpose (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 1)  (singleton (mkTuple 9 9)))))) NODES) (setminus (ASSIGN 1) (singleton (mkTuple 9 25)))) (ASSIGN* 1))) (join (join (intersection (join (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 1)  (singleton (mkTuple 9 9)))) (transpose (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 1)  (singleton (mkTuple 9 9)))))) NODES) (setminus (ASSIGN 1) (singleton (mkTuple 9 25)))) (ASSIGN* 1))))(setminus (ASSIGN* 1) (setminus (join (singleton (mkTuple 9 25)) (ASSIGN* 1)) (join (join (singleton (mkTuple 9 9)) (setminus (setminus (ASSIGN 1) (singleton (mkTuple 9 25))) (singleton (mkTuple 9 9)))) (ASSIGN* 1)))))
(= (ASSIGN* 2) (ASSIGN* 1))))

(= (ASSIGN* 2) (ASSIGN* 1))))
(assert (or
(and   (= (create_proposal 1) 1)
(xor (= (ASSIGN 2) 
(union (ASSIGN 1) (singleton (mkTuple 77 81)))(union (ASSIGN 1) (singleton (mkTuple 11 39)))(union (ASSIGN 1) (singleton (mkTuple 60 80)))(union (ASSIGN 1) (singleton (mkTuple 9 25))))
(= (ASSIGN 2) (ASSIGN 1))))

(and   (= (add_copi0 1) 1)
(xor (= (ASSIGN 2) 
(union (ASSIGN 1) (singleton (mkTuple 70 18)))(union (ASSIGN 1) (singleton (mkTuple 11 39)))(union (ASSIGN 1) (singleton (mkTuple 60 80)))(union (ASSIGN 1) (singleton (mkTuple 9 25))))
(= (ASSIGN 2) (ASSIGN 1))))

(and   (= (add_copi1 1) 1)
(xor (= (ASSIGN 2) 
(union (ASSIGN 1) (singleton (mkTuple 23 18)))(union (ASSIGN 1) (singleton (mkTuple 11 39)))(union (ASSIGN 1) (singleton (mkTuple 60 80)))(union (ASSIGN 1) (singleton (mkTuple 9 25))))
(= (ASSIGN 2) (ASSIGN 1))))

(and   (= (delete_copi0 1) 1)
(xor (= (ASSIGN 2) 
(setminus (ASSIGN 1) (singleton (mkTuple 70 18)))(setminus (ASSIGN 1) (singleton (mkTuple 11 39)))(setminus (ASSIGN 1) (singleton (mkTuple 60 80)))(setminus (ASSIGN 1) (singleton (mkTuple 9 25))))
(= (ASSIGN 2) (ASSIGN 1))))

(and   (= (delete_copi1 1) 1)
(xor (= (ASSIGN 2) 
(setminus (ASSIGN 1) (singleton (mkTuple 23 18)))(setminus (ASSIGN 1) (singleton (mkTuple 11 39)))(setminus (ASSIGN 1) (singleton (mkTuple 60 80)))(setminus (ASSIGN 1) (singleton (mkTuple 9 25))))
(= (ASSIGN 2) (ASSIGN 1))))

(= (ASSIGN 2) (ASSIGN 1))))
(assert (or 
(and  (= (submit_proposal 1) 1)
(xor (= (ASSOC 2) 
(union (union (union (union (setminus (setminus (setminus (setminus (setminus  (ASSOC 1) (singleton(mkTuple 81 106 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 202 59))) (singleton(mkTuple 39 205 34))) (singleton(mkTuple 39 194 31))) (singleton(mkTuple 39 180 21))) (singleton(mkTuple 39 194 31))))
(= (ASSOC 2) (ASSOC 1))))

(and (= (ChairApproved0 2) 1) (= (ChairApproved1 2) 1) (= (ChairApproved2 2) 1)  (= (chair_approve0 1) 1)
(xor (= (ASSOC 2) 
(union (union (union (union (union (union (setminus (setminus  (ASSOC 1) (singleton(mkTuple 39 194 34))) (singleton(mkTuple 39 194 31))) (singleton(mkTuple 80 205 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 80 180 21))) (singleton(mkTuple 69 205 84))) (singleton(mkTuple 69 180 21))) (singleton(mkTuple 69 194 31))))
(= (ASSOC 2) (ASSOC 1))))

(and (= (ChairApproved0 2) 1) (= (ChairApproved1 2) 1) (= (ChairApproved2 2) 1)  (= (chair_approve1 1) 1)
(xor (= (ASSOC 2) 
(union (union (union (union (union (union (setminus (setminus  (ASSOC 1) (singleton(mkTuple 39 194 34))) (singleton(mkTuple 39 194 31))) (singleton(mkTuple 80 205 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 80 180 21))) (singleton(mkTuple 69 205 84))) (singleton(mkTuple 69 180 21))) (singleton(mkTuple 69 194 31))))
(= (ASSOC 2) (ASSOC 1))))

(and (= (ChairApproved0 2) 1) (= (ChairApproved1 2) 1) (= (ChairApproved2 2) 1)  (= (chair_approve2 1) 1)
(xor (= (ASSOC 2) 
(union (union (union (union (union (union (setminus (setminus  (ASSOC 1) (singleton(mkTuple 39 194 34))) (singleton(mkTuple 39 194 31))) (singleton(mkTuple 80 205 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 80 180 21))) (singleton(mkTuple 69 205 84))) (singleton(mkTuple 69 180 21))) (singleton(mkTuple 69 194 31))))
(= (ASSOC 2) (ASSOC 1))))

(and  (= (chair_disapprove 1) 1)
(xor (= (ASSOC 2) 
(union (union (union (union (union (setminus (setminus (setminus  (ASSOC 1) (singleton(mkTuple 39 203 34))) (singleton(mkTuple 39 203 31))) (singleton(mkTuple 39 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))))
(= (ASSOC 2) (ASSOC 1))))

(and (= (BMApproved0 2) 1) (= (BMApproved1 2) 1) (= (BMApproved2 2) 1)  (= (bm_approve0 1) 1)
(xor (= (ASSOC 2) 
(union (union (union (setminus (setminus  (ASSOC 1) (singleton(mkTuple 80 194 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 25 205 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 25 180 21))))
(= (ASSOC 2) (ASSOC 1))))

(and (= (BMApproved0 2) 1) (= (BMApproved1 2) 1) (= (BMApproved2 2) 1)  (= (bm_approve1 1) 1)
(xor (= (ASSOC 2) 
(union (union (union (setminus (setminus  (ASSOC 1) (singleton(mkTuple 80 194 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 25 205 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 25 180 21))))
(= (ASSOC 2) (ASSOC 1))))

(and (= (BMApproved0 2) 1) (= (BMApproved1 2) 1) (= (BMApproved2 2) 1)  (= (bm_approve2 1) 1)
(xor (= (ASSOC 2) 
(union (union (union (setminus (setminus  (ASSOC 1) (singleton(mkTuple 80 194 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 25 205 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 25 180 21))))
(= (ASSOC 2) (ASSOC 1))))

(and  (= (bm_disapprove 1) 1)
(xor (= (ASSOC 2) 
(setminus (union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 1) (singleton(mkTuple 69 203 84))) (singleton(mkTuple 69 203 31))) (singleton(mkTuple 69 203 21))) (singleton(mkTuple 80 203 24))) (singleton(mkTuple 80 203 31))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))) (singleton(mkTuple 39 203 21))))
(= (ASSOC 2) (ASSOC 1))))

(and (= (DeanApproved0 2) 1) (= (DeanApproved1 2) 1) (= (DeanApproved2 2) 1)  (= (dean_approve0 1) 1)
(xor (= (ASSOC 2) 
(union (union (union (union (union (union (union (union (setminus (setminus  (ASSOC 1) (singleton(mkTuple 25 194 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 180 21))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 180 21))))
(= (ASSOC 2) (ASSOC 1))))

(and (= (DeanApproved0 2) 1) (= (DeanApproved1 2) 1) (= (DeanApproved2 2) 1)  (= (dean_approve1 1) 1)
(xor (= (ASSOC 2) 
(union (union (union (union (union (union (union (union (setminus (setminus  (ASSOC 1) (singleton(mkTuple 25 194 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 180 21))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 180 21))))
(= (ASSOC 2) (ASSOC 1))))

(and (= (DeanApproved0 2) 1) (= (DeanApproved1 2) 1) (= (DeanApproved2 2) 1)  (= (dean_approve2 1) 1)
(xor (= (ASSOC 2) 
(union (union (union (union (union (union (union (union (setminus (setminus  (ASSOC 1) (singleton(mkTuple 25 194 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 180 21))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 180 21))))
(= (ASSOC 2) (ASSOC 1))))

(and  (= (dean_disapprove 1) 1)
(xor (= (ASSOC 2) 
(setminus (union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 1) (singleton(mkTuple 69 203 84))) (singleton(mkTuple 69 203 31))) (singleton(mkTuple 69 203 21))) (singleton(mkTuple 80 203 24))) (singleton(mkTuple 80 203 31))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 25 203 50))) (singleton(mkTuple 25 203 31))) (singleton(mkTuple 25 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))) (singleton(mkTuple 39 203 21))))
(= (ASSOC 2) (ASSOC 1))))

(and  (= (irb_approve 1) 1)
(xor (= (ASSOC 2) 
(union (union (union (setminus (setminus  (ASSOC 1) (singleton(mkTuple 69 194 84))) (singleton(mkTuple 69 194 31))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))))
(= (ASSOC 2) (ASSOC 1))))

(and  (= (irb_disapprove 1) 1)
(xor (= (ASSOC 2) 
(setminus (union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 1) (singleton(mkTuple 69 203 84))) (singleton(mkTuple 69 203 31))) (singleton(mkTuple 69 203 21))) (singleton(mkTuple 80 203 24))) (singleton(mkTuple 80 203 31))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 25 203 50))) (singleton(mkTuple 25 203 31))) (singleton(mkTuple 25 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))) (singleton(mkTuple 39 203 21))))
(= (ASSOC 2) (ASSOC 1))))

(and  (= (ra_approve 1) 1)
(xor (= (ASSOC 2) 
(union (union (union (union (setminus (setminus (setminus  (ASSOC 1) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 194 73))) (singleton(mkTuple 1 194 3))) (singleton(mkTuple 46 194 31))) (singleton(mkTuple 46 205 19))) (singleton(mkTuple 46 180 21))) (singleton(mkTuple 46 205 3))))
(= (ASSOC 2) (ASSOC 1))))

(and  (= (ra_disapprove 1) 1)
(xor (= (ASSOC 2) 
(union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 1) (singleton(mkTuple 1 203 31))) (singleton(mkTuple 1 203 73))) (singleton(mkTuple 1 203 21))) (singleton(mkTuple 1 203 3))) (singleton(mkTuple 39 203 21))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 25 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))))
(= (ASSOC 2) (ASSOC 1))))

(and  (= (rd_approve 1) 1)
(xor (= (ASSOC 2) 
(union (union (setminus (setminus (setminus  (ASSOC 1) (singleton(mkTuple 46 194 19))) (singleton(mkTuple 46 194 31))) (singleton(mkTuple 46 194 3))) (singleton(mkTuple 1 196 31))) (singleton(mkTuple 1 205 73))))
(= (ASSOC 2) (ASSOC 1))))

(and  (= (rd_disapprove 1) 1)
(xor (= (ASSOC 2) 
(union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 1) (singleton(mkTuple 46 203 21))) (singleton(mkTuple 46 203 31))) (singleton(mkTuple 46 203 3))) (singleton(mkTuple 46 203 19))) (singleton(mkTuple 1 203 21))) (singleton(mkTuple 39 203 21))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 25 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))))
(= (ASSOC 2) (ASSOC 1))))

(and  (= (ra_submit 1) 1)
(xor (= (ASSOC 2) 
(union (union (setminus (setminus (setminus  (ASSOC 1) (singleton(mkTuple 1 206 31))) (singleton(mkTuple 1 206 73))) (singleton(mkTuple 1 206 3))) (singleton(mkTuple 46 204 31))) (singleton(mkTuple 46 205 19))))
(= (ASSOC 2) (ASSOC 1))))

(= (ASSOC 2) (ASSOC 1))))
(assert (and (= (dean_approve1 2) 1) (= (DeanApproved1 2) 1) ))
(assert (and (= (dean_approve0 2) 1) (= (DeanApproved0 2) 1) ))
(assert (and (= (dean_approve2 2) 1) (= (DeanApproved2 2) 1) ))
(assert (and (= (bm_approve1 2) 1) (= (BMApproved1 2) 1) ))
(assert (and (= (chair_approve2 2) 1) (= (ChairApproved2 2) 1) ))
(assert (and (= (chair_approve1 2) 1) (= (ChairApproved1 2) 1) ))
(assert (and (= (bm_approve2 2) 1) (= (BMApproved2 2) 1) ))
(assert (and (= (chair_approve0 2) 1) (= (ChairApproved0 2) 1) ))
(assert (and (= (bm_approve0 2) 1) (= (BMApproved0 2) 1) ))


(assert (= (ASSIGN*UUA 2) (join SetToCheckUA (ASSIGN* 2))))
(assert (= (ASSIGN*AT 2) (join SetToCheckAT (ASSIGN* 2))))
(assert (= (ASSOC*UA 2) (join (ASSIGN*UUA 2) (ASSOC 2))))
(assert (= (ASSOC* 2) (join (ASSOC*UA 2) (transpose (ASSIGN*AT 2)))))


;--------------------------------------------------------------------------------------------------------------------
;STEP3
(assert 
(xor 
(= (create_proposal 2) 0) 
(and (member (mkTuple 81 95 31) (ASSOC* 2))  (member (mkTuple 77 17) (ASSIGN* 2)) (= (create_proposal 2) 1))
)
)				

(assert 
(xor 
(= (add_copi0 2) 0) 
(and (member (mkTuple 81 199 18) (ASSOC* 2))  (member (mkTuple 70 6) (ASSIGN* 2)) (= (add_copi0 2) 1))
)
)				

(assert 
(xor 
(= (add_copi1 2) 0) 
(and (member (mkTuple 81 199 18) (ASSOC* 2))  (member (mkTuple 23 6) (ASSIGN* 2)) (= (add_copi1 2) 1))
)
)				

(assert 
(xor 
(= (submit_proposal 2) 0) 
(and (member (mkTuple 81 106 31) (ASSOC* 2))   (= (submit_proposal 2) 1))
)
)				
(assert 
(xor 
(= (chair_approve0 2) 0) 
(and (member (mkTuple 39 194 34) (ASSOC* 2))   (= (chair_approve0 2) 1))
)
)				
(assert 
(xor 
(= (chair_approve1 2) 0) 
(and (member (mkTuple 39 194 34) (ASSOC* 2))   (= (chair_approve1 2) 1))
)
)				
(assert 
(xor 
(= (chair_approve2 2) 0) 
(and (member (mkTuple 39 194 34) (ASSOC* 2))   (= (chair_approve2 2) 1))
)
)				
(assert 
(xor 
(= (chair_disapprove 2) 0) 
(and (member (mkTuple 39 203 34) (ASSOC* 2))   (= (chair_disapprove 2) 1))
)
)				
(assert 
(xor 
(= (bm_approve0 2) 0) 
(and (member (mkTuple 80 194 24) (ASSOC* 2))   (= (bm_approve0 2) 1))
)
)				
(assert 
(xor 
(= (bm_approve1 2) 0) 
(and (member (mkTuple 80 194 24) (ASSOC* 2))   (= (bm_approve1 2) 1))
)
)				
(assert 
(xor 
(= (bm_approve2 2) 0) 
(and (member (mkTuple 80 194 24) (ASSOC* 2))   (= (bm_approve2 2) 1))
)
)				
(assert 
(xor 
(= (bm_disapprove 2) 0) 
(and (member (mkTuple 80 203 24) (ASSOC* 2))   (= (bm_disapprove 2) 1))
)
)				
(assert 
(xor 
(= (dean_approve0 2) 0) 
(and (member (mkTuple 25 194 50) (ASSOC* 2))   (= (dean_approve0 2) 1))
)
)				
(assert 
(xor 
(= (dean_approve1 2) 0) 
(and (member (mkTuple 25 194 50) (ASSOC* 2))   (= (dean_approve1 2) 1))
)
)				
(assert 
(xor 
(= (dean_approve2 2) 0) 
(and (member (mkTuple 25 194 50) (ASSOC* 2))   (= (dean_approve2 2) 1))
)
)				
(assert 
(xor 
(= (dean_disapprove 2) 0) 
(and (member (mkTuple 25 203 50) (ASSOC* 2))   (= (dean_disapprove 2) 1))
)
)				
(assert 
(xor 
(= (irb_approve 2) 0) 
(and (member (mkTuple 69 194 84) (ASSOC* 2))   (= (irb_approve 2) 1))
)
)				
(assert 
(xor 
(= (irb_disapprove 2) 0) 
(and (member (mkTuple 69 203 84) (ASSOC* 2))   (= (irb_disapprove 2) 1))
)
)				
(assert 
(xor 
(= (ra_approve 2) 0) 
(and (member (mkTuple 1 194 73) (ASSOC* 2))   (= (ra_approve 2) 1))
)
)				
(assert 
(xor 
(= (ra_disapprove 2) 0) 
(and (member (mkTuple 1 203 73) (ASSOC* 2))   (= (ra_disapprove 2) 1))
)
)				
(assert 
(xor 
(= (rd_approve 2) 0) 
(and (member (mkTuple 46 194 19) (ASSOC* 2))   (= (rd_approve 2) 1))
)
)				
(assert 
(xor 
(= (rd_disapprove 2) 0) 
(and (member (mkTuple 46 203 19) (ASSOC* 2))   (= (rd_disapprove 2) 1))
)
)				
(assert 
(xor 
(= (ra_submit 2) 0) 
(and (member (mkTuple 1 206 31) (ASSOC* 2))   (= (ra_submit 2) 1))
)
)				

(assert (or 
(and   (= (create_proposal 2) 1)
(xor (= (ASSIGN* 3) 
(union (join (join (union (singleton (mkTuple 77 77)) (join (ASSIGN* 2) (singleton (mkTuple 77 77)))) (singleton (mkTuple 77 81))) (union (singleton (mkTuple 81 81)) (join (singleton (mkTuple 81 81)) (ASSIGN* 2) ))) (ASSIGN* 2))(union (join (join (union (singleton (mkTuple 11 11)) (join (ASSIGN* 2) (singleton (mkTuple 11 11)))) (singleton (mkTuple 11 39))) (union (singleton (mkTuple 39 39)) (join (singleton (mkTuple 39 39)) (ASSIGN* 2) ))) (ASSIGN* 2))(union (join (join (union (singleton (mkTuple 60 60)) (join (ASSIGN* 2) (singleton (mkTuple 60 60)))) (singleton (mkTuple 60 80))) (union (singleton (mkTuple 80 80)) (join (singleton (mkTuple 80 80)) (ASSIGN* 2) ))) (ASSIGN* 2))(union (join (join (union (singleton (mkTuple 9 9)) (join (ASSIGN* 2) (singleton (mkTuple 9 9)))) (singleton (mkTuple 9 25))) (union (singleton (mkTuple 25 25)) (join (singleton (mkTuple 25 25)) (ASSIGN* 2) ))) (ASSIGN* 2)))
(= (ASSIGN* 3) (ASSIGN* 2))))

(and   (= (add_copi0 2) 1)
(xor (= (ASSIGN* 3) 
(union (join (join (union (singleton (mkTuple 70 70)) (join (ASSIGN* 2) (singleton (mkTuple 70 70)))) (singleton (mkTuple 70 18))) (union (singleton (mkTuple 18 18)) (join (singleton (mkTuple 18 18)) (ASSIGN* 2) ))) (ASSIGN* 2))(union (join (join (union (singleton (mkTuple 11 11)) (join (ASSIGN* 2) (singleton (mkTuple 11 11)))) (singleton (mkTuple 11 39))) (union (singleton (mkTuple 39 39)) (join (singleton (mkTuple 39 39)) (ASSIGN* 2) ))) (ASSIGN* 2))(union (join (join (union (singleton (mkTuple 60 60)) (join (ASSIGN* 2) (singleton (mkTuple 60 60)))) (singleton (mkTuple 60 80))) (union (singleton (mkTuple 80 80)) (join (singleton (mkTuple 80 80)) (ASSIGN* 2) ))) (ASSIGN* 2))(union (join (join (union (singleton (mkTuple 9 9)) (join (ASSIGN* 2) (singleton (mkTuple 9 9)))) (singleton (mkTuple 9 25))) (union (singleton (mkTuple 25 25)) (join (singleton (mkTuple 25 25)) (ASSIGN* 2) ))) (ASSIGN* 2)))
(= (ASSIGN* 3) (ASSIGN* 2))))

(and   (= (add_copi1 2) 1)
(xor (= (ASSIGN* 3) 
(union (join (join (union (singleton (mkTuple 23 23)) (join (ASSIGN* 2) (singleton (mkTuple 23 23)))) (singleton (mkTuple 23 18))) (union (singleton (mkTuple 18 18)) (join (singleton (mkTuple 18 18)) (ASSIGN* 2) ))) (ASSIGN* 2))(union (join (join (union (singleton (mkTuple 11 11)) (join (ASSIGN* 2) (singleton (mkTuple 11 11)))) (singleton (mkTuple 11 39))) (union (singleton (mkTuple 39 39)) (join (singleton (mkTuple 39 39)) (ASSIGN* 2) ))) (ASSIGN* 2))(union (join (join (union (singleton (mkTuple 60 60)) (join (ASSIGN* 2) (singleton (mkTuple 60 60)))) (singleton (mkTuple 60 80))) (union (singleton (mkTuple 80 80)) (join (singleton (mkTuple 80 80)) (ASSIGN* 2) ))) (ASSIGN* 2))(union (join (join (union (singleton (mkTuple 9 9)) (join (ASSIGN* 2) (singleton (mkTuple 9 9)))) (singleton (mkTuple 9 25))) (union (singleton (mkTuple 25 25)) (join (singleton (mkTuple 25 25)) (ASSIGN* 2) ))) (ASSIGN* 2)))
(= (ASSIGN* 3) (ASSIGN* 2))))

(and   (= (delete_copi0 2) 1)
(xor (= (ASSIGN* 3) 
(setminus (ASSIGN* 2) (setminus (setminus (union (singleton (mkTuple 70 18)) (join (singleton (mkTuple 70 18)) (ASSIGN* 2))) (join (join (intersection (join (union  (singleton (mkTuple 70 70)) (join (ASSIGN* 2)  (singleton (mkTuple 70 70)))) (transpose (union  (singleton (mkTuple 70 70)) (join (ASSIGN* 2)  (singleton (mkTuple 70 70)))))) NODES) (setminus (ASSIGN 2) (singleton (mkTuple 70 18)))) (ASSIGN* 2))) (join (join (intersection (join (union  (singleton (mkTuple 70 70)) (join (ASSIGN* 2)  (singleton (mkTuple 70 70)))) (transpose (union  (singleton (mkTuple 70 70)) (join (ASSIGN* 2)  (singleton (mkTuple 70 70)))))) NODES) (setminus (ASSIGN 2) (singleton (mkTuple 70 18)))) (ASSIGN* 2))))(setminus (ASSIGN* 2) (setminus (join (singleton (mkTuple 70 18)) (ASSIGN* 2)) (join (join (singleton (mkTuple 70 70)) (setminus (setminus (ASSIGN 2) (singleton (mkTuple 70 18))) (singleton (mkTuple 70 70)))) (ASSIGN* 2))))(setminus (ASSIGN* 2) (setminus (setminus (union (singleton (mkTuple 11 39)) (join (singleton (mkTuple 11 39)) (ASSIGN* 2))) (join (join (intersection (join (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 2)  (singleton (mkTuple 11 11)))) (transpose (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 2)  (singleton (mkTuple 11 11)))))) NODES) (setminus (ASSIGN 2) (singleton (mkTuple 11 39)))) (ASSIGN* 2))) (join (join (intersection (join (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 2)  (singleton (mkTuple 11 11)))) (transpose (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 2)  (singleton (mkTuple 11 11)))))) NODES) (setminus (ASSIGN 2) (singleton (mkTuple 11 39)))) (ASSIGN* 2))))(setminus (ASSIGN* 2) (setminus (join (singleton (mkTuple 11 39)) (ASSIGN* 2)) (join (join (singleton (mkTuple 11 11)) (setminus (setminus (ASSIGN 2) (singleton (mkTuple 11 39))) (singleton (mkTuple 11 11)))) (ASSIGN* 2))))(setminus (ASSIGN* 2) (setminus (setminus (union (singleton (mkTuple 60 80)) (join (singleton (mkTuple 60 80)) (ASSIGN* 2))) (join (join (intersection (join (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 2)  (singleton (mkTuple 60 60)))) (transpose (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 2)  (singleton (mkTuple 60 60)))))) NODES) (setminus (ASSIGN 2) (singleton (mkTuple 60 80)))) (ASSIGN* 2))) (join (join (intersection (join (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 2)  (singleton (mkTuple 60 60)))) (transpose (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 2)  (singleton (mkTuple 60 60)))))) NODES) (setminus (ASSIGN 2) (singleton (mkTuple 60 80)))) (ASSIGN* 2))))(setminus (ASSIGN* 2) (setminus (join (singleton (mkTuple 60 80)) (ASSIGN* 2)) (join (join (singleton (mkTuple 60 60)) (setminus (setminus (ASSIGN 2) (singleton (mkTuple 60 80))) (singleton (mkTuple 60 60)))) (ASSIGN* 2))))(setminus (ASSIGN* 2) (setminus (setminus (union (singleton (mkTuple 9 25)) (join (singleton (mkTuple 9 25)) (ASSIGN* 2))) (join (join (intersection (join (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 2)  (singleton (mkTuple 9 9)))) (transpose (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 2)  (singleton (mkTuple 9 9)))))) NODES) (setminus (ASSIGN 2) (singleton (mkTuple 9 25)))) (ASSIGN* 2))) (join (join (intersection (join (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 2)  (singleton (mkTuple 9 9)))) (transpose (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 2)  (singleton (mkTuple 9 9)))))) NODES) (setminus (ASSIGN 2) (singleton (mkTuple 9 25)))) (ASSIGN* 2))))(setminus (ASSIGN* 2) (setminus (join (singleton (mkTuple 9 25)) (ASSIGN* 2)) (join (join (singleton (mkTuple 9 9)) (setminus (setminus (ASSIGN 2) (singleton (mkTuple 9 25))) (singleton (mkTuple 9 9)))) (ASSIGN* 2)))))
(= (ASSIGN* 3) (ASSIGN* 2))))

(and   (= (delete_copi1 2) 1)
(xor (= (ASSIGN* 3) 
(setminus (ASSIGN* 2) (setminus (setminus (union (singleton (mkTuple 23 18)) (join (singleton (mkTuple 23 18)) (ASSIGN* 2))) (join (join (intersection (join (union  (singleton (mkTuple 23 23)) (join (ASSIGN* 2)  (singleton (mkTuple 23 23)))) (transpose (union  (singleton (mkTuple 23 23)) (join (ASSIGN* 2)  (singleton (mkTuple 23 23)))))) NODES) (setminus (ASSIGN 2) (singleton (mkTuple 23 18)))) (ASSIGN* 2))) (join (join (intersection (join (union  (singleton (mkTuple 23 23)) (join (ASSIGN* 2)  (singleton (mkTuple 23 23)))) (transpose (union  (singleton (mkTuple 23 23)) (join (ASSIGN* 2)  (singleton (mkTuple 23 23)))))) NODES) (setminus (ASSIGN 2) (singleton (mkTuple 23 18)))) (ASSIGN* 2))))(setminus (ASSIGN* 2) (setminus (join (singleton (mkTuple 23 18)) (ASSIGN* 2)) (join (join (singleton (mkTuple 23 23)) (setminus (setminus (ASSIGN 2) (singleton (mkTuple 23 18))) (singleton (mkTuple 23 23)))) (ASSIGN* 2))))(setminus (ASSIGN* 2) (setminus (setminus (union (singleton (mkTuple 11 39)) (join (singleton (mkTuple 11 39)) (ASSIGN* 2))) (join (join (intersection (join (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 2)  (singleton (mkTuple 11 11)))) (transpose (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 2)  (singleton (mkTuple 11 11)))))) NODES) (setminus (ASSIGN 2) (singleton (mkTuple 11 39)))) (ASSIGN* 2))) (join (join (intersection (join (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 2)  (singleton (mkTuple 11 11)))) (transpose (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 2)  (singleton (mkTuple 11 11)))))) NODES) (setminus (ASSIGN 2) (singleton (mkTuple 11 39)))) (ASSIGN* 2))))(setminus (ASSIGN* 2) (setminus (join (singleton (mkTuple 11 39)) (ASSIGN* 2)) (join (join (singleton (mkTuple 11 11)) (setminus (setminus (ASSIGN 2) (singleton (mkTuple 11 39))) (singleton (mkTuple 11 11)))) (ASSIGN* 2))))(setminus (ASSIGN* 2) (setminus (setminus (union (singleton (mkTuple 60 80)) (join (singleton (mkTuple 60 80)) (ASSIGN* 2))) (join (join (intersection (join (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 2)  (singleton (mkTuple 60 60)))) (transpose (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 2)  (singleton (mkTuple 60 60)))))) NODES) (setminus (ASSIGN 2) (singleton (mkTuple 60 80)))) (ASSIGN* 2))) (join (join (intersection (join (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 2)  (singleton (mkTuple 60 60)))) (transpose (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 2)  (singleton (mkTuple 60 60)))))) NODES) (setminus (ASSIGN 2) (singleton (mkTuple 60 80)))) (ASSIGN* 2))))(setminus (ASSIGN* 2) (setminus (join (singleton (mkTuple 60 80)) (ASSIGN* 2)) (join (join (singleton (mkTuple 60 60)) (setminus (setminus (ASSIGN 2) (singleton (mkTuple 60 80))) (singleton (mkTuple 60 60)))) (ASSIGN* 2))))(setminus (ASSIGN* 2) (setminus (setminus (union (singleton (mkTuple 9 25)) (join (singleton (mkTuple 9 25)) (ASSIGN* 2))) (join (join (intersection (join (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 2)  (singleton (mkTuple 9 9)))) (transpose (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 2)  (singleton (mkTuple 9 9)))))) NODES) (setminus (ASSIGN 2) (singleton (mkTuple 9 25)))) (ASSIGN* 2))) (join (join (intersection (join (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 2)  (singleton (mkTuple 9 9)))) (transpose (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 2)  (singleton (mkTuple 9 9)))))) NODES) (setminus (ASSIGN 2) (singleton (mkTuple 9 25)))) (ASSIGN* 2))))(setminus (ASSIGN* 2) (setminus (join (singleton (mkTuple 9 25)) (ASSIGN* 2)) (join (join (singleton (mkTuple 9 9)) (setminus (setminus (ASSIGN 2) (singleton (mkTuple 9 25))) (singleton (mkTuple 9 9)))) (ASSIGN* 2)))))
(= (ASSIGN* 3) (ASSIGN* 2))))

(= (ASSIGN* 3) (ASSIGN* 2))))
(assert (or
(and   (= (create_proposal 2) 1)
(xor (= (ASSIGN 3) 
(union (ASSIGN 2) (singleton (mkTuple 77 81)))(union (ASSIGN 2) (singleton (mkTuple 11 39)))(union (ASSIGN 2) (singleton (mkTuple 60 80)))(union (ASSIGN 2) (singleton (mkTuple 9 25))))
(= (ASSIGN 3) (ASSIGN 2))))

(and   (= (add_copi0 2) 1)
(xor (= (ASSIGN 3) 
(union (ASSIGN 2) (singleton (mkTuple 70 18)))(union (ASSIGN 2) (singleton (mkTuple 11 39)))(union (ASSIGN 2) (singleton (mkTuple 60 80)))(union (ASSIGN 2) (singleton (mkTuple 9 25))))
(= (ASSIGN 3) (ASSIGN 2))))

(and   (= (add_copi1 2) 1)
(xor (= (ASSIGN 3) 
(union (ASSIGN 2) (singleton (mkTuple 23 18)))(union (ASSIGN 2) (singleton (mkTuple 11 39)))(union (ASSIGN 2) (singleton (mkTuple 60 80)))(union (ASSIGN 2) (singleton (mkTuple 9 25))))
(= (ASSIGN 3) (ASSIGN 2))))

(and   (= (delete_copi0 2) 1)
(xor (= (ASSIGN 3) 
(setminus (ASSIGN 2) (singleton (mkTuple 70 18)))(setminus (ASSIGN 2) (singleton (mkTuple 11 39)))(setminus (ASSIGN 2) (singleton (mkTuple 60 80)))(setminus (ASSIGN 2) (singleton (mkTuple 9 25))))
(= (ASSIGN 3) (ASSIGN 2))))

(and   (= (delete_copi1 2) 1)
(xor (= (ASSIGN 3) 
(setminus (ASSIGN 2) (singleton (mkTuple 23 18)))(setminus (ASSIGN 2) (singleton (mkTuple 11 39)))(setminus (ASSIGN 2) (singleton (mkTuple 60 80)))(setminus (ASSIGN 2) (singleton (mkTuple 9 25))))
(= (ASSIGN 3) (ASSIGN 2))))

(= (ASSIGN 3) (ASSIGN 2))))
(assert (or 
(and  (= (submit_proposal 2) 1)
(xor (= (ASSOC 3) 
(union (union (union (union (setminus (setminus (setminus (setminus (setminus  (ASSOC 2) (singleton(mkTuple 81 106 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 202 59))) (singleton(mkTuple 39 205 34))) (singleton(mkTuple 39 194 31))) (singleton(mkTuple 39 180 21))) (singleton(mkTuple 39 194 31))))
(= (ASSOC 3) (ASSOC 2))))

(and (= (ChairApproved0 3) 1) (= (ChairApproved1 3) 1) (= (ChairApproved2 3) 1)  (= (chair_approve0 2) 1)
(xor (= (ASSOC 3) 
(union (union (union (union (union (union (setminus (setminus  (ASSOC 2) (singleton(mkTuple 39 194 34))) (singleton(mkTuple 39 194 31))) (singleton(mkTuple 80 205 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 80 180 21))) (singleton(mkTuple 69 205 84))) (singleton(mkTuple 69 180 21))) (singleton(mkTuple 69 194 31))))
(= (ASSOC 3) (ASSOC 2))))

(and (= (ChairApproved0 3) 1) (= (ChairApproved1 3) 1) (= (ChairApproved2 3) 1)  (= (chair_approve1 2) 1)
(xor (= (ASSOC 3) 
(union (union (union (union (union (union (setminus (setminus  (ASSOC 2) (singleton(mkTuple 39 194 34))) (singleton(mkTuple 39 194 31))) (singleton(mkTuple 80 205 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 80 180 21))) (singleton(mkTuple 69 205 84))) (singleton(mkTuple 69 180 21))) (singleton(mkTuple 69 194 31))))
(= (ASSOC 3) (ASSOC 2))))

(and (= (ChairApproved0 3) 1) (= (ChairApproved1 3) 1) (= (ChairApproved2 3) 1)  (= (chair_approve2 2) 1)
(xor (= (ASSOC 3) 
(union (union (union (union (union (union (setminus (setminus  (ASSOC 2) (singleton(mkTuple 39 194 34))) (singleton(mkTuple 39 194 31))) (singleton(mkTuple 80 205 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 80 180 21))) (singleton(mkTuple 69 205 84))) (singleton(mkTuple 69 180 21))) (singleton(mkTuple 69 194 31))))
(= (ASSOC 3) (ASSOC 2))))

(and  (= (chair_disapprove 2) 1)
(xor (= (ASSOC 3) 
(union (union (union (union (union (setminus (setminus (setminus  (ASSOC 2) (singleton(mkTuple 39 203 34))) (singleton(mkTuple 39 203 31))) (singleton(mkTuple 39 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))))
(= (ASSOC 3) (ASSOC 2))))

(and (= (BMApproved0 3) 1) (= (BMApproved1 3) 1) (= (BMApproved2 3) 1)  (= (bm_approve0 2) 1)
(xor (= (ASSOC 3) 
(union (union (union (setminus (setminus  (ASSOC 2) (singleton(mkTuple 80 194 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 25 205 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 25 180 21))))
(= (ASSOC 3) (ASSOC 2))))

(and (= (BMApproved0 3) 1) (= (BMApproved1 3) 1) (= (BMApproved2 3) 1)  (= (bm_approve1 2) 1)
(xor (= (ASSOC 3) 
(union (union (union (setminus (setminus  (ASSOC 2) (singleton(mkTuple 80 194 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 25 205 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 25 180 21))))
(= (ASSOC 3) (ASSOC 2))))

(and (= (BMApproved0 3) 1) (= (BMApproved1 3) 1) (= (BMApproved2 3) 1)  (= (bm_approve2 2) 1)
(xor (= (ASSOC 3) 
(union (union (union (setminus (setminus  (ASSOC 2) (singleton(mkTuple 80 194 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 25 205 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 25 180 21))))
(= (ASSOC 3) (ASSOC 2))))

(and  (= (bm_disapprove 2) 1)
(xor (= (ASSOC 3) 
(setminus (union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 2) (singleton(mkTuple 69 203 84))) (singleton(mkTuple 69 203 31))) (singleton(mkTuple 69 203 21))) (singleton(mkTuple 80 203 24))) (singleton(mkTuple 80 203 31))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))) (singleton(mkTuple 39 203 21))))
(= (ASSOC 3) (ASSOC 2))))

(and (= (DeanApproved0 3) 1) (= (DeanApproved1 3) 1) (= (DeanApproved2 3) 1)  (= (dean_approve0 2) 1)
(xor (= (ASSOC 3) 
(union (union (union (union (union (union (union (union (setminus (setminus  (ASSOC 2) (singleton(mkTuple 25 194 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 180 21))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 180 21))))
(= (ASSOC 3) (ASSOC 2))))

(and (= (DeanApproved0 3) 1) (= (DeanApproved1 3) 1) (= (DeanApproved2 3) 1)  (= (dean_approve1 2) 1)
(xor (= (ASSOC 3) 
(union (union (union (union (union (union (union (union (setminus (setminus  (ASSOC 2) (singleton(mkTuple 25 194 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 180 21))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 180 21))))
(= (ASSOC 3) (ASSOC 2))))

(and (= (DeanApproved0 3) 1) (= (DeanApproved1 3) 1) (= (DeanApproved2 3) 1)  (= (dean_approve2 2) 1)
(xor (= (ASSOC 3) 
(union (union (union (union (union (union (union (union (setminus (setminus  (ASSOC 2) (singleton(mkTuple 25 194 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 180 21))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 180 21))))
(= (ASSOC 3) (ASSOC 2))))

(and  (= (dean_disapprove 2) 1)
(xor (= (ASSOC 3) 
(setminus (union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 2) (singleton(mkTuple 69 203 84))) (singleton(mkTuple 69 203 31))) (singleton(mkTuple 69 203 21))) (singleton(mkTuple 80 203 24))) (singleton(mkTuple 80 203 31))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 25 203 50))) (singleton(mkTuple 25 203 31))) (singleton(mkTuple 25 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))) (singleton(mkTuple 39 203 21))))
(= (ASSOC 3) (ASSOC 2))))

(and  (= (irb_approve 2) 1)
(xor (= (ASSOC 3) 
(union (union (union (setminus (setminus  (ASSOC 2) (singleton(mkTuple 69 194 84))) (singleton(mkTuple 69 194 31))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))))
(= (ASSOC 3) (ASSOC 2))))

(and  (= (irb_disapprove 2) 1)
(xor (= (ASSOC 3) 
(setminus (union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 2) (singleton(mkTuple 69 203 84))) (singleton(mkTuple 69 203 31))) (singleton(mkTuple 69 203 21))) (singleton(mkTuple 80 203 24))) (singleton(mkTuple 80 203 31))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 25 203 50))) (singleton(mkTuple 25 203 31))) (singleton(mkTuple 25 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))) (singleton(mkTuple 39 203 21))))
(= (ASSOC 3) (ASSOC 2))))

(and  (= (ra_approve 2) 1)
(xor (= (ASSOC 3) 
(union (union (union (union (setminus (setminus (setminus  (ASSOC 2) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 194 73))) (singleton(mkTuple 1 194 3))) (singleton(mkTuple 46 194 31))) (singleton(mkTuple 46 205 19))) (singleton(mkTuple 46 180 21))) (singleton(mkTuple 46 205 3))))
(= (ASSOC 3) (ASSOC 2))))

(and  (= (ra_disapprove 2) 1)
(xor (= (ASSOC 3) 
(union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 2) (singleton(mkTuple 1 203 31))) (singleton(mkTuple 1 203 73))) (singleton(mkTuple 1 203 21))) (singleton(mkTuple 1 203 3))) (singleton(mkTuple 39 203 21))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 25 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))))
(= (ASSOC 3) (ASSOC 2))))

(and  (= (rd_approve 2) 1)
(xor (= (ASSOC 3) 
(union (union (setminus (setminus (setminus  (ASSOC 2) (singleton(mkTuple 46 194 19))) (singleton(mkTuple 46 194 31))) (singleton(mkTuple 46 194 3))) (singleton(mkTuple 1 196 31))) (singleton(mkTuple 1 205 73))))
(= (ASSOC 3) (ASSOC 2))))

(and  (= (rd_disapprove 2) 1)
(xor (= (ASSOC 3) 
(union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 2) (singleton(mkTuple 46 203 21))) (singleton(mkTuple 46 203 31))) (singleton(mkTuple 46 203 3))) (singleton(mkTuple 46 203 19))) (singleton(mkTuple 1 203 21))) (singleton(mkTuple 39 203 21))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 25 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))))
(= (ASSOC 3) (ASSOC 2))))

(and  (= (ra_submit 2) 1)
(xor (= (ASSOC 3) 
(union (union (setminus (setminus (setminus  (ASSOC 2) (singleton(mkTuple 1 206 31))) (singleton(mkTuple 1 206 73))) (singleton(mkTuple 1 206 3))) (singleton(mkTuple 46 204 31))) (singleton(mkTuple 46 205 19))))
(= (ASSOC 3) (ASSOC 2))))

(= (ASSOC 3) (ASSOC 2))))
(assert (and (= (dean_approve1 3) 1) (= (DeanApproved1 3) 1) ))
(assert (and (= (dean_approve0 3) 1) (= (DeanApproved0 3) 1) ))
(assert (and (= (dean_approve2 3) 1) (= (DeanApproved2 3) 1) ))
(assert (and (= (bm_approve1 3) 1) (= (BMApproved1 3) 1) ))
(assert (and (= (chair_approve2 3) 1) (= (ChairApproved2 3) 1) ))
(assert (and (= (chair_approve1 3) 1) (= (ChairApproved1 3) 1) ))
(assert (and (= (bm_approve2 3) 1) (= (BMApproved2 3) 1) ))
(assert (and (= (chair_approve0 3) 1) (= (ChairApproved0 3) 1) ))
(assert (and (= (bm_approve0 3) 1) (= (BMApproved0 3) 1) ))


(assert (= (ASSIGN*UUA 3) (join SetToCheckUA (ASSIGN* 3))))
(assert (= (ASSIGN*AT 3) (join SetToCheckAT (ASSIGN* 3))))
(assert (= (ASSOC*UA 3) (join (ASSIGN*UUA 3) (ASSOC 3))))
(assert (= (ASSOC* 3) (join (ASSOC*UA 3) (transpose (ASSIGN*AT 3)))))


;--------------------------------------------------------------------------------------------------------------------
;STEP4
(assert 
(xor 
(= (create_proposal 3) 0) 
(and (member (mkTuple 81 95 31) (ASSOC* 3))  (member (mkTuple 77 17) (ASSIGN* 3)) (= (create_proposal 3) 1))
)
)				

(assert 
(xor 
(= (add_copi0 3) 0) 
(and (member (mkTuple 81 199 18) (ASSOC* 3))  (member (mkTuple 70 6) (ASSIGN* 3)) (= (add_copi0 3) 1))
)
)				

(assert 
(xor 
(= (add_copi1 3) 0) 
(and (member (mkTuple 81 199 18) (ASSOC* 3))  (member (mkTuple 23 6) (ASSIGN* 3)) (= (add_copi1 3) 1))
)
)				

(assert 
(xor 
(= (submit_proposal 3) 0) 
(and (member (mkTuple 81 106 31) (ASSOC* 3))   (= (submit_proposal 3) 1))
)
)				
(assert 
(xor 
(= (chair_approve0 3) 0) 
(and (member (mkTuple 39 194 34) (ASSOC* 3))   (= (chair_approve0 3) 1))
)
)				
(assert 
(xor 
(= (chair_approve1 3) 0) 
(and (member (mkTuple 39 194 34) (ASSOC* 3))   (= (chair_approve1 3) 1))
)
)				
(assert 
(xor 
(= (chair_approve2 3) 0) 
(and (member (mkTuple 39 194 34) (ASSOC* 3))   (= (chair_approve2 3) 1))
)
)				
(assert 
(xor 
(= (chair_disapprove 3) 0) 
(and (member (mkTuple 39 203 34) (ASSOC* 3))   (= (chair_disapprove 3) 1))
)
)				
(assert 
(xor 
(= (bm_approve0 3) 0) 
(and (member (mkTuple 80 194 24) (ASSOC* 3))   (= (bm_approve0 3) 1))
)
)				
(assert 
(xor 
(= (bm_approve1 3) 0) 
(and (member (mkTuple 80 194 24) (ASSOC* 3))   (= (bm_approve1 3) 1))
)
)				
(assert 
(xor 
(= (bm_approve2 3) 0) 
(and (member (mkTuple 80 194 24) (ASSOC* 3))   (= (bm_approve2 3) 1))
)
)				
(assert 
(xor 
(= (bm_disapprove 3) 0) 
(and (member (mkTuple 80 203 24) (ASSOC* 3))   (= (bm_disapprove 3) 1))
)
)				
(assert 
(xor 
(= (dean_approve0 3) 0) 
(and (member (mkTuple 25 194 50) (ASSOC* 3))   (= (dean_approve0 3) 1))
)
)				
(assert 
(xor 
(= (dean_approve1 3) 0) 
(and (member (mkTuple 25 194 50) (ASSOC* 3))   (= (dean_approve1 3) 1))
)
)				
(assert 
(xor 
(= (dean_approve2 3) 0) 
(and (member (mkTuple 25 194 50) (ASSOC* 3))   (= (dean_approve2 3) 1))
)
)				
(assert 
(xor 
(= (dean_disapprove 3) 0) 
(and (member (mkTuple 25 203 50) (ASSOC* 3))   (= (dean_disapprove 3) 1))
)
)				
(assert 
(xor 
(= (irb_approve 3) 0) 
(and (member (mkTuple 69 194 84) (ASSOC* 3))   (= (irb_approve 3) 1))
)
)				
(assert 
(xor 
(= (irb_disapprove 3) 0) 
(and (member (mkTuple 69 203 84) (ASSOC* 3))   (= (irb_disapprove 3) 1))
)
)				
(assert 
(xor 
(= (ra_approve 3) 0) 
(and (member (mkTuple 1 194 73) (ASSOC* 3))   (= (ra_approve 3) 1))
)
)				
(assert 
(xor 
(= (ra_disapprove 3) 0) 
(and (member (mkTuple 1 203 73) (ASSOC* 3))   (= (ra_disapprove 3) 1))
)
)				
(assert 
(xor 
(= (rd_approve 3) 0) 
(and (member (mkTuple 46 194 19) (ASSOC* 3))   (= (rd_approve 3) 1))
)
)				
(assert 
(xor 
(= (rd_disapprove 3) 0) 
(and (member (mkTuple 46 203 19) (ASSOC* 3))   (= (rd_disapprove 3) 1))
)
)				
(assert 
(xor 
(= (ra_submit 3) 0) 
(and (member (mkTuple 1 206 31) (ASSOC* 3))   (= (ra_submit 3) 1))
)
)				

(assert (or 
(and   (= (create_proposal 3) 1)
(xor (= (ASSIGN* 4) 
(union (join (join (union (singleton (mkTuple 77 77)) (join (ASSIGN* 3) (singleton (mkTuple 77 77)))) (singleton (mkTuple 77 81))) (union (singleton (mkTuple 81 81)) (join (singleton (mkTuple 81 81)) (ASSIGN* 3) ))) (ASSIGN* 3))(union (join (join (union (singleton (mkTuple 11 11)) (join (ASSIGN* 3) (singleton (mkTuple 11 11)))) (singleton (mkTuple 11 39))) (union (singleton (mkTuple 39 39)) (join (singleton (mkTuple 39 39)) (ASSIGN* 3) ))) (ASSIGN* 3))(union (join (join (union (singleton (mkTuple 60 60)) (join (ASSIGN* 3) (singleton (mkTuple 60 60)))) (singleton (mkTuple 60 80))) (union (singleton (mkTuple 80 80)) (join (singleton (mkTuple 80 80)) (ASSIGN* 3) ))) (ASSIGN* 3))(union (join (join (union (singleton (mkTuple 9 9)) (join (ASSIGN* 3) (singleton (mkTuple 9 9)))) (singleton (mkTuple 9 25))) (union (singleton (mkTuple 25 25)) (join (singleton (mkTuple 25 25)) (ASSIGN* 3) ))) (ASSIGN* 3)))
(= (ASSIGN* 4) (ASSIGN* 3))))

(and   (= (add_copi0 3) 1)
(xor (= (ASSIGN* 4) 
(union (join (join (union (singleton (mkTuple 70 70)) (join (ASSIGN* 3) (singleton (mkTuple 70 70)))) (singleton (mkTuple 70 18))) (union (singleton (mkTuple 18 18)) (join (singleton (mkTuple 18 18)) (ASSIGN* 3) ))) (ASSIGN* 3))(union (join (join (union (singleton (mkTuple 11 11)) (join (ASSIGN* 3) (singleton (mkTuple 11 11)))) (singleton (mkTuple 11 39))) (union (singleton (mkTuple 39 39)) (join (singleton (mkTuple 39 39)) (ASSIGN* 3) ))) (ASSIGN* 3))(union (join (join (union (singleton (mkTuple 60 60)) (join (ASSIGN* 3) (singleton (mkTuple 60 60)))) (singleton (mkTuple 60 80))) (union (singleton (mkTuple 80 80)) (join (singleton (mkTuple 80 80)) (ASSIGN* 3) ))) (ASSIGN* 3))(union (join (join (union (singleton (mkTuple 9 9)) (join (ASSIGN* 3) (singleton (mkTuple 9 9)))) (singleton (mkTuple 9 25))) (union (singleton (mkTuple 25 25)) (join (singleton (mkTuple 25 25)) (ASSIGN* 3) ))) (ASSIGN* 3)))
(= (ASSIGN* 4) (ASSIGN* 3))))

(and   (= (add_copi1 3) 1)
(xor (= (ASSIGN* 4) 
(union (join (join (union (singleton (mkTuple 23 23)) (join (ASSIGN* 3) (singleton (mkTuple 23 23)))) (singleton (mkTuple 23 18))) (union (singleton (mkTuple 18 18)) (join (singleton (mkTuple 18 18)) (ASSIGN* 3) ))) (ASSIGN* 3))(union (join (join (union (singleton (mkTuple 11 11)) (join (ASSIGN* 3) (singleton (mkTuple 11 11)))) (singleton (mkTuple 11 39))) (union (singleton (mkTuple 39 39)) (join (singleton (mkTuple 39 39)) (ASSIGN* 3) ))) (ASSIGN* 3))(union (join (join (union (singleton (mkTuple 60 60)) (join (ASSIGN* 3) (singleton (mkTuple 60 60)))) (singleton (mkTuple 60 80))) (union (singleton (mkTuple 80 80)) (join (singleton (mkTuple 80 80)) (ASSIGN* 3) ))) (ASSIGN* 3))(union (join (join (union (singleton (mkTuple 9 9)) (join (ASSIGN* 3) (singleton (mkTuple 9 9)))) (singleton (mkTuple 9 25))) (union (singleton (mkTuple 25 25)) (join (singleton (mkTuple 25 25)) (ASSIGN* 3) ))) (ASSIGN* 3)))
(= (ASSIGN* 4) (ASSIGN* 3))))

(and   (= (delete_copi0 3) 1)
(xor (= (ASSIGN* 4) 
(setminus (ASSIGN* 3) (setminus (setminus (union (singleton (mkTuple 70 18)) (join (singleton (mkTuple 70 18)) (ASSIGN* 3))) (join (join (intersection (join (union  (singleton (mkTuple 70 70)) (join (ASSIGN* 3)  (singleton (mkTuple 70 70)))) (transpose (union  (singleton (mkTuple 70 70)) (join (ASSIGN* 3)  (singleton (mkTuple 70 70)))))) NODES) (setminus (ASSIGN 3) (singleton (mkTuple 70 18)))) (ASSIGN* 3))) (join (join (intersection (join (union  (singleton (mkTuple 70 70)) (join (ASSIGN* 3)  (singleton (mkTuple 70 70)))) (transpose (union  (singleton (mkTuple 70 70)) (join (ASSIGN* 3)  (singleton (mkTuple 70 70)))))) NODES) (setminus (ASSIGN 3) (singleton (mkTuple 70 18)))) (ASSIGN* 3))))(setminus (ASSIGN* 3) (setminus (join (singleton (mkTuple 70 18)) (ASSIGN* 3)) (join (join (singleton (mkTuple 70 70)) (setminus (setminus (ASSIGN 3) (singleton (mkTuple 70 18))) (singleton (mkTuple 70 70)))) (ASSIGN* 3))))(setminus (ASSIGN* 3) (setminus (setminus (union (singleton (mkTuple 11 39)) (join (singleton (mkTuple 11 39)) (ASSIGN* 3))) (join (join (intersection (join (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 3)  (singleton (mkTuple 11 11)))) (transpose (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 3)  (singleton (mkTuple 11 11)))))) NODES) (setminus (ASSIGN 3) (singleton (mkTuple 11 39)))) (ASSIGN* 3))) (join (join (intersection (join (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 3)  (singleton (mkTuple 11 11)))) (transpose (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 3)  (singleton (mkTuple 11 11)))))) NODES) (setminus (ASSIGN 3) (singleton (mkTuple 11 39)))) (ASSIGN* 3))))(setminus (ASSIGN* 3) (setminus (join (singleton (mkTuple 11 39)) (ASSIGN* 3)) (join (join (singleton (mkTuple 11 11)) (setminus (setminus (ASSIGN 3) (singleton (mkTuple 11 39))) (singleton (mkTuple 11 11)))) (ASSIGN* 3))))(setminus (ASSIGN* 3) (setminus (setminus (union (singleton (mkTuple 60 80)) (join (singleton (mkTuple 60 80)) (ASSIGN* 3))) (join (join (intersection (join (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 3)  (singleton (mkTuple 60 60)))) (transpose (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 3)  (singleton (mkTuple 60 60)))))) NODES) (setminus (ASSIGN 3) (singleton (mkTuple 60 80)))) (ASSIGN* 3))) (join (join (intersection (join (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 3)  (singleton (mkTuple 60 60)))) (transpose (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 3)  (singleton (mkTuple 60 60)))))) NODES) (setminus (ASSIGN 3) (singleton (mkTuple 60 80)))) (ASSIGN* 3))))(setminus (ASSIGN* 3) (setminus (join (singleton (mkTuple 60 80)) (ASSIGN* 3)) (join (join (singleton (mkTuple 60 60)) (setminus (setminus (ASSIGN 3) (singleton (mkTuple 60 80))) (singleton (mkTuple 60 60)))) (ASSIGN* 3))))(setminus (ASSIGN* 3) (setminus (setminus (union (singleton (mkTuple 9 25)) (join (singleton (mkTuple 9 25)) (ASSIGN* 3))) (join (join (intersection (join (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 3)  (singleton (mkTuple 9 9)))) (transpose (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 3)  (singleton (mkTuple 9 9)))))) NODES) (setminus (ASSIGN 3) (singleton (mkTuple 9 25)))) (ASSIGN* 3))) (join (join (intersection (join (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 3)  (singleton (mkTuple 9 9)))) (transpose (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 3)  (singleton (mkTuple 9 9)))))) NODES) (setminus (ASSIGN 3) (singleton (mkTuple 9 25)))) (ASSIGN* 3))))(setminus (ASSIGN* 3) (setminus (join (singleton (mkTuple 9 25)) (ASSIGN* 3)) (join (join (singleton (mkTuple 9 9)) (setminus (setminus (ASSIGN 3) (singleton (mkTuple 9 25))) (singleton (mkTuple 9 9)))) (ASSIGN* 3)))))
(= (ASSIGN* 4) (ASSIGN* 3))))

(and   (= (delete_copi1 3) 1)
(xor (= (ASSIGN* 4) 
(setminus (ASSIGN* 3) (setminus (setminus (union (singleton (mkTuple 23 18)) (join (singleton (mkTuple 23 18)) (ASSIGN* 3))) (join (join (intersection (join (union  (singleton (mkTuple 23 23)) (join (ASSIGN* 3)  (singleton (mkTuple 23 23)))) (transpose (union  (singleton (mkTuple 23 23)) (join (ASSIGN* 3)  (singleton (mkTuple 23 23)))))) NODES) (setminus (ASSIGN 3) (singleton (mkTuple 23 18)))) (ASSIGN* 3))) (join (join (intersection (join (union  (singleton (mkTuple 23 23)) (join (ASSIGN* 3)  (singleton (mkTuple 23 23)))) (transpose (union  (singleton (mkTuple 23 23)) (join (ASSIGN* 3)  (singleton (mkTuple 23 23)))))) NODES) (setminus (ASSIGN 3) (singleton (mkTuple 23 18)))) (ASSIGN* 3))))(setminus (ASSIGN* 3) (setminus (join (singleton (mkTuple 23 18)) (ASSIGN* 3)) (join (join (singleton (mkTuple 23 23)) (setminus (setminus (ASSIGN 3) (singleton (mkTuple 23 18))) (singleton (mkTuple 23 23)))) (ASSIGN* 3))))(setminus (ASSIGN* 3) (setminus (setminus (union (singleton (mkTuple 11 39)) (join (singleton (mkTuple 11 39)) (ASSIGN* 3))) (join (join (intersection (join (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 3)  (singleton (mkTuple 11 11)))) (transpose (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 3)  (singleton (mkTuple 11 11)))))) NODES) (setminus (ASSIGN 3) (singleton (mkTuple 11 39)))) (ASSIGN* 3))) (join (join (intersection (join (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 3)  (singleton (mkTuple 11 11)))) (transpose (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 3)  (singleton (mkTuple 11 11)))))) NODES) (setminus (ASSIGN 3) (singleton (mkTuple 11 39)))) (ASSIGN* 3))))(setminus (ASSIGN* 3) (setminus (join (singleton (mkTuple 11 39)) (ASSIGN* 3)) (join (join (singleton (mkTuple 11 11)) (setminus (setminus (ASSIGN 3) (singleton (mkTuple 11 39))) (singleton (mkTuple 11 11)))) (ASSIGN* 3))))(setminus (ASSIGN* 3) (setminus (setminus (union (singleton (mkTuple 60 80)) (join (singleton (mkTuple 60 80)) (ASSIGN* 3))) (join (join (intersection (join (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 3)  (singleton (mkTuple 60 60)))) (transpose (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 3)  (singleton (mkTuple 60 60)))))) NODES) (setminus (ASSIGN 3) (singleton (mkTuple 60 80)))) (ASSIGN* 3))) (join (join (intersection (join (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 3)  (singleton (mkTuple 60 60)))) (transpose (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 3)  (singleton (mkTuple 60 60)))))) NODES) (setminus (ASSIGN 3) (singleton (mkTuple 60 80)))) (ASSIGN* 3))))(setminus (ASSIGN* 3) (setminus (join (singleton (mkTuple 60 80)) (ASSIGN* 3)) (join (join (singleton (mkTuple 60 60)) (setminus (setminus (ASSIGN 3) (singleton (mkTuple 60 80))) (singleton (mkTuple 60 60)))) (ASSIGN* 3))))(setminus (ASSIGN* 3) (setminus (setminus (union (singleton (mkTuple 9 25)) (join (singleton (mkTuple 9 25)) (ASSIGN* 3))) (join (join (intersection (join (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 3)  (singleton (mkTuple 9 9)))) (transpose (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 3)  (singleton (mkTuple 9 9)))))) NODES) (setminus (ASSIGN 3) (singleton (mkTuple 9 25)))) (ASSIGN* 3))) (join (join (intersection (join (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 3)  (singleton (mkTuple 9 9)))) (transpose (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 3)  (singleton (mkTuple 9 9)))))) NODES) (setminus (ASSIGN 3) (singleton (mkTuple 9 25)))) (ASSIGN* 3))))(setminus (ASSIGN* 3) (setminus (join (singleton (mkTuple 9 25)) (ASSIGN* 3)) (join (join (singleton (mkTuple 9 9)) (setminus (setminus (ASSIGN 3) (singleton (mkTuple 9 25))) (singleton (mkTuple 9 9)))) (ASSIGN* 3)))))
(= (ASSIGN* 4) (ASSIGN* 3))))

(= (ASSIGN* 4) (ASSIGN* 3))))
(assert (or
(and   (= (create_proposal 3) 1)
(xor (= (ASSIGN 4) 
(union (ASSIGN 3) (singleton (mkTuple 77 81)))(union (ASSIGN 3) (singleton (mkTuple 11 39)))(union (ASSIGN 3) (singleton (mkTuple 60 80)))(union (ASSIGN 3) (singleton (mkTuple 9 25))))
(= (ASSIGN 4) (ASSIGN 3))))

(and   (= (add_copi0 3) 1)
(xor (= (ASSIGN 4) 
(union (ASSIGN 3) (singleton (mkTuple 70 18)))(union (ASSIGN 3) (singleton (mkTuple 11 39)))(union (ASSIGN 3) (singleton (mkTuple 60 80)))(union (ASSIGN 3) (singleton (mkTuple 9 25))))
(= (ASSIGN 4) (ASSIGN 3))))

(and   (= (add_copi1 3) 1)
(xor (= (ASSIGN 4) 
(union (ASSIGN 3) (singleton (mkTuple 23 18)))(union (ASSIGN 3) (singleton (mkTuple 11 39)))(union (ASSIGN 3) (singleton (mkTuple 60 80)))(union (ASSIGN 3) (singleton (mkTuple 9 25))))
(= (ASSIGN 4) (ASSIGN 3))))

(and   (= (delete_copi0 3) 1)
(xor (= (ASSIGN 4) 
(setminus (ASSIGN 3) (singleton (mkTuple 70 18)))(setminus (ASSIGN 3) (singleton (mkTuple 11 39)))(setminus (ASSIGN 3) (singleton (mkTuple 60 80)))(setminus (ASSIGN 3) (singleton (mkTuple 9 25))))
(= (ASSIGN 4) (ASSIGN 3))))

(and   (= (delete_copi1 3) 1)
(xor (= (ASSIGN 4) 
(setminus (ASSIGN 3) (singleton (mkTuple 23 18)))(setminus (ASSIGN 3) (singleton (mkTuple 11 39)))(setminus (ASSIGN 3) (singleton (mkTuple 60 80)))(setminus (ASSIGN 3) (singleton (mkTuple 9 25))))
(= (ASSIGN 4) (ASSIGN 3))))

(= (ASSIGN 4) (ASSIGN 3))))
(assert (or 
(and  (= (submit_proposal 3) 1)
(xor (= (ASSOC 4) 
(union (union (union (union (setminus (setminus (setminus (setminus (setminus  (ASSOC 3) (singleton(mkTuple 81 106 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 202 59))) (singleton(mkTuple 39 205 34))) (singleton(mkTuple 39 194 31))) (singleton(mkTuple 39 180 21))) (singleton(mkTuple 39 194 31))))
(= (ASSOC 4) (ASSOC 3))))

(and (= (ChairApproved0 4) 1) (= (ChairApproved1 4) 1) (= (ChairApproved2 4) 1)  (= (chair_approve0 3) 1)
(xor (= (ASSOC 4) 
(union (union (union (union (union (union (setminus (setminus  (ASSOC 3) (singleton(mkTuple 39 194 34))) (singleton(mkTuple 39 194 31))) (singleton(mkTuple 80 205 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 80 180 21))) (singleton(mkTuple 69 205 84))) (singleton(mkTuple 69 180 21))) (singleton(mkTuple 69 194 31))))
(= (ASSOC 4) (ASSOC 3))))

(and (= (ChairApproved0 4) 1) (= (ChairApproved1 4) 1) (= (ChairApproved2 4) 1)  (= (chair_approve1 3) 1)
(xor (= (ASSOC 4) 
(union (union (union (union (union (union (setminus (setminus  (ASSOC 3) (singleton(mkTuple 39 194 34))) (singleton(mkTuple 39 194 31))) (singleton(mkTuple 80 205 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 80 180 21))) (singleton(mkTuple 69 205 84))) (singleton(mkTuple 69 180 21))) (singleton(mkTuple 69 194 31))))
(= (ASSOC 4) (ASSOC 3))))

(and (= (ChairApproved0 4) 1) (= (ChairApproved1 4) 1) (= (ChairApproved2 4) 1)  (= (chair_approve2 3) 1)
(xor (= (ASSOC 4) 
(union (union (union (union (union (union (setminus (setminus  (ASSOC 3) (singleton(mkTuple 39 194 34))) (singleton(mkTuple 39 194 31))) (singleton(mkTuple 80 205 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 80 180 21))) (singleton(mkTuple 69 205 84))) (singleton(mkTuple 69 180 21))) (singleton(mkTuple 69 194 31))))
(= (ASSOC 4) (ASSOC 3))))

(and  (= (chair_disapprove 3) 1)
(xor (= (ASSOC 4) 
(union (union (union (union (union (setminus (setminus (setminus  (ASSOC 3) (singleton(mkTuple 39 203 34))) (singleton(mkTuple 39 203 31))) (singleton(mkTuple 39 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))))
(= (ASSOC 4) (ASSOC 3))))

(and (= (BMApproved0 4) 1) (= (BMApproved1 4) 1) (= (BMApproved2 4) 1)  (= (bm_approve0 3) 1)
(xor (= (ASSOC 4) 
(union (union (union (setminus (setminus  (ASSOC 3) (singleton(mkTuple 80 194 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 25 205 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 25 180 21))))
(= (ASSOC 4) (ASSOC 3))))

(and (= (BMApproved0 4) 1) (= (BMApproved1 4) 1) (= (BMApproved2 4) 1)  (= (bm_approve1 3) 1)
(xor (= (ASSOC 4) 
(union (union (union (setminus (setminus  (ASSOC 3) (singleton(mkTuple 80 194 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 25 205 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 25 180 21))))
(= (ASSOC 4) (ASSOC 3))))

(and (= (BMApproved0 4) 1) (= (BMApproved1 4) 1) (= (BMApproved2 4) 1)  (= (bm_approve2 3) 1)
(xor (= (ASSOC 4) 
(union (union (union (setminus (setminus  (ASSOC 3) (singleton(mkTuple 80 194 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 25 205 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 25 180 21))))
(= (ASSOC 4) (ASSOC 3))))

(and  (= (bm_disapprove 3) 1)
(xor (= (ASSOC 4) 
(setminus (union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 3) (singleton(mkTuple 69 203 84))) (singleton(mkTuple 69 203 31))) (singleton(mkTuple 69 203 21))) (singleton(mkTuple 80 203 24))) (singleton(mkTuple 80 203 31))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))) (singleton(mkTuple 39 203 21))))
(= (ASSOC 4) (ASSOC 3))))

(and (= (DeanApproved0 4) 1) (= (DeanApproved1 4) 1) (= (DeanApproved2 4) 1)  (= (dean_approve0 3) 1)
(xor (= (ASSOC 4) 
(union (union (union (union (union (union (union (union (setminus (setminus  (ASSOC 3) (singleton(mkTuple 25 194 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 180 21))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 180 21))))
(= (ASSOC 4) (ASSOC 3))))

(and (= (DeanApproved0 4) 1) (= (DeanApproved1 4) 1) (= (DeanApproved2 4) 1)  (= (dean_approve1 3) 1)
(xor (= (ASSOC 4) 
(union (union (union (union (union (union (union (union (setminus (setminus  (ASSOC 3) (singleton(mkTuple 25 194 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 180 21))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 180 21))))
(= (ASSOC 4) (ASSOC 3))))

(and (= (DeanApproved0 4) 1) (= (DeanApproved1 4) 1) (= (DeanApproved2 4) 1)  (= (dean_approve2 3) 1)
(xor (= (ASSOC 4) 
(union (union (union (union (union (union (union (union (setminus (setminus  (ASSOC 3) (singleton(mkTuple 25 194 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 180 21))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 180 21))))
(= (ASSOC 4) (ASSOC 3))))

(and  (= (dean_disapprove 3) 1)
(xor (= (ASSOC 4) 
(setminus (union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 3) (singleton(mkTuple 69 203 84))) (singleton(mkTuple 69 203 31))) (singleton(mkTuple 69 203 21))) (singleton(mkTuple 80 203 24))) (singleton(mkTuple 80 203 31))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 25 203 50))) (singleton(mkTuple 25 203 31))) (singleton(mkTuple 25 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))) (singleton(mkTuple 39 203 21))))
(= (ASSOC 4) (ASSOC 3))))

(and  (= (irb_approve 3) 1)
(xor (= (ASSOC 4) 
(union (union (union (setminus (setminus  (ASSOC 3) (singleton(mkTuple 69 194 84))) (singleton(mkTuple 69 194 31))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))))
(= (ASSOC 4) (ASSOC 3))))

(and  (= (irb_disapprove 3) 1)
(xor (= (ASSOC 4) 
(setminus (union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 3) (singleton(mkTuple 69 203 84))) (singleton(mkTuple 69 203 31))) (singleton(mkTuple 69 203 21))) (singleton(mkTuple 80 203 24))) (singleton(mkTuple 80 203 31))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 25 203 50))) (singleton(mkTuple 25 203 31))) (singleton(mkTuple 25 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))) (singleton(mkTuple 39 203 21))))
(= (ASSOC 4) (ASSOC 3))))

(and  (= (ra_approve 3) 1)
(xor (= (ASSOC 4) 
(union (union (union (union (setminus (setminus (setminus  (ASSOC 3) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 194 73))) (singleton(mkTuple 1 194 3))) (singleton(mkTuple 46 194 31))) (singleton(mkTuple 46 205 19))) (singleton(mkTuple 46 180 21))) (singleton(mkTuple 46 205 3))))
(= (ASSOC 4) (ASSOC 3))))

(and  (= (ra_disapprove 3) 1)
(xor (= (ASSOC 4) 
(union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 3) (singleton(mkTuple 1 203 31))) (singleton(mkTuple 1 203 73))) (singleton(mkTuple 1 203 21))) (singleton(mkTuple 1 203 3))) (singleton(mkTuple 39 203 21))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 25 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))))
(= (ASSOC 4) (ASSOC 3))))

(and  (= (rd_approve 3) 1)
(xor (= (ASSOC 4) 
(union (union (setminus (setminus (setminus  (ASSOC 3) (singleton(mkTuple 46 194 19))) (singleton(mkTuple 46 194 31))) (singleton(mkTuple 46 194 3))) (singleton(mkTuple 1 196 31))) (singleton(mkTuple 1 205 73))))
(= (ASSOC 4) (ASSOC 3))))

(and  (= (rd_disapprove 3) 1)
(xor (= (ASSOC 4) 
(union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 3) (singleton(mkTuple 46 203 21))) (singleton(mkTuple 46 203 31))) (singleton(mkTuple 46 203 3))) (singleton(mkTuple 46 203 19))) (singleton(mkTuple 1 203 21))) (singleton(mkTuple 39 203 21))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 25 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))))
(= (ASSOC 4) (ASSOC 3))))

(and  (= (ra_submit 3) 1)
(xor (= (ASSOC 4) 
(union (union (setminus (setminus (setminus  (ASSOC 3) (singleton(mkTuple 1 206 31))) (singleton(mkTuple 1 206 73))) (singleton(mkTuple 1 206 3))) (singleton(mkTuple 46 204 31))) (singleton(mkTuple 46 205 19))))
(= (ASSOC 4) (ASSOC 3))))

(= (ASSOC 4) (ASSOC 3))))
(assert (and (= (dean_approve1 4) 1) (= (DeanApproved1 4) 1) ))
(assert (and (= (dean_approve0 4) 1) (= (DeanApproved0 4) 1) ))
(assert (and (= (dean_approve2 4) 1) (= (DeanApproved2 4) 1) ))
(assert (and (= (bm_approve1 4) 1) (= (BMApproved1 4) 1) ))
(assert (and (= (chair_approve2 4) 1) (= (ChairApproved2 4) 1) ))
(assert (and (= (chair_approve1 4) 1) (= (ChairApproved1 4) 1) ))
(assert (and (= (bm_approve2 4) 1) (= (BMApproved2 4) 1) ))
(assert (and (= (chair_approve0 4) 1) (= (ChairApproved0 4) 1) ))
(assert (and (= (bm_approve0 4) 1) (= (BMApproved0 4) 1) ))


(assert (= (ASSIGN*UUA 4) (join SetToCheckUA (ASSIGN* 4))))
(assert (= (ASSIGN*AT 4) (join SetToCheckAT (ASSIGN* 4))))
(assert (= (ASSOC*UA 4) (join (ASSIGN*UUA 4) (ASSOC 4))))
(assert (= (ASSOC* 4) (join (ASSOC*UA 4) (transpose (ASSIGN*AT 4)))))


;--------------------------------------------------------------------------------------------------------------------
;STEP5
(assert 
(xor 
(= (create_proposal 4) 0) 
(and (member (mkTuple 81 95 31) (ASSOC* 4))  (member (mkTuple 77 17) (ASSIGN* 4)) (= (create_proposal 4) 1))
)
)				

(assert 
(xor 
(= (add_copi0 4) 0) 
(and (member (mkTuple 81 199 18) (ASSOC* 4))  (member (mkTuple 70 6) (ASSIGN* 4)) (= (add_copi0 4) 1))
)
)				

(assert 
(xor 
(= (add_copi1 4) 0) 
(and (member (mkTuple 81 199 18) (ASSOC* 4))  (member (mkTuple 23 6) (ASSIGN* 4)) (= (add_copi1 4) 1))
)
)				

(assert 
(xor 
(= (submit_proposal 4) 0) 
(and (member (mkTuple 81 106 31) (ASSOC* 4))   (= (submit_proposal 4) 1))
)
)				
(assert 
(xor 
(= (chair_approve0 4) 0) 
(and (member (mkTuple 39 194 34) (ASSOC* 4))   (= (chair_approve0 4) 1))
)
)				
(assert 
(xor 
(= (chair_approve1 4) 0) 
(and (member (mkTuple 39 194 34) (ASSOC* 4))   (= (chair_approve1 4) 1))
)
)				
(assert 
(xor 
(= (chair_approve2 4) 0) 
(and (member (mkTuple 39 194 34) (ASSOC* 4))   (= (chair_approve2 4) 1))
)
)				
(assert 
(xor 
(= (chair_disapprove 4) 0) 
(and (member (mkTuple 39 203 34) (ASSOC* 4))   (= (chair_disapprove 4) 1))
)
)				
(assert 
(xor 
(= (bm_approve0 4) 0) 
(and (member (mkTuple 80 194 24) (ASSOC* 4))   (= (bm_approve0 4) 1))
)
)				
(assert 
(xor 
(= (bm_approve1 4) 0) 
(and (member (mkTuple 80 194 24) (ASSOC* 4))   (= (bm_approve1 4) 1))
)
)				
(assert 
(xor 
(= (bm_approve2 4) 0) 
(and (member (mkTuple 80 194 24) (ASSOC* 4))   (= (bm_approve2 4) 1))
)
)				
(assert 
(xor 
(= (bm_disapprove 4) 0) 
(and (member (mkTuple 80 203 24) (ASSOC* 4))   (= (bm_disapprove 4) 1))
)
)				
(assert 
(xor 
(= (dean_approve0 4) 0) 
(and (member (mkTuple 25 194 50) (ASSOC* 4))   (= (dean_approve0 4) 1))
)
)				
(assert 
(xor 
(= (dean_approve1 4) 0) 
(and (member (mkTuple 25 194 50) (ASSOC* 4))   (= (dean_approve1 4) 1))
)
)				
(assert 
(xor 
(= (dean_approve2 4) 0) 
(and (member (mkTuple 25 194 50) (ASSOC* 4))   (= (dean_approve2 4) 1))
)
)				
(assert 
(xor 
(= (dean_disapprove 4) 0) 
(and (member (mkTuple 25 203 50) (ASSOC* 4))   (= (dean_disapprove 4) 1))
)
)				
(assert 
(xor 
(= (irb_approve 4) 0) 
(and (member (mkTuple 69 194 84) (ASSOC* 4))   (= (irb_approve 4) 1))
)
)				
(assert 
(xor 
(= (irb_disapprove 4) 0) 
(and (member (mkTuple 69 203 84) (ASSOC* 4))   (= (irb_disapprove 4) 1))
)
)				
(assert 
(xor 
(= (ra_approve 4) 0) 
(and (member (mkTuple 1 194 73) (ASSOC* 4))   (= (ra_approve 4) 1))
)
)				
(assert 
(xor 
(= (ra_disapprove 4) 0) 
(and (member (mkTuple 1 203 73) (ASSOC* 4))   (= (ra_disapprove 4) 1))
)
)				
(assert 
(xor 
(= (rd_approve 4) 0) 
(and (member (mkTuple 46 194 19) (ASSOC* 4))   (= (rd_approve 4) 1))
)
)				
(assert 
(xor 
(= (rd_disapprove 4) 0) 
(and (member (mkTuple 46 203 19) (ASSOC* 4))   (= (rd_disapprove 4) 1))
)
)				
(assert 
(xor 
(= (ra_submit 4) 0) 
(and (member (mkTuple 1 206 31) (ASSOC* 4))   (= (ra_submit 4) 1))
)
)				

(assert (or 
(and   (= (create_proposal 4) 1)
(xor (= (ASSIGN* 5) 
(union (join (join (union (singleton (mkTuple 77 77)) (join (ASSIGN* 4) (singleton (mkTuple 77 77)))) (singleton (mkTuple 77 81))) (union (singleton (mkTuple 81 81)) (join (singleton (mkTuple 81 81)) (ASSIGN* 4) ))) (ASSIGN* 4))(union (join (join (union (singleton (mkTuple 11 11)) (join (ASSIGN* 4) (singleton (mkTuple 11 11)))) (singleton (mkTuple 11 39))) (union (singleton (mkTuple 39 39)) (join (singleton (mkTuple 39 39)) (ASSIGN* 4) ))) (ASSIGN* 4))(union (join (join (union (singleton (mkTuple 60 60)) (join (ASSIGN* 4) (singleton (mkTuple 60 60)))) (singleton (mkTuple 60 80))) (union (singleton (mkTuple 80 80)) (join (singleton (mkTuple 80 80)) (ASSIGN* 4) ))) (ASSIGN* 4))(union (join (join (union (singleton (mkTuple 9 9)) (join (ASSIGN* 4) (singleton (mkTuple 9 9)))) (singleton (mkTuple 9 25))) (union (singleton (mkTuple 25 25)) (join (singleton (mkTuple 25 25)) (ASSIGN* 4) ))) (ASSIGN* 4)))
(= (ASSIGN* 5) (ASSIGN* 4))))

(and   (= (add_copi0 4) 1)
(xor (= (ASSIGN* 5) 
(union (join (join (union (singleton (mkTuple 70 70)) (join (ASSIGN* 4) (singleton (mkTuple 70 70)))) (singleton (mkTuple 70 18))) (union (singleton (mkTuple 18 18)) (join (singleton (mkTuple 18 18)) (ASSIGN* 4) ))) (ASSIGN* 4))(union (join (join (union (singleton (mkTuple 11 11)) (join (ASSIGN* 4) (singleton (mkTuple 11 11)))) (singleton (mkTuple 11 39))) (union (singleton (mkTuple 39 39)) (join (singleton (mkTuple 39 39)) (ASSIGN* 4) ))) (ASSIGN* 4))(union (join (join (union (singleton (mkTuple 60 60)) (join (ASSIGN* 4) (singleton (mkTuple 60 60)))) (singleton (mkTuple 60 80))) (union (singleton (mkTuple 80 80)) (join (singleton (mkTuple 80 80)) (ASSIGN* 4) ))) (ASSIGN* 4))(union (join (join (union (singleton (mkTuple 9 9)) (join (ASSIGN* 4) (singleton (mkTuple 9 9)))) (singleton (mkTuple 9 25))) (union (singleton (mkTuple 25 25)) (join (singleton (mkTuple 25 25)) (ASSIGN* 4) ))) (ASSIGN* 4)))
(= (ASSIGN* 5) (ASSIGN* 4))))

(and   (= (add_copi1 4) 1)
(xor (= (ASSIGN* 5) 
(union (join (join (union (singleton (mkTuple 23 23)) (join (ASSIGN* 4) (singleton (mkTuple 23 23)))) (singleton (mkTuple 23 18))) (union (singleton (mkTuple 18 18)) (join (singleton (mkTuple 18 18)) (ASSIGN* 4) ))) (ASSIGN* 4))(union (join (join (union (singleton (mkTuple 11 11)) (join (ASSIGN* 4) (singleton (mkTuple 11 11)))) (singleton (mkTuple 11 39))) (union (singleton (mkTuple 39 39)) (join (singleton (mkTuple 39 39)) (ASSIGN* 4) ))) (ASSIGN* 4))(union (join (join (union (singleton (mkTuple 60 60)) (join (ASSIGN* 4) (singleton (mkTuple 60 60)))) (singleton (mkTuple 60 80))) (union (singleton (mkTuple 80 80)) (join (singleton (mkTuple 80 80)) (ASSIGN* 4) ))) (ASSIGN* 4))(union (join (join (union (singleton (mkTuple 9 9)) (join (ASSIGN* 4) (singleton (mkTuple 9 9)))) (singleton (mkTuple 9 25))) (union (singleton (mkTuple 25 25)) (join (singleton (mkTuple 25 25)) (ASSIGN* 4) ))) (ASSIGN* 4)))
(= (ASSIGN* 5) (ASSIGN* 4))))

(and   (= (delete_copi0 4) 1)
(xor (= (ASSIGN* 5) 
(setminus (ASSIGN* 4) (setminus (setminus (union (singleton (mkTuple 70 18)) (join (singleton (mkTuple 70 18)) (ASSIGN* 4))) (join (join (intersection (join (union  (singleton (mkTuple 70 70)) (join (ASSIGN* 4)  (singleton (mkTuple 70 70)))) (transpose (union  (singleton (mkTuple 70 70)) (join (ASSIGN* 4)  (singleton (mkTuple 70 70)))))) NODES) (setminus (ASSIGN 4) (singleton (mkTuple 70 18)))) (ASSIGN* 4))) (join (join (intersection (join (union  (singleton (mkTuple 70 70)) (join (ASSIGN* 4)  (singleton (mkTuple 70 70)))) (transpose (union  (singleton (mkTuple 70 70)) (join (ASSIGN* 4)  (singleton (mkTuple 70 70)))))) NODES) (setminus (ASSIGN 4) (singleton (mkTuple 70 18)))) (ASSIGN* 4))))(setminus (ASSIGN* 4) (setminus (join (singleton (mkTuple 70 18)) (ASSIGN* 4)) (join (join (singleton (mkTuple 70 70)) (setminus (setminus (ASSIGN 4) (singleton (mkTuple 70 18))) (singleton (mkTuple 70 70)))) (ASSIGN* 4))))(setminus (ASSIGN* 4) (setminus (setminus (union (singleton (mkTuple 11 39)) (join (singleton (mkTuple 11 39)) (ASSIGN* 4))) (join (join (intersection (join (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 4)  (singleton (mkTuple 11 11)))) (transpose (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 4)  (singleton (mkTuple 11 11)))))) NODES) (setminus (ASSIGN 4) (singleton (mkTuple 11 39)))) (ASSIGN* 4))) (join (join (intersection (join (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 4)  (singleton (mkTuple 11 11)))) (transpose (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 4)  (singleton (mkTuple 11 11)))))) NODES) (setminus (ASSIGN 4) (singleton (mkTuple 11 39)))) (ASSIGN* 4))))(setminus (ASSIGN* 4) (setminus (join (singleton (mkTuple 11 39)) (ASSIGN* 4)) (join (join (singleton (mkTuple 11 11)) (setminus (setminus (ASSIGN 4) (singleton (mkTuple 11 39))) (singleton (mkTuple 11 11)))) (ASSIGN* 4))))(setminus (ASSIGN* 4) (setminus (setminus (union (singleton (mkTuple 60 80)) (join (singleton (mkTuple 60 80)) (ASSIGN* 4))) (join (join (intersection (join (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 4)  (singleton (mkTuple 60 60)))) (transpose (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 4)  (singleton (mkTuple 60 60)))))) NODES) (setminus (ASSIGN 4) (singleton (mkTuple 60 80)))) (ASSIGN* 4))) (join (join (intersection (join (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 4)  (singleton (mkTuple 60 60)))) (transpose (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 4)  (singleton (mkTuple 60 60)))))) NODES) (setminus (ASSIGN 4) (singleton (mkTuple 60 80)))) (ASSIGN* 4))))(setminus (ASSIGN* 4) (setminus (join (singleton (mkTuple 60 80)) (ASSIGN* 4)) (join (join (singleton (mkTuple 60 60)) (setminus (setminus (ASSIGN 4) (singleton (mkTuple 60 80))) (singleton (mkTuple 60 60)))) (ASSIGN* 4))))(setminus (ASSIGN* 4) (setminus (setminus (union (singleton (mkTuple 9 25)) (join (singleton (mkTuple 9 25)) (ASSIGN* 4))) (join (join (intersection (join (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 4)  (singleton (mkTuple 9 9)))) (transpose (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 4)  (singleton (mkTuple 9 9)))))) NODES) (setminus (ASSIGN 4) (singleton (mkTuple 9 25)))) (ASSIGN* 4))) (join (join (intersection (join (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 4)  (singleton (mkTuple 9 9)))) (transpose (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 4)  (singleton (mkTuple 9 9)))))) NODES) (setminus (ASSIGN 4) (singleton (mkTuple 9 25)))) (ASSIGN* 4))))(setminus (ASSIGN* 4) (setminus (join (singleton (mkTuple 9 25)) (ASSIGN* 4)) (join (join (singleton (mkTuple 9 9)) (setminus (setminus (ASSIGN 4) (singleton (mkTuple 9 25))) (singleton (mkTuple 9 9)))) (ASSIGN* 4)))))
(= (ASSIGN* 5) (ASSIGN* 4))))

(and   (= (delete_copi1 4) 1)
(xor (= (ASSIGN* 5) 
(setminus (ASSIGN* 4) (setminus (setminus (union (singleton (mkTuple 23 18)) (join (singleton (mkTuple 23 18)) (ASSIGN* 4))) (join (join (intersection (join (union  (singleton (mkTuple 23 23)) (join (ASSIGN* 4)  (singleton (mkTuple 23 23)))) (transpose (union  (singleton (mkTuple 23 23)) (join (ASSIGN* 4)  (singleton (mkTuple 23 23)))))) NODES) (setminus (ASSIGN 4) (singleton (mkTuple 23 18)))) (ASSIGN* 4))) (join (join (intersection (join (union  (singleton (mkTuple 23 23)) (join (ASSIGN* 4)  (singleton (mkTuple 23 23)))) (transpose (union  (singleton (mkTuple 23 23)) (join (ASSIGN* 4)  (singleton (mkTuple 23 23)))))) NODES) (setminus (ASSIGN 4) (singleton (mkTuple 23 18)))) (ASSIGN* 4))))(setminus (ASSIGN* 4) (setminus (join (singleton (mkTuple 23 18)) (ASSIGN* 4)) (join (join (singleton (mkTuple 23 23)) (setminus (setminus (ASSIGN 4) (singleton (mkTuple 23 18))) (singleton (mkTuple 23 23)))) (ASSIGN* 4))))(setminus (ASSIGN* 4) (setminus (setminus (union (singleton (mkTuple 11 39)) (join (singleton (mkTuple 11 39)) (ASSIGN* 4))) (join (join (intersection (join (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 4)  (singleton (mkTuple 11 11)))) (transpose (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 4)  (singleton (mkTuple 11 11)))))) NODES) (setminus (ASSIGN 4) (singleton (mkTuple 11 39)))) (ASSIGN* 4))) (join (join (intersection (join (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 4)  (singleton (mkTuple 11 11)))) (transpose (union  (singleton (mkTuple 11 11)) (join (ASSIGN* 4)  (singleton (mkTuple 11 11)))))) NODES) (setminus (ASSIGN 4) (singleton (mkTuple 11 39)))) (ASSIGN* 4))))(setminus (ASSIGN* 4) (setminus (join (singleton (mkTuple 11 39)) (ASSIGN* 4)) (join (join (singleton (mkTuple 11 11)) (setminus (setminus (ASSIGN 4) (singleton (mkTuple 11 39))) (singleton (mkTuple 11 11)))) (ASSIGN* 4))))(setminus (ASSIGN* 4) (setminus (setminus (union (singleton (mkTuple 60 80)) (join (singleton (mkTuple 60 80)) (ASSIGN* 4))) (join (join (intersection (join (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 4)  (singleton (mkTuple 60 60)))) (transpose (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 4)  (singleton (mkTuple 60 60)))))) NODES) (setminus (ASSIGN 4) (singleton (mkTuple 60 80)))) (ASSIGN* 4))) (join (join (intersection (join (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 4)  (singleton (mkTuple 60 60)))) (transpose (union  (singleton (mkTuple 60 60)) (join (ASSIGN* 4)  (singleton (mkTuple 60 60)))))) NODES) (setminus (ASSIGN 4) (singleton (mkTuple 60 80)))) (ASSIGN* 4))))(setminus (ASSIGN* 4) (setminus (join (singleton (mkTuple 60 80)) (ASSIGN* 4)) (join (join (singleton (mkTuple 60 60)) (setminus (setminus (ASSIGN 4) (singleton (mkTuple 60 80))) (singleton (mkTuple 60 60)))) (ASSIGN* 4))))(setminus (ASSIGN* 4) (setminus (setminus (union (singleton (mkTuple 9 25)) (join (singleton (mkTuple 9 25)) (ASSIGN* 4))) (join (join (intersection (join (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 4)  (singleton (mkTuple 9 9)))) (transpose (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 4)  (singleton (mkTuple 9 9)))))) NODES) (setminus (ASSIGN 4) (singleton (mkTuple 9 25)))) (ASSIGN* 4))) (join (join (intersection (join (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 4)  (singleton (mkTuple 9 9)))) (transpose (union  (singleton (mkTuple 9 9)) (join (ASSIGN* 4)  (singleton (mkTuple 9 9)))))) NODES) (setminus (ASSIGN 4) (singleton (mkTuple 9 25)))) (ASSIGN* 4))))(setminus (ASSIGN* 4) (setminus (join (singleton (mkTuple 9 25)) (ASSIGN* 4)) (join (join (singleton (mkTuple 9 9)) (setminus (setminus (ASSIGN 4) (singleton (mkTuple 9 25))) (singleton (mkTuple 9 9)))) (ASSIGN* 4)))))
(= (ASSIGN* 5) (ASSIGN* 4))))

(= (ASSIGN* 5) (ASSIGN* 4))))
(assert (or
(and   (= (create_proposal 4) 1)
(xor (= (ASSIGN 5) 
(union (ASSIGN 4) (singleton (mkTuple 77 81)))(union (ASSIGN 4) (singleton (mkTuple 11 39)))(union (ASSIGN 4) (singleton (mkTuple 60 80)))(union (ASSIGN 4) (singleton (mkTuple 9 25))))
(= (ASSIGN 5) (ASSIGN 4))))

(and   (= (add_copi0 4) 1)
(xor (= (ASSIGN 5) 
(union (ASSIGN 4) (singleton (mkTuple 70 18)))(union (ASSIGN 4) (singleton (mkTuple 11 39)))(union (ASSIGN 4) (singleton (mkTuple 60 80)))(union (ASSIGN 4) (singleton (mkTuple 9 25))))
(= (ASSIGN 5) (ASSIGN 4))))

(and   (= (add_copi1 4) 1)
(xor (= (ASSIGN 5) 
(union (ASSIGN 4) (singleton (mkTuple 23 18)))(union (ASSIGN 4) (singleton (mkTuple 11 39)))(union (ASSIGN 4) (singleton (mkTuple 60 80)))(union (ASSIGN 4) (singleton (mkTuple 9 25))))
(= (ASSIGN 5) (ASSIGN 4))))

(and   (= (delete_copi0 4) 1)
(xor (= (ASSIGN 5) 
(setminus (ASSIGN 4) (singleton (mkTuple 70 18)))(setminus (ASSIGN 4) (singleton (mkTuple 11 39)))(setminus (ASSIGN 4) (singleton (mkTuple 60 80)))(setminus (ASSIGN 4) (singleton (mkTuple 9 25))))
(= (ASSIGN 5) (ASSIGN 4))))

(and   (= (delete_copi1 4) 1)
(xor (= (ASSIGN 5) 
(setminus (ASSIGN 4) (singleton (mkTuple 23 18)))(setminus (ASSIGN 4) (singleton (mkTuple 11 39)))(setminus (ASSIGN 4) (singleton (mkTuple 60 80)))(setminus (ASSIGN 4) (singleton (mkTuple 9 25))))
(= (ASSIGN 5) (ASSIGN 4))))

(= (ASSIGN 5) (ASSIGN 4))))
(assert (or 
(and  (= (submit_proposal 4) 1)
(xor (= (ASSOC 5) 
(union (union (union (union (setminus (setminus (setminus (setminus (setminus  (ASSOC 4) (singleton(mkTuple 81 106 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 202 59))) (singleton(mkTuple 39 205 34))) (singleton(mkTuple 39 194 31))) (singleton(mkTuple 39 180 21))) (singleton(mkTuple 39 194 31))))
(= (ASSOC 5) (ASSOC 4))))

(and (= (ChairApproved0 5) 1) (= (ChairApproved1 5) 1) (= (ChairApproved2 5) 1)  (= (chair_approve0 4) 1)
(xor (= (ASSOC 5) 
(union (union (union (union (union (union (setminus (setminus  (ASSOC 4) (singleton(mkTuple 39 194 34))) (singleton(mkTuple 39 194 31))) (singleton(mkTuple 80 205 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 80 180 21))) (singleton(mkTuple 69 205 84))) (singleton(mkTuple 69 180 21))) (singleton(mkTuple 69 194 31))))
(= (ASSOC 5) (ASSOC 4))))

(and (= (ChairApproved0 5) 1) (= (ChairApproved1 5) 1) (= (ChairApproved2 5) 1)  (= (chair_approve1 4) 1)
(xor (= (ASSOC 5) 
(union (union (union (union (union (union (setminus (setminus  (ASSOC 4) (singleton(mkTuple 39 194 34))) (singleton(mkTuple 39 194 31))) (singleton(mkTuple 80 205 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 80 180 21))) (singleton(mkTuple 69 205 84))) (singleton(mkTuple 69 180 21))) (singleton(mkTuple 69 194 31))))
(= (ASSOC 5) (ASSOC 4))))

(and (= (ChairApproved0 5) 1) (= (ChairApproved1 5) 1) (= (ChairApproved2 5) 1)  (= (chair_approve2 4) 1)
(xor (= (ASSOC 5) 
(union (union (union (union (union (union (setminus (setminus  (ASSOC 4) (singleton(mkTuple 39 194 34))) (singleton(mkTuple 39 194 31))) (singleton(mkTuple 80 205 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 80 180 21))) (singleton(mkTuple 69 205 84))) (singleton(mkTuple 69 180 21))) (singleton(mkTuple 69 194 31))))
(= (ASSOC 5) (ASSOC 4))))

(and  (= (chair_disapprove 4) 1)
(xor (= (ASSOC 5) 
(union (union (union (union (union (setminus (setminus (setminus  (ASSOC 4) (singleton(mkTuple 39 203 34))) (singleton(mkTuple 39 203 31))) (singleton(mkTuple 39 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))))
(= (ASSOC 5) (ASSOC 4))))

(and (= (BMApproved0 5) 1) (= (BMApproved1 5) 1) (= (BMApproved2 5) 1)  (= (bm_approve0 4) 1)
(xor (= (ASSOC 5) 
(union (union (union (setminus (setminus  (ASSOC 4) (singleton(mkTuple 80 194 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 25 205 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 25 180 21))))
(= (ASSOC 5) (ASSOC 4))))

(and (= (BMApproved0 5) 1) (= (BMApproved1 5) 1) (= (BMApproved2 5) 1)  (= (bm_approve1 4) 1)
(xor (= (ASSOC 5) 
(union (union (union (setminus (setminus  (ASSOC 4) (singleton(mkTuple 80 194 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 25 205 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 25 180 21))))
(= (ASSOC 5) (ASSOC 4))))

(and (= (BMApproved0 5) 1) (= (BMApproved1 5) 1) (= (BMApproved2 5) 1)  (= (bm_approve2 4) 1)
(xor (= (ASSOC 5) 
(union (union (union (setminus (setminus  (ASSOC 4) (singleton(mkTuple 80 194 24))) (singleton(mkTuple 80 194 31))) (singleton(mkTuple 25 205 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 25 180 21))))
(= (ASSOC 5) (ASSOC 4))))

(and  (= (bm_disapprove 4) 1)
(xor (= (ASSOC 5) 
(setminus (union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 4) (singleton(mkTuple 69 203 84))) (singleton(mkTuple 69 203 31))) (singleton(mkTuple 69 203 21))) (singleton(mkTuple 80 203 24))) (singleton(mkTuple 80 203 31))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))) (singleton(mkTuple 39 203 21))))
(= (ASSOC 5) (ASSOC 4))))

(and (= (DeanApproved0 5) 1) (= (DeanApproved1 5) 1) (= (DeanApproved2 5) 1)  (= (dean_approve0 4) 1)
(xor (= (ASSOC 5) 
(union (union (union (union (union (union (union (union (setminus (setminus  (ASSOC 4) (singleton(mkTuple 25 194 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 180 21))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 180 21))))
(= (ASSOC 5) (ASSOC 4))))

(and (= (DeanApproved0 5) 1) (= (DeanApproved1 5) 1) (= (DeanApproved2 5) 1)  (= (dean_approve1 4) 1)
(xor (= (ASSOC 5) 
(union (union (union (union (union (union (union (union (setminus (setminus  (ASSOC 4) (singleton(mkTuple 25 194 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 180 21))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 180 21))))
(= (ASSOC 5) (ASSOC 4))))

(and (= (DeanApproved0 5) 1) (= (DeanApproved1 5) 1) (= (DeanApproved2 5) 1)  (= (dean_approve2 4) 1)
(xor (= (ASSOC 5) 
(union (union (union (union (union (union (union (union (setminus (setminus  (ASSOC 4) (singleton(mkTuple 25 194 50))) (singleton(mkTuple 25 194 31))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 180 21))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))) (singleton(mkTuple 1 180 21))))
(= (ASSOC 5) (ASSOC 4))))

(and  (= (dean_disapprove 4) 1)
(xor (= (ASSOC 5) 
(setminus (union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 4) (singleton(mkTuple 69 203 84))) (singleton(mkTuple 69 203 31))) (singleton(mkTuple 69 203 21))) (singleton(mkTuple 80 203 24))) (singleton(mkTuple 80 203 31))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 25 203 50))) (singleton(mkTuple 25 203 31))) (singleton(mkTuple 25 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))) (singleton(mkTuple 39 203 21))))
(= (ASSOC 5) (ASSOC 4))))

(and  (= (irb_approve 4) 1)
(xor (= (ASSOC 5) 
(union (union (union (setminus (setminus  (ASSOC 4) (singleton(mkTuple 69 194 84))) (singleton(mkTuple 69 194 31))) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 205 3))) (singleton(mkTuple 1 205 73))))
(= (ASSOC 5) (ASSOC 4))))

(and  (= (irb_disapprove 4) 1)
(xor (= (ASSOC 5) 
(setminus (union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 4) (singleton(mkTuple 69 203 84))) (singleton(mkTuple 69 203 31))) (singleton(mkTuple 69 203 21))) (singleton(mkTuple 80 203 24))) (singleton(mkTuple 80 203 31))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 25 203 50))) (singleton(mkTuple 25 203 31))) (singleton(mkTuple 25 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))) (singleton(mkTuple 39 203 21))))
(= (ASSOC 5) (ASSOC 4))))

(and  (= (ra_approve 4) 1)
(xor (= (ASSOC 5) 
(union (union (union (union (setminus (setminus (setminus  (ASSOC 4) (singleton(mkTuple 1 194 31))) (singleton(mkTuple 1 194 73))) (singleton(mkTuple 1 194 3))) (singleton(mkTuple 46 194 31))) (singleton(mkTuple 46 205 19))) (singleton(mkTuple 46 180 21))) (singleton(mkTuple 46 205 3))))
(= (ASSOC 5) (ASSOC 4))))

(and  (= (ra_disapprove 4) 1)
(xor (= (ASSOC 5) 
(union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 4) (singleton(mkTuple 1 203 31))) (singleton(mkTuple 1 203 73))) (singleton(mkTuple 1 203 21))) (singleton(mkTuple 1 203 3))) (singleton(mkTuple 39 203 21))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 25 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))))
(= (ASSOC 5) (ASSOC 4))))

(and  (= (rd_approve 4) 1)
(xor (= (ASSOC 5) 
(union (union (setminus (setminus (setminus  (ASSOC 4) (singleton(mkTuple 46 194 19))) (singleton(mkTuple 46 194 31))) (singleton(mkTuple 46 194 3))) (singleton(mkTuple 1 196 31))) (singleton(mkTuple 1 205 73))))
(= (ASSOC 5) (ASSOC 4))))

(and  (= (rd_disapprove 4) 1)
(xor (= (ASSOC 5) 
(union (union (union (union (union (setminus (setminus (setminus (setminus (setminus (setminus (setminus (setminus  (ASSOC 4) (singleton(mkTuple 46 203 21))) (singleton(mkTuple 46 203 31))) (singleton(mkTuple 46 203 3))) (singleton(mkTuple 46 203 19))) (singleton(mkTuple 1 203 21))) (singleton(mkTuple 39 203 21))) (singleton(mkTuple 80 203 21))) (singleton(mkTuple 25 203 21))) (singleton(mkTuple 81 196 31))) (singleton(mkTuple 81 205 22))) (singleton(mkTuple 81 199 18))) (singleton(mkTuple 18 205 74))) (singleton(mkTuple 18 202 59))))
(= (ASSOC 5) (ASSOC 4))))

(and  (= (ra_submit 4) 1)
(xor (= (ASSOC 5) 
(union (union (setminus (setminus (setminus  (ASSOC 4) (singleton(mkTuple 1 206 31))) (singleton(mkTuple 1 206 73))) (singleton(mkTuple 1 206 3))) (singleton(mkTuple 46 204 31))) (singleton(mkTuple 46 205 19))))
(= (ASSOC 5) (ASSOC 4))))

(= (ASSOC 5) (ASSOC 4))))
(assert (and (= (dean_approve1 5) 1) (= (DeanApproved1 5) 1) ))
(assert (and (= (dean_approve0 5) 1) (= (DeanApproved0 5) 1) ))
(assert (and (= (dean_approve2 5) 1) (= (DeanApproved2 5) 1) ))
(assert (and (= (bm_approve1 5) 1) (= (BMApproved1 5) 1) ))
(assert (and (= (chair_approve2 5) 1) (= (ChairApproved2 5) 1) ))
(assert (and (= (chair_approve1 5) 1) (= (ChairApproved1 5) 1) ))
(assert (and (= (bm_approve2 5) 1) (= (BMApproved2 5) 1) ))
(assert (and (= (chair_approve0 5) 1) (= (ChairApproved0 5) 1) ))
(assert (and (= (bm_approve0 5) 1) (= (BMApproved0 5) 1) ))


(assert (= (ASSIGN*UUA 5) (join SetToCheckUA (ASSIGN* 5))))
(assert (= (ASSIGN*AT 5) (join SetToCheckAT (ASSIGN* 5))))
(assert (= (ASSOC*UA 5) (join (ASSIGN*UUA 5) (ASSOC 5))))
(assert (= (ASSOC* 5) (join (ASSOC*UA 5) (transpose (ASSIGN*AT 5)))))


;QUERY
(assert (member (mkTuple create_proposal) (ASSIGN* 5)))


(check-sat)
(get-value (create_proposal))
(get-value (add_copi))
(get-value (add_sp))
(get-value (delete_copi))
(get-value (delete_sp))
(get-value (submit_proposal))
(get-value (chair_approve))
(get-value (chair_disapprove))
(get-value (bm_approve))
(get-value (bm_disapprove))
(get-value (dean_approve))
(get-value (dean_disapprove))
(get-value (irb_approve))
(get-value (irb_disapprove))
(get-value (ra_approve))
(get-value (ra_disapprove))
(get-value (rd_approve))
(get-value (rd_disapprove))
(get-value (ra_submit))
(get-value (add_copi0))
(get-value (delete_copi0))
(get-value (add_copi1))
(get-value (delete_copi1))
(get-value (ChairApproved0))
(get-value (BMApproved0))
(get-value (DeanApproved0))
(get-value (ChairApproved1))
(get-value (BMApproved1))
(get-value (DeanApproved1))
(get-value (ChairApproved2))
(get-value (BMApproved2))
(get-value (DeanApproved2))
(get-value (chair_approve0))
(get-value (bm_approve0))
(get-value (dean_approve0))
(get-value (chair_approve1))
(get-value (bm_approve1))
(get-value (dean_approve1))
(get-value (chair_approve2))
(get-value (bm_approve2))
(get-value (dean_approve2))
