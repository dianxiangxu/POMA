(set-logic ALL)
(set-option :produce-models true)
(declare-fun SetToCheckUA () (Set (Tuple Int Int)))
(assert (= SetToCheckUA (insert (mkTuple 13 13) 
(mkTuple 15 15) 
(mkTuple 2 2) 
(mkTuple 3 3) 
(mkTuple 18 18) 
(mkTuple 1 1) 
(mkTuple 11 11) 
(mkTuple 5 5) 
(mkTuple 12 12) 
(mkTuple 4 4) 
(mkTuple 14 14) 
(mkTuple 7 7) 
(mkTuple 8 8) 
(mkTuple 9 9) 
(mkTuple 10 10) 
(singleton (mkTuple 19 19)))))
(declare-fun SetToCheckAT () (Set (Tuple Int Int)))
(assert (= SetToCheckAT (insert (mkTuple 6 6) 
(singleton (mkTuple 16 16)))))
(declare-fun ASSIGN* (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN* 0) (insert (mkTuple 4 17) 
(mkTuple 9 17) 
(mkTuple 14 3) 
(mkTuple 15 17) 
(mkTuple 15 15) 
(mkTuple 2 2) 
(mkTuple 11 17) 
(mkTuple 16 17) 
(mkTuple 3 3) 
(mkTuple 18 18) 
(mkTuple 8 17) 
(mkTuple 1 1) 
(mkTuple 11 11) 
(mkTuple 3 17) 
(mkTuple 12 15) 
(mkTuple 12 17) 
(mkTuple 14 14) 
(mkTuple 14 10) 
(mkTuple 17 17) 
(mkTuple 10 10) 
(mkTuple 7 17) 
(mkTuple 13 13) 
(mkTuple 18 17) 
(mkTuple 13 17) 
(mkTuple 16 16) 
(mkTuple 2 17) 
(mkTuple 6 17) 
(mkTuple 19 17) 
(mkTuple 5 5) 
(mkTuple 12 12) 
(mkTuple 4 4) 
(mkTuple 7 7) 
(mkTuple 3 10) 
(mkTuple 6 6) 
(mkTuple 14 17) 
(mkTuple 1 17) 
(mkTuple 8 8) 
(mkTuple 10 17) 
(mkTuple 9 9) 
(mkTuple 5 17) 
(singleton (mkTuple 19 19)))))
(declare-fun ASSIGN (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN 0) (insert (mkTuple 4 17) 
(mkTuple 9 17) 
(mkTuple 14 3) 
(mkTuple 15 17) 
(mkTuple 15 15) 
(mkTuple 2 2) 
(mkTuple 11 17) 
(mkTuple 16 17) 
(mkTuple 3 3) 
(mkTuple 8 17) 
(mkTuple 18 18) 
(mkTuple 1 1) 
(mkTuple 11 11) 
(mkTuple 3 17) 
(mkTuple 12 15) 
(mkTuple 14 14) 
(mkTuple 10 10) 
(mkTuple 7 17) 
(mkTuple 13 13) 
(mkTuple 18 17) 
(mkTuple 13 17) 
(mkTuple 16 16) 
(mkTuple 2 17) 
(mkTuple 6 17) 
(mkTuple 19 17) 
(mkTuple 5 5) 
(mkTuple 12 12) 
(mkTuple 4 4) 
(mkTuple 7 7) 
(mkTuple 3 10) 
(mkTuple 6 6) 
(mkTuple 1 17) 
(mkTuple 8 8) 
(mkTuple 10 17) 
(mkTuple 9 9) 
(mkTuple 5 17) 
(singleton (mkTuple 19 19)))))
(declare-fun ASSOC (Int) (Set (Tuple Int Int Int)))

(assert (= (ASSOC 0) (insert(mkTuple 3 23 16) 
(mkTuple 3 20 19) 
(mkTuple 3 25 19) 
(mkTuple 15 26 3) 
(mkTuple 15 28 3) 
(mkTuple 15 40 16) 
(mkTuple 15 24 16) 
(mkTuple 15 42 16) 
(singleton (mkTuple 19 21 16)))))

(declare-fun NODES () (Set (Tuple Int Int)))
(assert (= NODES (insert (mkTuple 1 1) 
(mkTuple 2 2) 
(mkTuple 3 3) 
(mkTuple 4 4) 
(mkTuple 5 5) 
(mkTuple 6 6) 
(mkTuple 7 7) 
(mkTuple 8 8) 
(mkTuple 9 9) 
(mkTuple 10 10) 
(mkTuple 11 11) 
(mkTuple 12 12) 
(mkTuple 13 13) 
(mkTuple 14 14) 
(mkTuple 15 15) 
(mkTuple 16 16) 
(mkTuple 17 17) 
(mkTuple 18 18) 
(singleton (mkTuple 19 19))))) 


(declare-fun obligation13 (Int) Int)
(declare-fun obligation7 (Int) Int)
(declare-fun obligation6 (Int) Int)
(declare-fun obligation9 (Int) Int)
(declare-fun obligation8 (Int) Int)
(declare-fun obligation3 (Int) Int)
(declare-fun obligation2 (Int) Int)
(declare-fun obligation5 (Int) Int)
(declare-fun obligation4 (Int) Int)
(declare-fun obligation1 (Int) Int)
(declare-fun obligation12 (Int) Int)
(declare-fun obligation11 (Int) Int)
(declare-fun obligation10 (Int) Int)
;--------------------------------------------------------------------------------------------------------------------
;STEP1

; 5.1 a->PRE
(declare-fun obligation1U_1 () Int)
(declare-fun obligation1UA_1 () Int)
(declare-fun obligation1AT_1 () Int)
(declare-fun obligation1UO_1 () Int)
(assert (>= obligation1U_1 0))
(assert (>= obligation1UA_1 0))
(assert (>= obligation1AT_1 0))
(assert (>= obligation1UO_1 0))
(declare-fun obligation1ar_1 () Int)
(assert (= obligation1ar_1 40))
(assert (=> (= (obligation1 0) 1) (let((.def_U obligation1U_1)(.def_UO obligation1UO_1) (.def_UA obligation1UA_1)(.def_AT obligation1AT_1))(and
 (member (mkTuple  15 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation1ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation2U_1 () Int)
(declare-fun obligation2UA_1 () Int)
(declare-fun obligation2AT_1 () Int)
(declare-fun obligation2UO_1 () Int)
(assert (>= obligation2U_1 0))
(assert (>= obligation2UA_1 0))
(assert (>= obligation2AT_1 0))
(assert (>= obligation2UO_1 0))
(declare-fun obligation2ar_1 () Int)
(assert (= obligation2ar_1 39))
(assert (=> (= (obligation2 0) 1) (let((.def_U obligation2U_1)(.def_UO obligation2UO_1) (.def_UA obligation2UA_1)(.def_AT obligation2AT_1))(and
 (member (mkTuple  2 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation2ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation3U_1 () Int)
(declare-fun obligation3UA_1 () Int)
(declare-fun obligation3AT_1 () Int)
(declare-fun obligation3UO_1 () Int)
(assert (>= obligation3U_1 0))
(assert (>= obligation3UA_1 0))
(assert (>= obligation3AT_1 0))
(assert (>= obligation3UO_1 0))
(declare-fun obligation3ar_1 () Int)
(assert (= obligation3ar_1 39))
(assert (=> (= (obligation3 0) 1) (let((.def_U obligation3U_1)(.def_UO obligation3UO_1) (.def_UA obligation3UA_1)(.def_AT obligation3AT_1))(and
 (member (mkTuple  7 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation3ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation4U_1 () Int)
(declare-fun obligation4UA_1 () Int)
(declare-fun obligation4AT_1 () Int)
(declare-fun obligation4UO_1 () Int)
(assert (>= obligation4U_1 0))
(assert (>= obligation4UA_1 0))
(assert (>= obligation4AT_1 0))
(assert (>= obligation4UO_1 0))
(declare-fun obligation4ar_1 () Int)
(assert (= obligation4ar_1 39))
(assert (=> (= (obligation4 0) 1) (let((.def_U obligation4U_1)(.def_UO obligation4UO_1) (.def_UA obligation4UA_1)(.def_AT obligation4AT_1))(and
 (member (mkTuple  9 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation4ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation5U_1 () Int)
(declare-fun obligation5UA_1 () Int)
(declare-fun obligation5AT_1 () Int)
(declare-fun obligation5UO_1 () Int)
(assert (>= obligation5U_1 0))
(assert (>= obligation5UA_1 0))
(assert (>= obligation5AT_1 0))
(assert (>= obligation5UO_1 0))
(declare-fun obligation5ar_1 () Int)
(assert (= obligation5ar_1 40))
(assert (=> (= (obligation5 0) 1) (let((.def_U obligation5U_1)(.def_UO obligation5UO_1) (.def_UA obligation5UA_1)(.def_AT obligation5AT_1))(and
 (member (mkTuple  11 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation5ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation6U_1 () Int)
(declare-fun obligation6UA_1 () Int)
(declare-fun obligation6AT_1 () Int)
(declare-fun obligation6UO_1 () Int)
(assert (>= obligation6U_1 0))
(assert (>= obligation6UA_1 0))
(assert (>= obligation6AT_1 0))
(assert (>= obligation6UO_1 0))
(declare-fun obligation6ar_1 () Int)
(assert (= obligation6ar_1 41))
(assert (=> (= (obligation6 0) 1) (let((.def_U obligation6U_1)(.def_UO obligation6UO_1) (.def_UA obligation6UA_1)(.def_AT obligation6AT_1))(and
 (member (mkTuple  13 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation6ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation7U_1 () Int)
(declare-fun obligation7UA_1 () Int)
(declare-fun obligation7AT_1 () Int)
(declare-fun obligation7UO_1 () Int)
(assert (>= obligation7U_1 0))
(assert (>= obligation7UA_1 0))
(assert (>= obligation7AT_1 0))
(assert (>= obligation7UO_1 0))
(declare-fun obligation7ar_1 () Int)
(assert (= obligation7ar_1 39))
(assert (=> (= (obligation7 0) 1) (let((.def_U obligation7U_1)(.def_UO obligation7UO_1) (.def_UA obligation7UA_1)(.def_AT obligation7AT_1))(and
 (member (mkTuple  18 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation7ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation8U_1 () Int)
(declare-fun obligation8UA_1 () Int)
(declare-fun obligation8AT_1 () Int)
(declare-fun obligation8UO_1 () Int)
(assert (>= obligation8U_1 0))
(assert (>= obligation8UA_1 0))
(assert (>= obligation8AT_1 0))
(assert (>= obligation8UO_1 0))
(declare-fun obligation8ar_1 () Int)
(assert (= obligation8ar_1 39))
(assert (=> (= (obligation8 0) 1) (let((.def_U obligation8U_1)(.def_UO obligation8UO_1) (.def_UA obligation8UA_1)(.def_AT obligation8AT_1))(and
 (member (mkTuple  1 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation8ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation9U_1 () Int)
(declare-fun obligation9UA_1 () Int)
(declare-fun obligation9AT_1 () Int)
(declare-fun obligation9UO_1 () Int)
(assert (>= obligation9U_1 0))
(assert (>= obligation9UA_1 0))
(assert (>= obligation9AT_1 0))
(assert (>= obligation9UO_1 0))
(declare-fun obligation9ar_1 () Int)
(assert (= obligation9ar_1 39))
(assert (=> (= (obligation9 0) 1) (let((.def_U obligation9U_1)(.def_UO obligation9UO_1) (.def_UA obligation9UA_1)(.def_AT obligation9AT_1))(and
 (member (mkTuple  8 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation9ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation10U_1 () Int)
(declare-fun obligation10UA_1 () Int)
(declare-fun obligation10AT_1 () Int)
(declare-fun obligation10UO_1 () Int)
(assert (>= obligation10U_1 0))
(assert (>= obligation10UA_1 0))
(assert (>= obligation10AT_1 0))
(assert (>= obligation10UO_1 0))
(declare-fun obligation10ar_1 () Int)
(assert (= obligation10ar_1 40))
(assert (=> (= (obligation10 0) 1) (let((.def_U obligation10U_1)(.def_UO obligation10UO_1) (.def_UA obligation10UA_1)(.def_AT obligation10AT_1))(and
 (member (mkTuple  4 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation10ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation11U_1 () Int)
(declare-fun obligation11UA_1 () Int)
(declare-fun obligation11AT_1 () Int)
(declare-fun obligation11UO_1 () Int)
(assert (>= obligation11U_1 0))
(assert (>= obligation11UA_1 0))
(assert (>= obligation11AT_1 0))
(assert (>= obligation11UO_1 0))
(declare-fun obligation11ar_1 () Int)
(assert (= obligation11ar_1 41))
(assert (=> (= (obligation11 0) 1) (let((.def_U obligation11U_1)(.def_UO obligation11UO_1) (.def_UA obligation11UA_1)(.def_AT obligation11AT_1))(and
 (member (mkTuple  5 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation11ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation12U_1 () Int)
(declare-fun obligation12UA_1 () Int)
(declare-fun obligation12AT_1 () Int)
(declare-fun obligation12UO_1 () Int)
(assert (>= obligation12U_1 0))
(assert (>= obligation12UA_1 0))
(assert (>= obligation12AT_1 0))
(assert (>= obligation12UO_1 0))
(declare-fun obligation12ar_1 () Int)
(assert (= obligation12ar_1 42))
(assert (=> (= (obligation12 0) 1) (let((.def_U obligation12U_1)(.def_UO obligation12UO_1) (.def_UA obligation12UA_1)(.def_AT obligation12AT_1))(and
 (member (mkTuple  5 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation12ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation13U_1 () Int)
(declare-fun obligation13UA_1 () Int)
(declare-fun obligation13AT_1 () Int)
(declare-fun obligation13UO_1 () Int)
(assert (>= obligation13U_1 0))
(assert (>= obligation13UA_1 0))
(assert (>= obligation13AT_1 0))
(assert (>= obligation13UO_1 0))
(declare-fun obligation13ar_1 () Int)
(assert (= obligation13ar_1 44))
(assert (=> (= (obligation13 0) 1) (let((.def_U obligation13U_1)(.def_UO obligation13UO_1) (.def_UA obligation13UA_1)(.def_AT obligation13AT_1))(and
 (member (mkTuple  4 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation13ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))




; 5.2 a->Eff
(assert (=> (= (obligation1 0) 1)(= (ASSOC 1)(union  (ASSOC 0) (singleton(mkTuple 2 39 16))))))(assert (=> (= (obligation1 0) 1)(= (ASSOC 1)(setminus  (ASSOC 0) (singleton(mkTuple 15 39 16))))))
(assert (=> (= (obligation2 0) 1)(= (ASSOC 1)(union  (ASSOC 0) (singleton(mkTuple 7 39 16))))))(assert (=> (= (obligation2 0) 1)(= (ASSOC 1)(union  (ASSOC 0) (singleton(mkTuple 7 34 16))))))(assert (=> (= (obligation2 0) 1)(= (ASSOC 1)(setminus  (ASSOC 0) (singleton(mkTuple 2 39 16))))))(assert (=> (= (obligation2 0) 1)(= (ASSOC 1)(setminus  (ASSOC 0) (singleton(mkTuple 2 34 16))))))
(assert (=> (= (obligation3 0) 1)(= (ASSOC 1)(union  (ASSOC 0) (singleton(mkTuple 9 39 16))))))(assert (=> (= (obligation3 0) 1)(= (ASSOC 1)(setminus  (ASSOC 0) (singleton(mkTuple 7 39 16))))))(assert (=> (= (obligation3 0) 1)(= (ASSIGN* 1)(union (join (join (union (singleton (mkTuple 12 12)) (join (ASSIGN* 0) (singleton (mkTuple 12 12)))) (singleton (mkTuple 12 3))) (union (singleton (mkTuple 3 3)) (join (singleton (mkTuple 3 3)) (ASSIGN* 0) ))) (ASSIGN* 0)))))
(assert (=> (= (obligation3 0) 1)(= (ASSIGN 1)(union (ASSIGN 0) (singleton (mkTuple 12 3))))))
(assert (=> (= (obligation4 0) 1)(= (ASSOC 1)(union  (ASSOC 0) (singleton(mkTuple 11 40 16))))))(assert (=> (= (obligation4 0) 1)(= (ASSOC 1)(setminus  (ASSOC 0) (singleton(mkTuple 9 39 16))))))(assert (=> (= (obligation4 0) 1)(= (ASSIGN 1)(setminus (ASSIGN* 0) (setminus (setminus (union (singleton (mkTuple 12 3)) (join (singleton (mkTuple 12 3)) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 12 12)) (join (ASSIGN* 0)  (singleton (mkTuple 12 12)))) (transpose (union  (singleton (mkTuple 12 12)) (join (ASSIGN* 0)  (singleton (mkTuple 12 12)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 12 3)))) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 12 12)) (join (ASSIGN* 0)  (singleton (mkTuple 12 12)))) (transpose (union  (singleton (mkTuple 12 12)) (join (ASSIGN* 0)  (singleton (mkTuple 12 12)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 12 3)))) (ASSIGN* 0)))))))
(assert (=> (= (obligation4 0) 1)(= (ASSIGN 1)(setminus (ASSIGN 0) (singleton (mkTuple 12 3))))))

(assert (=> (= (obligation5 0) 1)(= (ASSOC 1)(union  (ASSOC 0) (singleton(mkTuple 13 41 16))))))(assert (=> (= (obligation5 0) 1)(= (ASSOC 1)(setminus  (ASSOC 0) (singleton(mkTuple 11 40 16))))))
(assert (=> (= (obligation6 0) 1)(= (ASSOC 1)(union  (ASSOC 0) (singleton(mkTuple 18 39 16))))))(assert (=> (= (obligation6 0) 1)(= (ASSOC 1)(setminus  (ASSOC 0) (singleton(mkTuple 13 41 16))))))
(assert (=> (= (obligation7 0) 1)(= (ASSOC 1)(union  (ASSOC 0) (singleton(mkTuple 1 39 16))))))(assert (=> (= (obligation7 0) 1)(= (ASSOC 1)(setminus  (ASSOC 0) (singleton(mkTuple 18 39 16))))))
(assert (=> (= (obligation8 0) 1)(= (ASSOC 1)(union  (ASSOC 0) (singleton(mkTuple 8 39 16))))))(assert (=> (= (obligation8 0) 1)(= (ASSOC 1)(setminus  (ASSOC 0) (singleton(mkTuple 1 39 16))))))
(assert (=> (= (obligation9 0) 1)(= (ASSOC 1)(union  (ASSOC 0) (singleton(mkTuple 4 40 16))))))(assert (=> (= (obligation9 0) 1)(= (ASSOC 1)(setminus  (ASSOC 0) (singleton(mkTuple 8 39 16))))))
(assert (=> (= (obligation10 0) 1)(= (ASSOC 1)(union  (ASSOC 0) (singleton(mkTuple 5 41 16))))))(assert (=> (= (obligation10 0) 1)(= (ASSOC 1)(setminus  (ASSOC 0) (singleton(mkTuple 4 39 16))))))
(assert (=> (= (obligation11 0) 1)(= (ASSOC 1)(union  (ASSOC 0) (singleton(mkTuple 5 42 16))))))(assert (=> (= (obligation11 0) 1)(= (ASSOC 1)(setminus  (ASSOC 0) (singleton(mkTuple 5 41 16))))))
(assert (=> (= (obligation12 0) 1)(= (ASSOC 1)(union  (ASSOC 0) (singleton(mkTuple 4 44 16))))))(assert (=> (= (obligation12 0) 1)(= (ASSOC 1)(setminus  (ASSOC 0) (singleton(mkTuple 5 42 16))))))
(assert (=> (= (obligation13 0) 1)(= (ASSOC 1)(union  (ASSOC 0) (singleton(mkTuple 5 44 16))))))(assert (=> (= (obligation13 0) 1)(= (ASSOC 1)(setminus  (ASSOC 0) (singleton(mkTuple 4 44 16))))))


; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 1) (ASSIGN* 0))
(or 
(= (obligation13 0) 1)(= (obligation7 0) 1)(= (obligation6 0) 1)(= (obligation9 0) 1)(= (obligation8 0) 1)(= (obligation3 0) 1)(= (obligation2 0) 1)(= (obligation5 0) 1)(= (obligation4 0) 1)(= (obligation1 0) 1)(= (obligation12 0) 1)(= (obligation11 0) 1)(= (obligation10 0) 1))))
(assert (=> (distinct (ASSOC 1) (ASSOC 0))
(or 
(= (obligation13 0) 1)(= (obligation7 0) 1)(= (obligation6 0) 1)(= (obligation9 0) 1)(= (obligation8 0) 1)(= (obligation3 0) 1)(= (obligation2 0) 1)(= (obligation5 0) 1)(= (obligation4 0) 1)(= (obligation1 0) 1)(= (obligation12 0) 1)(= (obligation11 0) 1)(= (obligation10 0) 1))))


; 5.4 Exactly one naive


; AT MOST ONE
(assert (not (and (= (obligation13 0) 1) (= (obligation7 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation6 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation9 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation8 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation3 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation2 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation5 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation6 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation9 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation8 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation3 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation2 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation5 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation9 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation8 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation3 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation2 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation5 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation8 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation3 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation2 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation5 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation3 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation2 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation5 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation3 0) 1) (= (obligation2 0) 1))))
(assert (not (and (= (obligation3 0) 1) (= (obligation5 0) 1))))
(assert (not (and (= (obligation3 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation3 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation3 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation3 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation3 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation2 0) 1) (= (obligation5 0) 1))))
(assert (not (and (= (obligation2 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation2 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation2 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation2 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation2 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation5 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation5 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation5 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation5 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation5 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation4 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation4 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation4 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation4 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation1 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation1 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation1 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation12 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation12 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation11 0) 1) (= (obligation10 0) 1))))

; AT LEAST ONE
(assert (or(= (obligation13 0) 1)(= (obligation7 0) 1)(= (obligation6 0) 1)(= (obligation9 0) 1)(= (obligation8 0) 1)(= (obligation3 0) 1)(= (obligation2 0) 1)(= (obligation5 0) 1)(= (obligation4 0) 1)(= (obligation1 0) 1)(= (obligation12 0) 1)(= (obligation11 0) 1)(= (obligation10 0) 1)))


;--------------------------------------------------------------------------------------------------------------------
;STEP2

; 5.1 a->PRE
(declare-fun obligation1U_2 () Int)
(declare-fun obligation1UA_2 () Int)
(declare-fun obligation1AT_2 () Int)
(declare-fun obligation1UO_2 () Int)
(assert (>= obligation1U_2 0))
(assert (>= obligation1UA_2 0))
(assert (>= obligation1AT_2 0))
(assert (>= obligation1UO_2 0))
(declare-fun obligation1ar_2 () Int)
(assert (= obligation1ar_2 40))
(assert (=> (= (obligation1 1) 1) (let((.def_U obligation1U_2)(.def_UO obligation1UO_2) (.def_UA obligation1UA_2)(.def_AT obligation1AT_2))(and
 (member (mkTuple  15 .def_UA) (ASSIGN* 1))
(member (mkTuple .def_UA obligation1ar_2 .def_AT) (ASSOC 1))
 (member (mkTuple  16 .def_AT) (ASSIGN* 1))
))))


(declare-fun obligation2U_2 () Int)
(declare-fun obligation2UA_2 () Int)
(declare-fun obligation2AT_2 () Int)
(declare-fun obligation2UO_2 () Int)
(assert (>= obligation2U_2 0))
(assert (>= obligation2UA_2 0))
(assert (>= obligation2AT_2 0))
(assert (>= obligation2UO_2 0))
(declare-fun obligation2ar_2 () Int)
(assert (= obligation2ar_2 39))
(assert (=> (= (obligation2 1) 1) (let((.def_U obligation2U_2)(.def_UO obligation2UO_2) (.def_UA obligation2UA_2)(.def_AT obligation2AT_2))(and
 (member (mkTuple  2 .def_UA) (ASSIGN* 1))
(member (mkTuple .def_UA obligation2ar_2 .def_AT) (ASSOC 1))
 (member (mkTuple  16 .def_AT) (ASSIGN* 1))
))))


(declare-fun obligation3U_2 () Int)
(declare-fun obligation3UA_2 () Int)
(declare-fun obligation3AT_2 () Int)
(declare-fun obligation3UO_2 () Int)
(assert (>= obligation3U_2 0))
(assert (>= obligation3UA_2 0))
(assert (>= obligation3AT_2 0))
(assert (>= obligation3UO_2 0))
(declare-fun obligation3ar_2 () Int)
(assert (= obligation3ar_2 39))
(assert (=> (= (obligation3 1) 1) (let((.def_U obligation3U_2)(.def_UO obligation3UO_2) (.def_UA obligation3UA_2)(.def_AT obligation3AT_2))(and
 (member (mkTuple  7 .def_UA) (ASSIGN* 1))
(member (mkTuple .def_UA obligation3ar_2 .def_AT) (ASSOC 1))
 (member (mkTuple  16 .def_AT) (ASSIGN* 1))
))))


(declare-fun obligation4U_2 () Int)
(declare-fun obligation4UA_2 () Int)
(declare-fun obligation4AT_2 () Int)
(declare-fun obligation4UO_2 () Int)
(assert (>= obligation4U_2 0))
(assert (>= obligation4UA_2 0))
(assert (>= obligation4AT_2 0))
(assert (>= obligation4UO_2 0))
(declare-fun obligation4ar_2 () Int)
(assert (= obligation4ar_2 39))
(assert (=> (= (obligation4 1) 1) (let((.def_U obligation4U_2)(.def_UO obligation4UO_2) (.def_UA obligation4UA_2)(.def_AT obligation4AT_2))(and
 (member (mkTuple  9 .def_UA) (ASSIGN* 1))
(member (mkTuple .def_UA obligation4ar_2 .def_AT) (ASSOC 1))
 (member (mkTuple  16 .def_AT) (ASSIGN* 1))
))))


(declare-fun obligation5U_2 () Int)
(declare-fun obligation5UA_2 () Int)
(declare-fun obligation5AT_2 () Int)
(declare-fun obligation5UO_2 () Int)
(assert (>= obligation5U_2 0))
(assert (>= obligation5UA_2 0))
(assert (>= obligation5AT_2 0))
(assert (>= obligation5UO_2 0))
(declare-fun obligation5ar_2 () Int)
(assert (= obligation5ar_2 40))
(assert (=> (= (obligation5 1) 1) (let((.def_U obligation5U_2)(.def_UO obligation5UO_2) (.def_UA obligation5UA_2)(.def_AT obligation5AT_2))(and
 (member (mkTuple  11 .def_UA) (ASSIGN* 1))
(member (mkTuple .def_UA obligation5ar_2 .def_AT) (ASSOC 1))
 (member (mkTuple  16 .def_AT) (ASSIGN* 1))
))))


(declare-fun obligation6U_2 () Int)
(declare-fun obligation6UA_2 () Int)
(declare-fun obligation6AT_2 () Int)
(declare-fun obligation6UO_2 () Int)
(assert (>= obligation6U_2 0))
(assert (>= obligation6UA_2 0))
(assert (>= obligation6AT_2 0))
(assert (>= obligation6UO_2 0))
(declare-fun obligation6ar_2 () Int)
(assert (= obligation6ar_2 41))
(assert (=> (= (obligation6 1) 1) (let((.def_U obligation6U_2)(.def_UO obligation6UO_2) (.def_UA obligation6UA_2)(.def_AT obligation6AT_2))(and
 (member (mkTuple  13 .def_UA) (ASSIGN* 1))
(member (mkTuple .def_UA obligation6ar_2 .def_AT) (ASSOC 1))
 (member (mkTuple  16 .def_AT) (ASSIGN* 1))
))))


(declare-fun obligation7U_2 () Int)
(declare-fun obligation7UA_2 () Int)
(declare-fun obligation7AT_2 () Int)
(declare-fun obligation7UO_2 () Int)
(assert (>= obligation7U_2 0))
(assert (>= obligation7UA_2 0))
(assert (>= obligation7AT_2 0))
(assert (>= obligation7UO_2 0))
(declare-fun obligation7ar_2 () Int)
(assert (= obligation7ar_2 39))
(assert (=> (= (obligation7 1) 1) (let((.def_U obligation7U_2)(.def_UO obligation7UO_2) (.def_UA obligation7UA_2)(.def_AT obligation7AT_2))(and
 (member (mkTuple  18 .def_UA) (ASSIGN* 1))
(member (mkTuple .def_UA obligation7ar_2 .def_AT) (ASSOC 1))
 (member (mkTuple  16 .def_AT) (ASSIGN* 1))
))))


(declare-fun obligation8U_2 () Int)
(declare-fun obligation8UA_2 () Int)
(declare-fun obligation8AT_2 () Int)
(declare-fun obligation8UO_2 () Int)
(assert (>= obligation8U_2 0))
(assert (>= obligation8UA_2 0))
(assert (>= obligation8AT_2 0))
(assert (>= obligation8UO_2 0))
(declare-fun obligation8ar_2 () Int)
(assert (= obligation8ar_2 39))
(assert (=> (= (obligation8 1) 1) (let((.def_U obligation8U_2)(.def_UO obligation8UO_2) (.def_UA obligation8UA_2)(.def_AT obligation8AT_2))(and
 (member (mkTuple  1 .def_UA) (ASSIGN* 1))
(member (mkTuple .def_UA obligation8ar_2 .def_AT) (ASSOC 1))
 (member (mkTuple  16 .def_AT) (ASSIGN* 1))
))))


(declare-fun obligation9U_2 () Int)
(declare-fun obligation9UA_2 () Int)
(declare-fun obligation9AT_2 () Int)
(declare-fun obligation9UO_2 () Int)
(assert (>= obligation9U_2 0))
(assert (>= obligation9UA_2 0))
(assert (>= obligation9AT_2 0))
(assert (>= obligation9UO_2 0))
(declare-fun obligation9ar_2 () Int)
(assert (= obligation9ar_2 39))
(assert (=> (= (obligation9 1) 1) (let((.def_U obligation9U_2)(.def_UO obligation9UO_2) (.def_UA obligation9UA_2)(.def_AT obligation9AT_2))(and
 (member (mkTuple  8 .def_UA) (ASSIGN* 1))
(member (mkTuple .def_UA obligation9ar_2 .def_AT) (ASSOC 1))
 (member (mkTuple  16 .def_AT) (ASSIGN* 1))
))))


(declare-fun obligation10U_2 () Int)
(declare-fun obligation10UA_2 () Int)
(declare-fun obligation10AT_2 () Int)
(declare-fun obligation10UO_2 () Int)
(assert (>= obligation10U_2 0))
(assert (>= obligation10UA_2 0))
(assert (>= obligation10AT_2 0))
(assert (>= obligation10UO_2 0))
(declare-fun obligation10ar_2 () Int)
(assert (= obligation10ar_2 40))
(assert (=> (= (obligation10 1) 1) (let((.def_U obligation10U_2)(.def_UO obligation10UO_2) (.def_UA obligation10UA_2)(.def_AT obligation10AT_2))(and
 (member (mkTuple  4 .def_UA) (ASSIGN* 1))
(member (mkTuple .def_UA obligation10ar_2 .def_AT) (ASSOC 1))
 (member (mkTuple  16 .def_AT) (ASSIGN* 1))
))))


(declare-fun obligation11U_2 () Int)
(declare-fun obligation11UA_2 () Int)
(declare-fun obligation11AT_2 () Int)
(declare-fun obligation11UO_2 () Int)
(assert (>= obligation11U_2 0))
(assert (>= obligation11UA_2 0))
(assert (>= obligation11AT_2 0))
(assert (>= obligation11UO_2 0))
(declare-fun obligation11ar_2 () Int)
(assert (= obligation11ar_2 41))
(assert (=> (= (obligation11 1) 1) (let((.def_U obligation11U_2)(.def_UO obligation11UO_2) (.def_UA obligation11UA_2)(.def_AT obligation11AT_2))(and
 (member (mkTuple  5 .def_UA) (ASSIGN* 1))
(member (mkTuple .def_UA obligation11ar_2 .def_AT) (ASSOC 1))
 (member (mkTuple  16 .def_AT) (ASSIGN* 1))
))))


(declare-fun obligation12U_2 () Int)
(declare-fun obligation12UA_2 () Int)
(declare-fun obligation12AT_2 () Int)
(declare-fun obligation12UO_2 () Int)
(assert (>= obligation12U_2 0))
(assert (>= obligation12UA_2 0))
(assert (>= obligation12AT_2 0))
(assert (>= obligation12UO_2 0))
(declare-fun obligation12ar_2 () Int)
(assert (= obligation12ar_2 42))
(assert (=> (= (obligation12 1) 1) (let((.def_U obligation12U_2)(.def_UO obligation12UO_2) (.def_UA obligation12UA_2)(.def_AT obligation12AT_2))(and
 (member (mkTuple  5 .def_UA) (ASSIGN* 1))
(member (mkTuple .def_UA obligation12ar_2 .def_AT) (ASSOC 1))
 (member (mkTuple  16 .def_AT) (ASSIGN* 1))
))))


(declare-fun obligation13U_2 () Int)
(declare-fun obligation13UA_2 () Int)
(declare-fun obligation13AT_2 () Int)
(declare-fun obligation13UO_2 () Int)
(assert (>= obligation13U_2 0))
(assert (>= obligation13UA_2 0))
(assert (>= obligation13AT_2 0))
(assert (>= obligation13UO_2 0))
(declare-fun obligation13ar_2 () Int)
(assert (= obligation13ar_2 44))
(assert (=> (= (obligation13 1) 1) (let((.def_U obligation13U_2)(.def_UO obligation13UO_2) (.def_UA obligation13UA_2)(.def_AT obligation13AT_2))(and
 (member (mkTuple  4 .def_UA) (ASSIGN* 1))
(member (mkTuple .def_UA obligation13ar_2 .def_AT) (ASSOC 1))
 (member (mkTuple  16 .def_AT) (ASSIGN* 1))
))))




; 5.2 a->Eff
(assert (=> (= (obligation1 1) 1)(= (ASSOC 2)(union  (ASSOC 1) (singleton(mkTuple 2 39 16))))))(assert (=> (= (obligation1 1) 1)(= (ASSOC 2)(setminus  (ASSOC 1) (singleton(mkTuple 15 39 16))))))
(assert (=> (= (obligation2 1) 1)(= (ASSOC 2)(union  (ASSOC 1) (singleton(mkTuple 7 39 16))))))(assert (=> (= (obligation2 1) 1)(= (ASSOC 2)(union  (ASSOC 1) (singleton(mkTuple 7 34 16))))))(assert (=> (= (obligation2 1) 1)(= (ASSOC 2)(setminus  (ASSOC 1) (singleton(mkTuple 2 39 16))))))(assert (=> (= (obligation2 1) 1)(= (ASSOC 2)(setminus  (ASSOC 1) (singleton(mkTuple 2 34 16))))))
(assert (=> (= (obligation3 1) 1)(= (ASSOC 2)(union  (ASSOC 1) (singleton(mkTuple 9 39 16))))))(assert (=> (= (obligation3 1) 1)(= (ASSOC 2)(setminus  (ASSOC 1) (singleton(mkTuple 7 39 16))))))(assert (=> (= (obligation3 1) 1)(= (ASSIGN* 2)(union (join (join (union (singleton (mkTuple 12 12)) (join (ASSIGN* 1) (singleton (mkTuple 12 12)))) (singleton (mkTuple 12 3))) (union (singleton (mkTuple 3 3)) (join (singleton (mkTuple 3 3)) (ASSIGN* 1) ))) (ASSIGN* 1)))))
(assert (=> (= (obligation3 1) 1)(= (ASSIGN 2)(union (ASSIGN 1) (singleton (mkTuple 12 3))))))
(assert (=> (= (obligation4 1) 1)(= (ASSOC 2)(union  (ASSOC 1) (singleton(mkTuple 11 40 16))))))(assert (=> (= (obligation4 1) 1)(= (ASSOC 2)(setminus  (ASSOC 1) (singleton(mkTuple 9 39 16))))))(assert (=> (= (obligation4 1) 1)(= (ASSIGN 2)(setminus (ASSIGN* 1) (setminus (setminus (union (singleton (mkTuple 12 3)) (join (singleton (mkTuple 12 3)) (ASSIGN* 1))) (join (join (intersection (join (union  (singleton (mkTuple 12 12)) (join (ASSIGN* 1)  (singleton (mkTuple 12 12)))) (transpose (union  (singleton (mkTuple 12 12)) (join (ASSIGN* 1)  (singleton (mkTuple 12 12)))))) NODES) (setminus (ASSIGN 1) (singleton (mkTuple 12 3)))) (ASSIGN* 1))) (join (join (intersection (join (union  (singleton (mkTuple 12 12)) (join (ASSIGN* 1)  (singleton (mkTuple 12 12)))) (transpose (union  (singleton (mkTuple 12 12)) (join (ASSIGN* 1)  (singleton (mkTuple 12 12)))))) NODES) (setminus (ASSIGN 1) (singleton (mkTuple 12 3)))) (ASSIGN* 1)))))))
(assert (=> (= (obligation4 1) 1)(= (ASSIGN 2)(setminus (ASSIGN 1) (singleton (mkTuple 12 3))))))

(assert (=> (= (obligation5 1) 1)(= (ASSOC 2)(union  (ASSOC 1) (singleton(mkTuple 13 41 16))))))(assert (=> (= (obligation5 1) 1)(= (ASSOC 2)(setminus  (ASSOC 1) (singleton(mkTuple 11 40 16))))))
(assert (=> (= (obligation6 1) 1)(= (ASSOC 2)(union  (ASSOC 1) (singleton(mkTuple 18 39 16))))))(assert (=> (= (obligation6 1) 1)(= (ASSOC 2)(setminus  (ASSOC 1) (singleton(mkTuple 13 41 16))))))
(assert (=> (= (obligation7 1) 1)(= (ASSOC 2)(union  (ASSOC 1) (singleton(mkTuple 1 39 16))))))(assert (=> (= (obligation7 1) 1)(= (ASSOC 2)(setminus  (ASSOC 1) (singleton(mkTuple 18 39 16))))))
(assert (=> (= (obligation8 1) 1)(= (ASSOC 2)(union  (ASSOC 1) (singleton(mkTuple 8 39 16))))))(assert (=> (= (obligation8 1) 1)(= (ASSOC 2)(setminus  (ASSOC 1) (singleton(mkTuple 1 39 16))))))
(assert (=> (= (obligation9 1) 1)(= (ASSOC 2)(union  (ASSOC 1) (singleton(mkTuple 4 40 16))))))(assert (=> (= (obligation9 1) 1)(= (ASSOC 2)(setminus  (ASSOC 1) (singleton(mkTuple 8 39 16))))))
(assert (=> (= (obligation10 1) 1)(= (ASSOC 2)(union  (ASSOC 1) (singleton(mkTuple 5 41 16))))))(assert (=> (= (obligation10 1) 1)(= (ASSOC 2)(setminus  (ASSOC 1) (singleton(mkTuple 4 39 16))))))
(assert (=> (= (obligation11 1) 1)(= (ASSOC 2)(union  (ASSOC 1) (singleton(mkTuple 5 42 16))))))(assert (=> (= (obligation11 1) 1)(= (ASSOC 2)(setminus  (ASSOC 1) (singleton(mkTuple 5 41 16))))))
(assert (=> (= (obligation12 1) 1)(= (ASSOC 2)(union  (ASSOC 1) (singleton(mkTuple 4 44 16))))))(assert (=> (= (obligation12 1) 1)(= (ASSOC 2)(setminus  (ASSOC 1) (singleton(mkTuple 5 42 16))))))
(assert (=> (= (obligation13 1) 1)(= (ASSOC 2)(union  (ASSOC 1) (singleton(mkTuple 5 44 16))))))(assert (=> (= (obligation13 1) 1)(= (ASSOC 2)(setminus  (ASSOC 1) (singleton(mkTuple 4 44 16))))))


; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 2) (ASSIGN* 1))
(or 
(= (obligation13 0) 1)(= (obligation7 0) 1)(= (obligation6 0) 1)(= (obligation9 0) 1)(= (obligation8 0) 1)(= (obligation3 0) 1)(= (obligation2 0) 1)(= (obligation5 0) 1)(= (obligation4 0) 1)(= (obligation1 0) 1)(= (obligation12 0) 1)(= (obligation11 0) 1)(= (obligation10 0) 1))))
(assert (=> (distinct (ASSOC 2) (ASSOC 1))
(or 
(= (obligation13 0) 1)(= (obligation7 0) 1)(= (obligation6 0) 1)(= (obligation9 0) 1)(= (obligation8 0) 1)(= (obligation3 0) 1)(= (obligation2 0) 1)(= (obligation5 0) 1)(= (obligation4 0) 1)(= (obligation1 0) 1)(= (obligation12 0) 1)(= (obligation11 0) 1)(= (obligation10 0) 1))))


; 5.4 Exactly one naive


; AT MOST ONE
(assert (not (and (= (obligation13 0) 1) (= (obligation7 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation6 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation9 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation8 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation3 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation2 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation5 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation6 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation9 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation8 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation3 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation2 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation5 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation9 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation8 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation3 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation2 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation5 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation8 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation3 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation2 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation5 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation3 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation2 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation5 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation3 0) 1) (= (obligation2 0) 1))))
(assert (not (and (= (obligation3 0) 1) (= (obligation5 0) 1))))
(assert (not (and (= (obligation3 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation3 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation3 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation3 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation3 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation2 0) 1) (= (obligation5 0) 1))))
(assert (not (and (= (obligation2 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation2 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation2 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation2 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation2 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation5 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation5 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation5 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation5 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation5 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation4 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation4 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation4 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation4 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation1 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation1 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation1 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation12 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation12 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation11 0) 1) (= (obligation10 0) 1))))

; AT LEAST ONE
(assert (or(= (obligation13 0) 1)(= (obligation7 0) 1)(= (obligation6 0) 1)(= (obligation9 0) 1)(= (obligation8 0) 1)(= (obligation3 0) 1)(= (obligation2 0) 1)(= (obligation5 0) 1)(= (obligation4 0) 1)(= (obligation1 0) 1)(= (obligation12 0) 1)(= (obligation11 0) 1)(= (obligation10 0) 1)))


;--------------------------------------------------------------------------------------------------------------------
;STEP3

; 5.1 a->PRE
(declare-fun obligation1U_3 () Int)
(declare-fun obligation1UA_3 () Int)
(declare-fun obligation1AT_3 () Int)
(declare-fun obligation1UO_3 () Int)
(assert (>= obligation1U_3 0))
(assert (>= obligation1UA_3 0))
(assert (>= obligation1AT_3 0))
(assert (>= obligation1UO_3 0))
(declare-fun obligation1ar_3 () Int)
(assert (= obligation1ar_3 40))
(assert (=> (= (obligation1 2) 1) (let((.def_U obligation1U_3)(.def_UO obligation1UO_3) (.def_UA obligation1UA_3)(.def_AT obligation1AT_3))(and
 (member (mkTuple  15 .def_UA) (ASSIGN* 2))
(member (mkTuple .def_UA obligation1ar_3 .def_AT) (ASSOC 2))
 (member (mkTuple  16 .def_AT) (ASSIGN* 2))
))))


(declare-fun obligation2U_3 () Int)
(declare-fun obligation2UA_3 () Int)
(declare-fun obligation2AT_3 () Int)
(declare-fun obligation2UO_3 () Int)
(assert (>= obligation2U_3 0))
(assert (>= obligation2UA_3 0))
(assert (>= obligation2AT_3 0))
(assert (>= obligation2UO_3 0))
(declare-fun obligation2ar_3 () Int)
(assert (= obligation2ar_3 39))
(assert (=> (= (obligation2 2) 1) (let((.def_U obligation2U_3)(.def_UO obligation2UO_3) (.def_UA obligation2UA_3)(.def_AT obligation2AT_3))(and
 (member (mkTuple  2 .def_UA) (ASSIGN* 2))
(member (mkTuple .def_UA obligation2ar_3 .def_AT) (ASSOC 2))
 (member (mkTuple  16 .def_AT) (ASSIGN* 2))
))))


(declare-fun obligation3U_3 () Int)
(declare-fun obligation3UA_3 () Int)
(declare-fun obligation3AT_3 () Int)
(declare-fun obligation3UO_3 () Int)
(assert (>= obligation3U_3 0))
(assert (>= obligation3UA_3 0))
(assert (>= obligation3AT_3 0))
(assert (>= obligation3UO_3 0))
(declare-fun obligation3ar_3 () Int)
(assert (= obligation3ar_3 39))
(assert (=> (= (obligation3 2) 1) (let((.def_U obligation3U_3)(.def_UO obligation3UO_3) (.def_UA obligation3UA_3)(.def_AT obligation3AT_3))(and
 (member (mkTuple  7 .def_UA) (ASSIGN* 2))
(member (mkTuple .def_UA obligation3ar_3 .def_AT) (ASSOC 2))
 (member (mkTuple  16 .def_AT) (ASSIGN* 2))
))))


(declare-fun obligation4U_3 () Int)
(declare-fun obligation4UA_3 () Int)
(declare-fun obligation4AT_3 () Int)
(declare-fun obligation4UO_3 () Int)
(assert (>= obligation4U_3 0))
(assert (>= obligation4UA_3 0))
(assert (>= obligation4AT_3 0))
(assert (>= obligation4UO_3 0))
(declare-fun obligation4ar_3 () Int)
(assert (= obligation4ar_3 39))
(assert (=> (= (obligation4 2) 1) (let((.def_U obligation4U_3)(.def_UO obligation4UO_3) (.def_UA obligation4UA_3)(.def_AT obligation4AT_3))(and
 (member (mkTuple  9 .def_UA) (ASSIGN* 2))
(member (mkTuple .def_UA obligation4ar_3 .def_AT) (ASSOC 2))
 (member (mkTuple  16 .def_AT) (ASSIGN* 2))
))))


(declare-fun obligation5U_3 () Int)
(declare-fun obligation5UA_3 () Int)
(declare-fun obligation5AT_3 () Int)
(declare-fun obligation5UO_3 () Int)
(assert (>= obligation5U_3 0))
(assert (>= obligation5UA_3 0))
(assert (>= obligation5AT_3 0))
(assert (>= obligation5UO_3 0))
(declare-fun obligation5ar_3 () Int)
(assert (= obligation5ar_3 40))
(assert (=> (= (obligation5 2) 1) (let((.def_U obligation5U_3)(.def_UO obligation5UO_3) (.def_UA obligation5UA_3)(.def_AT obligation5AT_3))(and
 (member (mkTuple  11 .def_UA) (ASSIGN* 2))
(member (mkTuple .def_UA obligation5ar_3 .def_AT) (ASSOC 2))
 (member (mkTuple  16 .def_AT) (ASSIGN* 2))
))))


(declare-fun obligation6U_3 () Int)
(declare-fun obligation6UA_3 () Int)
(declare-fun obligation6AT_3 () Int)
(declare-fun obligation6UO_3 () Int)
(assert (>= obligation6U_3 0))
(assert (>= obligation6UA_3 0))
(assert (>= obligation6AT_3 0))
(assert (>= obligation6UO_3 0))
(declare-fun obligation6ar_3 () Int)
(assert (= obligation6ar_3 41))
(assert (=> (= (obligation6 2) 1) (let((.def_U obligation6U_3)(.def_UO obligation6UO_3) (.def_UA obligation6UA_3)(.def_AT obligation6AT_3))(and
 (member (mkTuple  13 .def_UA) (ASSIGN* 2))
(member (mkTuple .def_UA obligation6ar_3 .def_AT) (ASSOC 2))
 (member (mkTuple  16 .def_AT) (ASSIGN* 2))
))))


(declare-fun obligation7U_3 () Int)
(declare-fun obligation7UA_3 () Int)
(declare-fun obligation7AT_3 () Int)
(declare-fun obligation7UO_3 () Int)
(assert (>= obligation7U_3 0))
(assert (>= obligation7UA_3 0))
(assert (>= obligation7AT_3 0))
(assert (>= obligation7UO_3 0))
(declare-fun obligation7ar_3 () Int)
(assert (= obligation7ar_3 39))
(assert (=> (= (obligation7 2) 1) (let((.def_U obligation7U_3)(.def_UO obligation7UO_3) (.def_UA obligation7UA_3)(.def_AT obligation7AT_3))(and
 (member (mkTuple  18 .def_UA) (ASSIGN* 2))
(member (mkTuple .def_UA obligation7ar_3 .def_AT) (ASSOC 2))
 (member (mkTuple  16 .def_AT) (ASSIGN* 2))
))))


(declare-fun obligation8U_3 () Int)
(declare-fun obligation8UA_3 () Int)
(declare-fun obligation8AT_3 () Int)
(declare-fun obligation8UO_3 () Int)
(assert (>= obligation8U_3 0))
(assert (>= obligation8UA_3 0))
(assert (>= obligation8AT_3 0))
(assert (>= obligation8UO_3 0))
(declare-fun obligation8ar_3 () Int)
(assert (= obligation8ar_3 39))
(assert (=> (= (obligation8 2) 1) (let((.def_U obligation8U_3)(.def_UO obligation8UO_3) (.def_UA obligation8UA_3)(.def_AT obligation8AT_3))(and
 (member (mkTuple  1 .def_UA) (ASSIGN* 2))
(member (mkTuple .def_UA obligation8ar_3 .def_AT) (ASSOC 2))
 (member (mkTuple  16 .def_AT) (ASSIGN* 2))
))))


(declare-fun obligation9U_3 () Int)
(declare-fun obligation9UA_3 () Int)
(declare-fun obligation9AT_3 () Int)
(declare-fun obligation9UO_3 () Int)
(assert (>= obligation9U_3 0))
(assert (>= obligation9UA_3 0))
(assert (>= obligation9AT_3 0))
(assert (>= obligation9UO_3 0))
(declare-fun obligation9ar_3 () Int)
(assert (= obligation9ar_3 39))
(assert (=> (= (obligation9 2) 1) (let((.def_U obligation9U_3)(.def_UO obligation9UO_3) (.def_UA obligation9UA_3)(.def_AT obligation9AT_3))(and
 (member (mkTuple  8 .def_UA) (ASSIGN* 2))
(member (mkTuple .def_UA obligation9ar_3 .def_AT) (ASSOC 2))
 (member (mkTuple  16 .def_AT) (ASSIGN* 2))
))))


(declare-fun obligation10U_3 () Int)
(declare-fun obligation10UA_3 () Int)
(declare-fun obligation10AT_3 () Int)
(declare-fun obligation10UO_3 () Int)
(assert (>= obligation10U_3 0))
(assert (>= obligation10UA_3 0))
(assert (>= obligation10AT_3 0))
(assert (>= obligation10UO_3 0))
(declare-fun obligation10ar_3 () Int)
(assert (= obligation10ar_3 40))
(assert (=> (= (obligation10 2) 1) (let((.def_U obligation10U_3)(.def_UO obligation10UO_3) (.def_UA obligation10UA_3)(.def_AT obligation10AT_3))(and
 (member (mkTuple  4 .def_UA) (ASSIGN* 2))
(member (mkTuple .def_UA obligation10ar_3 .def_AT) (ASSOC 2))
 (member (mkTuple  16 .def_AT) (ASSIGN* 2))
))))


(declare-fun obligation11U_3 () Int)
(declare-fun obligation11UA_3 () Int)
(declare-fun obligation11AT_3 () Int)
(declare-fun obligation11UO_3 () Int)
(assert (>= obligation11U_3 0))
(assert (>= obligation11UA_3 0))
(assert (>= obligation11AT_3 0))
(assert (>= obligation11UO_3 0))
(declare-fun obligation11ar_3 () Int)
(assert (= obligation11ar_3 41))
(assert (=> (= (obligation11 2) 1) (let((.def_U obligation11U_3)(.def_UO obligation11UO_3) (.def_UA obligation11UA_3)(.def_AT obligation11AT_3))(and
 (member (mkTuple  5 .def_UA) (ASSIGN* 2))
(member (mkTuple .def_UA obligation11ar_3 .def_AT) (ASSOC 2))
 (member (mkTuple  16 .def_AT) (ASSIGN* 2))
))))


(declare-fun obligation12U_3 () Int)
(declare-fun obligation12UA_3 () Int)
(declare-fun obligation12AT_3 () Int)
(declare-fun obligation12UO_3 () Int)
(assert (>= obligation12U_3 0))
(assert (>= obligation12UA_3 0))
(assert (>= obligation12AT_3 0))
(assert (>= obligation12UO_3 0))
(declare-fun obligation12ar_3 () Int)
(assert (= obligation12ar_3 42))
(assert (=> (= (obligation12 2) 1) (let((.def_U obligation12U_3)(.def_UO obligation12UO_3) (.def_UA obligation12UA_3)(.def_AT obligation12AT_3))(and
 (member (mkTuple  5 .def_UA) (ASSIGN* 2))
(member (mkTuple .def_UA obligation12ar_3 .def_AT) (ASSOC 2))
 (member (mkTuple  16 .def_AT) (ASSIGN* 2))
))))


(declare-fun obligation13U_3 () Int)
(declare-fun obligation13UA_3 () Int)
(declare-fun obligation13AT_3 () Int)
(declare-fun obligation13UO_3 () Int)
(assert (>= obligation13U_3 0))
(assert (>= obligation13UA_3 0))
(assert (>= obligation13AT_3 0))
(assert (>= obligation13UO_3 0))
(declare-fun obligation13ar_3 () Int)
(assert (= obligation13ar_3 44))
(assert (=> (= (obligation13 2) 1) (let((.def_U obligation13U_3)(.def_UO obligation13UO_3) (.def_UA obligation13UA_3)(.def_AT obligation13AT_3))(and
 (member (mkTuple  4 .def_UA) (ASSIGN* 2))
(member (mkTuple .def_UA obligation13ar_3 .def_AT) (ASSOC 2))
 (member (mkTuple  16 .def_AT) (ASSIGN* 2))
))))




; 5.2 a->Eff
(assert (=> (= (obligation1 2) 1)(= (ASSOC 3)(union  (ASSOC 2) (singleton(mkTuple 2 39 16))))))(assert (=> (= (obligation1 2) 1)(= (ASSOC 3)(setminus  (ASSOC 2) (singleton(mkTuple 15 39 16))))))
(assert (=> (= (obligation2 2) 1)(= (ASSOC 3)(union  (ASSOC 2) (singleton(mkTuple 7 39 16))))))(assert (=> (= (obligation2 2) 1)(= (ASSOC 3)(union  (ASSOC 2) (singleton(mkTuple 7 34 16))))))(assert (=> (= (obligation2 2) 1)(= (ASSOC 3)(setminus  (ASSOC 2) (singleton(mkTuple 2 39 16))))))(assert (=> (= (obligation2 2) 1)(= (ASSOC 3)(setminus  (ASSOC 2) (singleton(mkTuple 2 34 16))))))
(assert (=> (= (obligation3 2) 1)(= (ASSOC 3)(union  (ASSOC 2) (singleton(mkTuple 9 39 16))))))(assert (=> (= (obligation3 2) 1)(= (ASSOC 3)(setminus  (ASSOC 2) (singleton(mkTuple 7 39 16))))))(assert (=> (= (obligation3 2) 1)(= (ASSIGN* 3)(union (join (join (union (singleton (mkTuple 12 12)) (join (ASSIGN* 2) (singleton (mkTuple 12 12)))) (singleton (mkTuple 12 3))) (union (singleton (mkTuple 3 3)) (join (singleton (mkTuple 3 3)) (ASSIGN* 2) ))) (ASSIGN* 2)))))
(assert (=> (= (obligation3 2) 1)(= (ASSIGN 3)(union (ASSIGN 2) (singleton (mkTuple 12 3))))))
(assert (=> (= (obligation4 2) 1)(= (ASSOC 3)(union  (ASSOC 2) (singleton(mkTuple 11 40 16))))))(assert (=> (= (obligation4 2) 1)(= (ASSOC 3)(setminus  (ASSOC 2) (singleton(mkTuple 9 39 16))))))(assert (=> (= (obligation4 2) 1)(= (ASSIGN 3)(setminus (ASSIGN* 2) (setminus (setminus (union (singleton (mkTuple 12 3)) (join (singleton (mkTuple 12 3)) (ASSIGN* 2))) (join (join (intersection (join (union  (singleton (mkTuple 12 12)) (join (ASSIGN* 2)  (singleton (mkTuple 12 12)))) (transpose (union  (singleton (mkTuple 12 12)) (join (ASSIGN* 2)  (singleton (mkTuple 12 12)))))) NODES) (setminus (ASSIGN 2) (singleton (mkTuple 12 3)))) (ASSIGN* 2))) (join (join (intersection (join (union  (singleton (mkTuple 12 12)) (join (ASSIGN* 2)  (singleton (mkTuple 12 12)))) (transpose (union  (singleton (mkTuple 12 12)) (join (ASSIGN* 2)  (singleton (mkTuple 12 12)))))) NODES) (setminus (ASSIGN 2) (singleton (mkTuple 12 3)))) (ASSIGN* 2)))))))
(assert (=> (= (obligation4 2) 1)(= (ASSIGN 3)(setminus (ASSIGN 2) (singleton (mkTuple 12 3))))))

(assert (=> (= (obligation5 2) 1)(= (ASSOC 3)(union  (ASSOC 2) (singleton(mkTuple 13 41 16))))))(assert (=> (= (obligation5 2) 1)(= (ASSOC 3)(setminus  (ASSOC 2) (singleton(mkTuple 11 40 16))))))
(assert (=> (= (obligation6 2) 1)(= (ASSOC 3)(union  (ASSOC 2) (singleton(mkTuple 18 39 16))))))(assert (=> (= (obligation6 2) 1)(= (ASSOC 3)(setminus  (ASSOC 2) (singleton(mkTuple 13 41 16))))))
(assert (=> (= (obligation7 2) 1)(= (ASSOC 3)(union  (ASSOC 2) (singleton(mkTuple 1 39 16))))))(assert (=> (= (obligation7 2) 1)(= (ASSOC 3)(setminus  (ASSOC 2) (singleton(mkTuple 18 39 16))))))
(assert (=> (= (obligation8 2) 1)(= (ASSOC 3)(union  (ASSOC 2) (singleton(mkTuple 8 39 16))))))(assert (=> (= (obligation8 2) 1)(= (ASSOC 3)(setminus  (ASSOC 2) (singleton(mkTuple 1 39 16))))))
(assert (=> (= (obligation9 2) 1)(= (ASSOC 3)(union  (ASSOC 2) (singleton(mkTuple 4 40 16))))))(assert (=> (= (obligation9 2) 1)(= (ASSOC 3)(setminus  (ASSOC 2) (singleton(mkTuple 8 39 16))))))
(assert (=> (= (obligation10 2) 1)(= (ASSOC 3)(union  (ASSOC 2) (singleton(mkTuple 5 41 16))))))(assert (=> (= (obligation10 2) 1)(= (ASSOC 3)(setminus  (ASSOC 2) (singleton(mkTuple 4 39 16))))))
(assert (=> (= (obligation11 2) 1)(= (ASSOC 3)(union  (ASSOC 2) (singleton(mkTuple 5 42 16))))))(assert (=> (= (obligation11 2) 1)(= (ASSOC 3)(setminus  (ASSOC 2) (singleton(mkTuple 5 41 16))))))
(assert (=> (= (obligation12 2) 1)(= (ASSOC 3)(union  (ASSOC 2) (singleton(mkTuple 4 44 16))))))(assert (=> (= (obligation12 2) 1)(= (ASSOC 3)(setminus  (ASSOC 2) (singleton(mkTuple 5 42 16))))))
(assert (=> (= (obligation13 2) 1)(= (ASSOC 3)(union  (ASSOC 2) (singleton(mkTuple 5 44 16))))))(assert (=> (= (obligation13 2) 1)(= (ASSOC 3)(setminus  (ASSOC 2) (singleton(mkTuple 4 44 16))))))


; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 3) (ASSIGN* 2))
(or 
(= (obligation13 0) 1)(= (obligation7 0) 1)(= (obligation6 0) 1)(= (obligation9 0) 1)(= (obligation8 0) 1)(= (obligation3 0) 1)(= (obligation2 0) 1)(= (obligation5 0) 1)(= (obligation4 0) 1)(= (obligation1 0) 1)(= (obligation12 0) 1)(= (obligation11 0) 1)(= (obligation10 0) 1))))
(assert (=> (distinct (ASSOC 3) (ASSOC 2))
(or 
(= (obligation13 0) 1)(= (obligation7 0) 1)(= (obligation6 0) 1)(= (obligation9 0) 1)(= (obligation8 0) 1)(= (obligation3 0) 1)(= (obligation2 0) 1)(= (obligation5 0) 1)(= (obligation4 0) 1)(= (obligation1 0) 1)(= (obligation12 0) 1)(= (obligation11 0) 1)(= (obligation10 0) 1))))


; 5.4 Exactly one naive


; AT MOST ONE
(assert (not (and (= (obligation13 0) 1) (= (obligation7 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation6 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation9 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation8 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation3 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation2 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation5 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation13 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation6 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation9 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation8 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation3 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation2 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation5 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation7 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation9 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation8 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation3 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation2 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation5 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation6 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation8 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation3 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation2 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation5 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation9 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation3 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation2 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation5 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation8 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation3 0) 1) (= (obligation2 0) 1))))
(assert (not (and (= (obligation3 0) 1) (= (obligation5 0) 1))))
(assert (not (and (= (obligation3 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation3 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation3 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation3 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation3 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation2 0) 1) (= (obligation5 0) 1))))
(assert (not (and (= (obligation2 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation2 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation2 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation2 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation2 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation5 0) 1) (= (obligation4 0) 1))))
(assert (not (and (= (obligation5 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation5 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation5 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation5 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation4 0) 1) (= (obligation1 0) 1))))
(assert (not (and (= (obligation4 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation4 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation4 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation1 0) 1) (= (obligation12 0) 1))))
(assert (not (and (= (obligation1 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation1 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation12 0) 1) (= (obligation11 0) 1))))
(assert (not (and (= (obligation12 0) 1) (= (obligation10 0) 1))))
(assert (not (and (= (obligation11 0) 1) (= (obligation10 0) 1))))

; AT LEAST ONE
(assert (or(= (obligation13 0) 1)(= (obligation7 0) 1)(= (obligation6 0) 1)(= (obligation9 0) 1)(= (obligation8 0) 1)(= (obligation3 0) 1)(= (obligation2 0) 1)(= (obligation5 0) 1)(= (obligation4 0) 1)(= (obligation1 0) 1)(= (obligation12 0) 1)(= (obligation11 0) 1)(= (obligation10 0) 1)))


;QUERY
(assert (= (obligation2 2) 1))


(check-sat)
(get-value (obligation13))
(get-value (obligation7))
(get-value (obligation6))
(get-value (obligation9))
(get-value (obligation8))
(get-value (obligation3))
(get-value (obligation2))
(get-value (obligation5))
(get-value (obligation4))
(get-value (obligation1))
(get-value (obligation12))
(get-value (obligation11))
(get-value (obligation10))
