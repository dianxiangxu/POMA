(set-logic ALL)
(set-option :produce-models true)
(declare-fun SetToCheckUA () (Set (Tuple Int Int)))
(assert (= SetToCheckUA (insert (mkTuple 24 24) 
(mkTuple 13 13) 
(mkTuple 15 15) 
(mkTuple 2 2) 
(mkTuple 20 20) 
(mkTuple 3 3) 
(mkTuple 18 18) 
(mkTuple 22 22) 
(mkTuple 1 1) 
(mkTuple 11 11) 
(mkTuple 12 12) 
(mkTuple 5 5) 
(mkTuple 25 25) 
(mkTuple 4 4) 
(mkTuple 7 7) 
(mkTuple 14 14) 
(mkTuple 27 27) 
(mkTuple 6 6) 
(mkTuple 17 17) 
(mkTuple 21 21) 
(mkTuple 8 8) 
(mkTuple 10 10) 
(mkTuple 19 19) 
(singleton (mkTuple 23 23)))))
(declare-fun SetToCheckAT () (Set (Tuple Int Int)))
(assert (= SetToCheckAT (insert (mkTuple 26 26) 
(singleton (mkTuple 16 16)))))
(declare-fun ASSIGN* (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN* 0) (insert (mkTuple 26 26) 
(mkTuple 12 9) 
(mkTuple 25 9) 
(mkTuple 18 18) 
(mkTuple 24 21) 
(mkTuple 11 11) 
(mkTuple 25 25) 
(mkTuple 6 9) 
(mkTuple 16 9) 
(mkTuple 2 9) 
(mkTuple 21 9) 
(mkTuple 17 17) 
(mkTuple 10 10) 
(mkTuple 7 21) 
(mkTuple 24 24) 
(mkTuple 13 9) 
(mkTuple 17 1) 
(mkTuple 13 23) 
(mkTuple 3 9) 
(mkTuple 12 12) 
(mkTuple 17 9) 
(mkTuple 24 9) 
(mkTuple 27 27) 
(mkTuple 20 9) 
(mkTuple 7 9) 
(mkTuple 7 14) 
(mkTuple 10 9) 
(mkTuple 15 15) 
(mkTuple 2 2) 
(mkTuple 3 3) 
(mkTuple 27 9) 
(mkTuple 22 22) 
(mkTuple 1 1) 
(mkTuple 18 9) 
(mkTuple 14 14) 
(mkTuple 23 9) 
(mkTuple 4 9) 
(mkTuple 18 5) 
(mkTuple 14 9) 
(mkTuple 21 21) 
(mkTuple 8 9) 
(mkTuple 24 14) 
(mkTuple 13 13) 
(mkTuple 4 22) 
(mkTuple 11 9) 
(mkTuple 16 16) 
(mkTuple 20 20) 
(mkTuple 26 9) 
(mkTuple 6 25) 
(mkTuple 15 20) 
(mkTuple 5 5) 
(mkTuple 8 11) 
(mkTuple 4 4) 
(mkTuple 19 9) 
(mkTuple 7 7) 
(mkTuple 5 9) 
(mkTuple 6 6) 
(mkTuple 22 9) 
(mkTuple 1 9) 
(mkTuple 14 21) 
(mkTuple 15 9) 
(mkTuple 8 8) 
(mkTuple 9 9) 
(mkTuple 27 25) 
(mkTuple 19 19) 
(singleton (mkTuple 23 23)))))
(declare-fun ASSIGN (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN 0) (insert (mkTuple 26 26) 
(mkTuple 12 9) 
(mkTuple 25 9) 
(mkTuple 18 18) 
(mkTuple 11 11) 
(mkTuple 25 25) 
(mkTuple 16 9) 
(mkTuple 2 9) 
(mkTuple 21 9) 
(mkTuple 17 17) 
(mkTuple 10 10) 
(mkTuple 24 24) 
(mkTuple 17 1) 
(mkTuple 13 23) 
(mkTuple 3 9) 
(mkTuple 12 12) 
(mkTuple 27 27) 
(mkTuple 20 9) 
(mkTuple 7 14) 
(mkTuple 15 15) 
(mkTuple 10 9) 
(mkTuple 2 2) 
(mkTuple 3 3) 
(mkTuple 22 22) 
(mkTuple 1 1) 
(mkTuple 14 14) 
(mkTuple 23 9) 
(mkTuple 18 5) 
(mkTuple 14 9) 
(mkTuple 21 21) 
(mkTuple 24 14) 
(mkTuple 13 13) 
(mkTuple 4 22) 
(mkTuple 11 9) 
(mkTuple 16 16) 
(mkTuple 20 20) 
(mkTuple 26 9) 
(mkTuple 6 25) 
(mkTuple 15 20) 
(mkTuple 5 5) 
(mkTuple 8 11) 
(mkTuple 19 9) 
(mkTuple 4 4) 
(mkTuple 7 7) 
(mkTuple 5 9) 
(mkTuple 22 9) 
(mkTuple 6 6) 
(mkTuple 1 9) 
(mkTuple 14 21) 
(mkTuple 8 8) 
(mkTuple 27 25) 
(mkTuple 19 19) 
(singleton (mkTuple 23 23)))))
(declare-fun ASSOC (Int) (Set (Tuple Int Int Int)))

(assert (= (ASSOC 0) (insert(mkTuple 11 29 26) 
(mkTuple 14 31 26) 
(mkTuple 14 28 11) 
(mkTuple 14 33 11) 
(mkTuple 25 34 14) 
(mkTuple 25 36 14) 
(mkTuple 25 43 26) 
(mkTuple 25 32 26) 
(singleton (mkTuple 25 35 26)))))

(declare-fun NODES () (Set (Tuple Int Int)))
(assert (= NODES (insert (mkTuple 1 1) 
(mkTuple 2 2) 
(mkTuple 3 3) 
(mkTuple 4 4) 
(mkTuple 5 5) 
(mkTuple 6 6) 
(mkTuple 7 7) 
(mkTuple 8 8) 
(mkTuple 9 9) 
(mkTuple 10 10) 
(mkTuple 11 11) 
(mkTuple 12 12) 
(mkTuple 13 13) 
(mkTuple 14 14) 
(mkTuple 15 15) 
(mkTuple 16 16) 
(mkTuple 17 17) 
(mkTuple 18 18) 
(mkTuple 19 19) 
(mkTuple 20 20) 
(mkTuple 21 21) 
(mkTuple 22 22) 
(mkTuple 23 23) 
(mkTuple 24 24) 
(mkTuple 25 25) 
(mkTuple 26 26) 
(singleton (mkTuple 27 27))))) 


(declare-fun obligation7 (Int) Bool)
(declare-fun obligation6 (Int) Bool)
(declare-fun obligation3 (Int) Bool)
(declare-fun obligation2 (Int) Bool)
(declare-fun obligation5 (Int) Bool)
(declare-fun obligation4 (Int) Bool)
(declare-fun obligation1 (Int) Bool)
;--------------------------------------------------------------------------------------------------------------------
;STEP1

; 5.1 a->PRE
(declare-fun obligation1U_0 () Int)
(declare-fun obligation1UA_0 () Int)
(declare-fun obligation1AT_0 () Int)
(declare-fun obligation1UO_0 () Int)
(declare-fun obligation1ar_0 () Int)
(declare-fun obligation1S_0 () Int)
(declare-fun obligation1T_0 () Int)
(assert (>= obligation1U_0 0))
(assert (>= obligation1UA_0 0))
(assert (>= obligation1AT_0 0))
(assert (>= obligation1UO_0 0))
(assert (= obligation1ar_0 43))
(assert (= obligation1S_0 25))
(assert (= obligation1T_0 26))
(assert (=> (= (obligation1 0) true) (and
 (member (mkTuple  obligation1U_0 obligation1S_0) (ASSIGN* 0))
 (member (mkTuple  obligation1S_0 obligation1UA_0) (ASSIGN* 0))
(member (mkTuple obligation1UA_0 obligation1ar_0 obligation1AT_0) (ASSOC 0))
 (member (mkTuple  obligation1UO_0 obligation1AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation1T_0 obligation1UO_0) (ASSIGN* 0))
 (distinct obligation1S_0 obligation1U_0)
)))


(declare-fun obligation2U_0 () Int)
(declare-fun obligation2UA_0 () Int)
(declare-fun obligation2AT_0 () Int)
(declare-fun obligation2UO_0 () Int)
(declare-fun obligation2ar_0 () Int)
(declare-fun obligation2S_0 () Int)
(declare-fun obligation2T_0 () Int)
(assert (>= obligation2U_0 0))
(assert (>= obligation2UA_0 0))
(assert (>= obligation2AT_0 0))
(assert (>= obligation2UO_0 0))
(assert (= obligation2ar_0 46))
(assert (= obligation2S_0 1))
(assert (= obligation2T_0 26))
(assert (=> (= (obligation2 0) true) (and
 (member (mkTuple  obligation2U_0 obligation2S_0) (ASSIGN* 0))
 (member (mkTuple  obligation2S_0 obligation2UA_0) (ASSIGN* 0))
(member (mkTuple obligation2UA_0 obligation2ar_0 obligation2AT_0) (ASSOC 0))
 (member (mkTuple  obligation2UO_0 obligation2AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation2T_0 obligation2UO_0) (ASSIGN* 0))
 (distinct obligation2S_0 obligation2U_0)
)))


(declare-fun obligation3U_0 () Int)
(declare-fun obligation3UA_0 () Int)
(declare-fun obligation3AT_0 () Int)
(declare-fun obligation3UO_0 () Int)
(declare-fun obligation3ar_0 () Int)
(declare-fun obligation3S_0 () Int)
(declare-fun obligation3T_0 () Int)
(assert (>= obligation3U_0 0))
(assert (>= obligation3UA_0 0))
(assert (>= obligation3AT_0 0))
(assert (>= obligation3UO_0 0))
(assert (= obligation3ar_0 46))
(assert (= obligation3S_0 5))
(assert (= obligation3T_0 26))
(assert (=> (= (obligation3 0) true) (and
 (member (mkTuple  obligation3U_0 obligation3S_0) (ASSIGN* 0))
 (member (mkTuple  obligation3S_0 obligation3UA_0) (ASSIGN* 0))
(member (mkTuple obligation3UA_0 obligation3ar_0 obligation3AT_0) (ASSOC 0))
 (member (mkTuple  obligation3UO_0 obligation3AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation3T_0 obligation3UO_0) (ASSIGN* 0))
 (distinct obligation3S_0 obligation3U_0)
)))


(declare-fun obligation4U_0 () Int)
(declare-fun obligation4UA_0 () Int)
(declare-fun obligation4AT_0 () Int)
(declare-fun obligation4UO_0 () Int)
(declare-fun obligation4ar_0 () Int)
(declare-fun obligation4S_0 () Int)
(declare-fun obligation4T_0 () Int)
(assert (>= obligation4U_0 0))
(assert (>= obligation4UA_0 0))
(assert (>= obligation4AT_0 0))
(assert (>= obligation4UO_0 0))
(assert (= obligation4ar_0 46))
(assert (= obligation4S_0 20))
(assert (= obligation4T_0 26))
(assert (=> (= (obligation4 0) true) (and
 (member (mkTuple  obligation4U_0 obligation4S_0) (ASSIGN* 0))
 (member (mkTuple  obligation4S_0 obligation4UA_0) (ASSIGN* 0))
(member (mkTuple obligation4UA_0 obligation4ar_0 obligation4AT_0) (ASSOC 0))
 (member (mkTuple  obligation4UO_0 obligation4AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation4T_0 obligation4UO_0) (ASSIGN* 0))
 (distinct obligation4S_0 obligation4U_0)
)))


(declare-fun obligation5U_0 () Int)
(declare-fun obligation5UA_0 () Int)
(declare-fun obligation5AT_0 () Int)
(declare-fun obligation5UO_0 () Int)
(declare-fun obligation5ar_0 () Int)
(declare-fun obligation5S_0 () Int)
(declare-fun obligation5T_0 () Int)
(assert (>= obligation5U_0 0))
(assert (>= obligation5UA_0 0))
(assert (>= obligation5AT_0 0))
(assert (>= obligation5UO_0 0))
(assert (= obligation5ar_0 43))
(assert (= obligation5S_0 22))
(assert (= obligation5T_0 26))
(assert (=> (= (obligation5 0) true) (and
 (member (mkTuple  obligation5U_0 obligation5S_0) (ASSIGN* 0))
 (member (mkTuple  obligation5S_0 obligation5UA_0) (ASSIGN* 0))
(member (mkTuple obligation5UA_0 obligation5ar_0 obligation5AT_0) (ASSOC 0))
 (member (mkTuple  obligation5UO_0 obligation5AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation5T_0 obligation5UO_0) (ASSIGN* 0))
 (distinct obligation5S_0 obligation5U_0)
)))


(declare-fun obligation6U_0 () Int)
(declare-fun obligation6UA_0 () Int)
(declare-fun obligation6AT_0 () Int)
(declare-fun obligation6UO_0 () Int)
(declare-fun obligation6ar_0 () Int)
(declare-fun obligation6S_0 () Int)
(declare-fun obligation6T_0 () Int)
(assert (>= obligation6U_0 0))
(assert (>= obligation6UA_0 0))
(assert (>= obligation6AT_0 0))
(assert (>= obligation6UO_0 0))
(assert (= obligation6ar_0 44))
(assert (= obligation6S_0 23))
(assert (= obligation6T_0 26))
(assert (=> (= (obligation6 0) true) (and
 (member (mkTuple  obligation6U_0 obligation6S_0) (ASSIGN* 0))
 (member (mkTuple  obligation6S_0 obligation6UA_0) (ASSIGN* 0))
(member (mkTuple obligation6UA_0 obligation6ar_0 obligation6AT_0) (ASSOC 0))
 (member (mkTuple  obligation6UO_0 obligation6AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation6T_0 obligation6UO_0) (ASSIGN* 0))
 (distinct obligation6S_0 obligation6U_0)
)))


(declare-fun obligation7U_0 () Int)
(declare-fun obligation7UA_0 () Int)
(declare-fun obligation7AT_0 () Int)
(declare-fun obligation7UO_0 () Int)
(declare-fun obligation7ar_0 () Int)
(declare-fun obligation7S_0 () Int)
(declare-fun obligation7T_0 () Int)
(assert (>= obligation7U_0 0))
(assert (>= obligation7UA_0 0))
(assert (>= obligation7AT_0 0))
(assert (>= obligation7UO_0 0))
(assert (= obligation7ar_0 46))
(assert (= obligation7S_0 10))
(assert (= obligation7T_0 26))
(assert (=> (= (obligation7 0) true) (and
 (member (mkTuple  obligation7U_0 obligation7S_0) (ASSIGN* 0))
 (member (mkTuple  obligation7S_0 obligation7UA_0) (ASSIGN* 0))
(member (mkTuple obligation7UA_0 obligation7ar_0 obligation7AT_0) (ASSOC 0))
 (member (mkTuple  obligation7UO_0 obligation7AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation7T_0 obligation7UO_0) (ASSIGN* 0))
 (distinct obligation7S_0 obligation7U_0)
)))




; 5.2 a->Eff

(assert (=> (=(obligation1 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation1 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(declare-fun ASSOCobligation1_0_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation1 0) true)(subset ASSOCobligation1_0_1 (union  (ASSOC 0) (singleton(mkTuple 1 46 26))))))
(declare-fun ASSOCobligation1_1_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation1 0) true)(subset ASSOCobligation1_1_1 (union  (ASSOC 0) (singleton(mkTuple 1 46 26))))))
(assert (= (ASSOC 1)  (union ASSOCobligation1_0_1 ASSOCobligation1_1_1))) 



(assert (=> (=(obligation2 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation2 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(declare-fun ASSOCobligation2_0_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation2 0) true)(subset ASSOCobligation2_0_1 (union  (ASSOC 0) (singleton(mkTuple 5 46 26))))))
(declare-fun ASSOCobligation2_1_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation2 0) true)(subset ASSOCobligation2_1_1 (union  (ASSOC 0) (singleton(mkTuple 5 46 26))))))
(declare-fun ASSOCobligation2_2_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation2 0) true)(subset ASSOCobligation2_2_1 (union  (ASSOC 0) (singleton(mkTuple 5 46 26))))))
(declare-fun ASSOCobligation2_3_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation2 0) true)(subset ASSOCobligation2_3_1 (union  (ASSOC 0) (singleton(mkTuple 5 46 26))))))
(assert (= (ASSOC 1) (union ASSOCobligation2_0_1(union ASSOCobligation2_1_1 (union ASSOCobligation2_2_1 ASSOCobligation2_3_1))) ))



(assert (=> (= (obligation3 0) true)(subset (ASSIGN* 1) (union (join (join (union (singleton (mkTuple 6 6)) (join (ASSIGN* 0) (singleton (mkTuple 6 6)))) (singleton (mkTuple 6 14))) (union (singleton (mkTuple 14 14)) (join (singleton (mkTuple 14 14)) (ASSIGN* 0) ))) (ASSIGN* 0)))))
(assert (=> (= (obligation3 0) true)(subset (ASSIGN 1)( union (ASSIGN 0) (singleton (mkTuple 6 14))))))
(declare-fun ASSOCobligation3_0_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation3 0) true)(subset ASSOCobligation3_0_1 (union  (ASSOC 0) (singleton(mkTuple 20 46 26))))))
(declare-fun ASSOCobligation3_1_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation3 0) true)(subset ASSOCobligation3_1_1 (union  (ASSOC 0) (singleton(mkTuple 20 46 26))))))
(assert (= (ASSOC 1)  (union ASSOCobligation3_0_1 ASSOCobligation3_1_1))) 



(assert (=> (= (obligation4 0) true)(subset (ASSIGN* 1) (setminus (ASSIGN* 0) (setminus (setminus (union (singleton (mkTuple 6 14)) (join (singleton (mkTuple 6 14)) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 6 6)) (join (ASSIGN* 0)  (singleton (mkTuple 6 6)))) (transpose (union  (singleton (mkTuple 6 6)) (join (ASSIGN* 0)  (singleton (mkTuple 6 6)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 6 14)))) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 6 6)) (join (ASSIGN* 0)  (singleton (mkTuple 6 6)))) (transpose (union  (singleton (mkTuple 6 6)) (join (ASSIGN* 0)  (singleton (mkTuple 6 6)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 6 14)))) (ASSIGN* 0)))))))
(assert (=> (= (obligation4 0) true)(subset (ASSIGN 1) (setminus (ASSIGN 0) (singleton (mkTuple 6 14))))))

(declare-fun ASSOCobligation4_0_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation4 0) true)(subset ASSOCobligation4_0_1 (union  (ASSOC 0) (singleton(mkTuple 22 43 26))))))
(declare-fun ASSOCobligation4_1_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation4 0) true)(subset ASSOCobligation4_1_1 (union  (ASSOC 0) (singleton(mkTuple 22 43 26))))))
(assert (= (ASSOC 1)  (union ASSOCobligation4_0_1 ASSOCobligation4_1_1))) 



(assert (=> (=(obligation5 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation5 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(declare-fun ASSOCobligation5_0_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation5 0) true)(subset ASSOCobligation5_0_1 (union  (ASSOC 0) (singleton(mkTuple 23 44 26))))))
(declare-fun ASSOCobligation5_1_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation5 0) true)(subset ASSOCobligation5_1_1 (union  (ASSOC 0) (singleton(mkTuple 23 44 26))))))
(assert (= (ASSOC 1)  (union ASSOCobligation5_0_1 ASSOCobligation5_1_1))) 



(assert (=> (=(obligation6 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation6 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(declare-fun ASSOCobligation6_0_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation6 0) true)(subset ASSOCobligation6_0_1 (union  (ASSOC 0) (singleton(mkTuple 10 46 26))))))
(declare-fun ASSOCobligation6_1_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation6 0) true)(subset ASSOCobligation6_1_1 (union  (ASSOC 0) (singleton(mkTuple 10 46 26))))))
(assert (= (ASSOC 1)  (union ASSOCobligation6_0_1 ASSOCobligation6_1_1))) 



(assert (=> (=(obligation7 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation7 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(declare-fun ASSOCobligation7_0_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation7 0) true)(subset ASSOCobligation7_0_1 (union  (ASSOC 0) (singleton(mkTuple 12 46 26))))))
(declare-fun ASSOCobligation7_1_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation7 0) true)(subset ASSOCobligation7_1_1 (union  (ASSOC 0) (singleton(mkTuple 12 46 26))))))
(assert (= (ASSOC 1)  (union ASSOCobligation7_0_1 ASSOCobligation7_1_1))) 




; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 1) (ASSIGN* 0))
(or 
(= (obligation7 0) true)(= (obligation6 0) true)(= (obligation3 0) true)(= (obligation2 0) true)(= (obligation5 0) true)(= (obligation4 0) true)(= (obligation1 0) true))))
(assert (=> (distinct (ASSIGN 1) (ASSIGN 0))
(or (= (obligation7 0) true)(= (obligation6 0) true)(= (obligation3 0) true)(= (obligation2 0) true)(= (obligation5 0) true)(= (obligation4 0) true)(= (obligation1 0) true))))
(assert (=> (distinct (ASSOC 1) (ASSOC 0))
(or 
(= (obligation7 0) true)(= (obligation6 0) true)(= (obligation3 0) true)(= (obligation2 0) true)(= (obligation5 0) true)(= (obligation4 0) true)(= (obligation1 0) true))))


; 5.4 Exactly one naive


; AT MOST ONE
(assert (not (and (= (obligation7 0) true) (= (obligation6 0) true))))
(assert (not (and (= (obligation7 0) true) (= (obligation3 0) true))))
(assert (not (and (= (obligation7 0) true) (= (obligation2 0) true))))
(assert (not (and (= (obligation7 0) true) (= (obligation5 0) true))))
(assert (not (and (= (obligation7 0) true) (= (obligation4 0) true))))
(assert (not (and (= (obligation7 0) true) (= (obligation1 0) true))))
(assert (not (and (= (obligation6 0) true) (= (obligation3 0) true))))
(assert (not (and (= (obligation6 0) true) (= (obligation2 0) true))))
(assert (not (and (= (obligation6 0) true) (= (obligation5 0) true))))
(assert (not (and (= (obligation6 0) true) (= (obligation4 0) true))))
(assert (not (and (= (obligation6 0) true) (= (obligation1 0) true))))
(assert (not (and (= (obligation3 0) true) (= (obligation2 0) true))))
(assert (not (and (= (obligation3 0) true) (= (obligation5 0) true))))
(assert (not (and (= (obligation3 0) true) (= (obligation4 0) true))))
(assert (not (and (= (obligation3 0) true) (= (obligation1 0) true))))
(assert (not (and (= (obligation2 0) true) (= (obligation5 0) true))))
(assert (not (and (= (obligation2 0) true) (= (obligation4 0) true))))
(assert (not (and (= (obligation2 0) true) (= (obligation1 0) true))))
(assert (not (and (= (obligation5 0) true) (= (obligation4 0) true))))
(assert (not (and (= (obligation5 0) true) (= (obligation1 0) true))))
(assert (not (and (= (obligation4 0) true) (= (obligation1 0) true))))

; AT LEAST ONE
(assert (or(= (obligation7 0) true)(= (obligation6 0) true)(= (obligation3 0) true)(= (obligation2 0) true)(= (obligation5 0) true)(= (obligation4 0) true)(= (obligation1 0) true)))


;--------------------------------------------------------------------------------------------------------------------
;STEP2

; 5.1 a->PRE
(declare-fun obligation1U_1 () Int)
(declare-fun obligation1UA_1 () Int)
(declare-fun obligation1AT_1 () Int)
(declare-fun obligation1UO_1 () Int)
(declare-fun obligation1ar_1 () Int)
(declare-fun obligation1S_1 () Int)
(declare-fun obligation1T_1 () Int)
(assert (>= obligation1U_1 0))
(assert (>= obligation1UA_1 0))
(assert (>= obligation1AT_1 0))
(assert (>= obligation1UO_1 0))
(assert (= obligation1ar_1 43))
(assert (= obligation1S_1 25))
(assert (= obligation1T_1 26))
(assert (=> (= (obligation1 1) true) (and
 (member (mkTuple  obligation1U_1 obligation1S_1) (ASSIGN* 1))
 (member (mkTuple  obligation1S_1 obligation1UA_1) (ASSIGN* 1))
(member (mkTuple obligation1UA_1 obligation1ar_1 obligation1AT_1) (ASSOC 1))
 (member (mkTuple  obligation1UO_1 obligation1AT_1) (ASSIGN* 1))
 (member (mkTuple  obligation1T_1 obligation1UO_1) (ASSIGN* 1))
 (distinct obligation1S_1 obligation1U_1)
)))


(declare-fun obligation2U_1 () Int)
(declare-fun obligation2UA_1 () Int)
(declare-fun obligation2AT_1 () Int)
(declare-fun obligation2UO_1 () Int)
(declare-fun obligation2ar_1 () Int)
(declare-fun obligation2S_1 () Int)
(declare-fun obligation2T_1 () Int)
(assert (>= obligation2U_1 0))
(assert (>= obligation2UA_1 0))
(assert (>= obligation2AT_1 0))
(assert (>= obligation2UO_1 0))
(assert (= obligation2ar_1 46))
(assert (= obligation2S_1 1))
(assert (= obligation2T_1 26))
(assert (=> (= (obligation2 1) true) (and
 (member (mkTuple  obligation2U_1 obligation2S_1) (ASSIGN* 1))
 (member (mkTuple  obligation2S_1 obligation2UA_1) (ASSIGN* 1))
(member (mkTuple obligation2UA_1 obligation2ar_1 obligation2AT_1) (ASSOC 1))
 (member (mkTuple  obligation2UO_1 obligation2AT_1) (ASSIGN* 1))
 (member (mkTuple  obligation2T_1 obligation2UO_1) (ASSIGN* 1))
 (distinct obligation2S_1 obligation2U_1)
)))


(declare-fun obligation3U_1 () Int)
(declare-fun obligation3UA_1 () Int)
(declare-fun obligation3AT_1 () Int)
(declare-fun obligation3UO_1 () Int)
(declare-fun obligation3ar_1 () Int)
(declare-fun obligation3S_1 () Int)
(declare-fun obligation3T_1 () Int)
(assert (>= obligation3U_1 0))
(assert (>= obligation3UA_1 0))
(assert (>= obligation3AT_1 0))
(assert (>= obligation3UO_1 0))
(assert (= obligation3ar_1 46))
(assert (= obligation3S_1 5))
(assert (= obligation3T_1 26))
(assert (=> (= (obligation3 1) true) (and
 (member (mkTuple  obligation3U_1 obligation3S_1) (ASSIGN* 1))
 (member (mkTuple  obligation3S_1 obligation3UA_1) (ASSIGN* 1))
(member (mkTuple obligation3UA_1 obligation3ar_1 obligation3AT_1) (ASSOC 1))
 (member (mkTuple  obligation3UO_1 obligation3AT_1) (ASSIGN* 1))
 (member (mkTuple  obligation3T_1 obligation3UO_1) (ASSIGN* 1))
 (distinct obligation3S_1 obligation3U_1)
)))


(declare-fun obligation4U_1 () Int)
(declare-fun obligation4UA_1 () Int)
(declare-fun obligation4AT_1 () Int)
(declare-fun obligation4UO_1 () Int)
(declare-fun obligation4ar_1 () Int)
(declare-fun obligation4S_1 () Int)
(declare-fun obligation4T_1 () Int)
(assert (>= obligation4U_1 0))
(assert (>= obligation4UA_1 0))
(assert (>= obligation4AT_1 0))
(assert (>= obligation4UO_1 0))
(assert (= obligation4ar_1 46))
(assert (= obligation4S_1 20))
(assert (= obligation4T_1 26))
(assert (=> (= (obligation4 1) true) (and
 (member (mkTuple  obligation4U_1 obligation4S_1) (ASSIGN* 1))
 (member (mkTuple  obligation4S_1 obligation4UA_1) (ASSIGN* 1))
(member (mkTuple obligation4UA_1 obligation4ar_1 obligation4AT_1) (ASSOC 1))
 (member (mkTuple  obligation4UO_1 obligation4AT_1) (ASSIGN* 1))
 (member (mkTuple  obligation4T_1 obligation4UO_1) (ASSIGN* 1))
 (distinct obligation4S_1 obligation4U_1)
)))


(declare-fun obligation5U_1 () Int)
(declare-fun obligation5UA_1 () Int)
(declare-fun obligation5AT_1 () Int)
(declare-fun obligation5UO_1 () Int)
(declare-fun obligation5ar_1 () Int)
(declare-fun obligation5S_1 () Int)
(declare-fun obligation5T_1 () Int)
(assert (>= obligation5U_1 0))
(assert (>= obligation5UA_1 0))
(assert (>= obligation5AT_1 0))
(assert (>= obligation5UO_1 0))
(assert (= obligation5ar_1 43))
(assert (= obligation5S_1 22))
(assert (= obligation5T_1 26))
(assert (=> (= (obligation5 1) true) (and
 (member (mkTuple  obligation5U_1 obligation5S_1) (ASSIGN* 1))
 (member (mkTuple  obligation5S_1 obligation5UA_1) (ASSIGN* 1))
(member (mkTuple obligation5UA_1 obligation5ar_1 obligation5AT_1) (ASSOC 1))
 (member (mkTuple  obligation5UO_1 obligation5AT_1) (ASSIGN* 1))
 (member (mkTuple  obligation5T_1 obligation5UO_1) (ASSIGN* 1))
 (distinct obligation5S_1 obligation5U_1)
)))


(declare-fun obligation6U_1 () Int)
(declare-fun obligation6UA_1 () Int)
(declare-fun obligation6AT_1 () Int)
(declare-fun obligation6UO_1 () Int)
(declare-fun obligation6ar_1 () Int)
(declare-fun obligation6S_1 () Int)
(declare-fun obligation6T_1 () Int)
(assert (>= obligation6U_1 0))
(assert (>= obligation6UA_1 0))
(assert (>= obligation6AT_1 0))
(assert (>= obligation6UO_1 0))
(assert (= obligation6ar_1 44))
(assert (= obligation6S_1 23))
(assert (= obligation6T_1 26))
(assert (=> (= (obligation6 1) true) (and
 (member (mkTuple  obligation6U_1 obligation6S_1) (ASSIGN* 1))
 (member (mkTuple  obligation6S_1 obligation6UA_1) (ASSIGN* 1))
(member (mkTuple obligation6UA_1 obligation6ar_1 obligation6AT_1) (ASSOC 1))
 (member (mkTuple  obligation6UO_1 obligation6AT_1) (ASSIGN* 1))
 (member (mkTuple  obligation6T_1 obligation6UO_1) (ASSIGN* 1))
 (distinct obligation6S_1 obligation6U_1)
)))


(declare-fun obligation7U_1 () Int)
(declare-fun obligation7UA_1 () Int)
(declare-fun obligation7AT_1 () Int)
(declare-fun obligation7UO_1 () Int)
(declare-fun obligation7ar_1 () Int)
(declare-fun obligation7S_1 () Int)
(declare-fun obligation7T_1 () Int)
(assert (>= obligation7U_1 0))
(assert (>= obligation7UA_1 0))
(assert (>= obligation7AT_1 0))
(assert (>= obligation7UO_1 0))
(assert (= obligation7ar_1 46))
(assert (= obligation7S_1 10))
(assert (= obligation7T_1 26))
(assert (=> (= (obligation7 1) true) (and
 (member (mkTuple  obligation7U_1 obligation7S_1) (ASSIGN* 1))
 (member (mkTuple  obligation7S_1 obligation7UA_1) (ASSIGN* 1))
(member (mkTuple obligation7UA_1 obligation7ar_1 obligation7AT_1) (ASSOC 1))
 (member (mkTuple  obligation7UO_1 obligation7AT_1) (ASSIGN* 1))
 (member (mkTuple  obligation7T_1 obligation7UO_1) (ASSIGN* 1))
 (distinct obligation7S_1 obligation7U_1)
)))




; 5.2 a->Eff

(assert (=> (=(obligation1 1) true) (= (ASSIGN* 2) (ASSIGN* 1))))
(assert (=> (=(obligation1 1) true) (= (ASSIGN 2) (ASSIGN 1))))
(declare-fun ASSOCobligation1_0_2 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation1 1) true)(subset ASSOCobligation1_0_2 (union  (ASSOC 1) (singleton(mkTuple 1 46 26))))))
(declare-fun ASSOCobligation1_1_2 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation1 1) true)(subset ASSOCobligation1_1_2 (union  (ASSOC 1) (singleton(mkTuple 1 46 26))))))
(assert (= (ASSOC 2)  (union ASSOCobligation1_0_2 ASSOCobligation1_1_2))) 



(assert (=> (=(obligation2 1) true) (= (ASSIGN* 2) (ASSIGN* 1))))
(assert (=> (=(obligation2 1) true) (= (ASSIGN 2) (ASSIGN 1))))
(declare-fun ASSOCobligation2_0_2 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation2 1) true)(subset ASSOCobligation2_0_2 (union  (ASSOC 1) (singleton(mkTuple 5 46 26))))))
(declare-fun ASSOCobligation2_1_2 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation2 1) true)(subset ASSOCobligation2_1_2 (union  (ASSOC 1) (singleton(mkTuple 5 46 26))))))
(declare-fun ASSOCobligation2_2_2 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation2 1) true)(subset ASSOCobligation2_2_2 (union  (ASSOC 1) (singleton(mkTuple 5 46 26))))))
(declare-fun ASSOCobligation2_3_2 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation2 1) true)(subset ASSOCobligation2_3_2 (union  (ASSOC 1) (singleton(mkTuple 5 46 26))))))
(assert (= (ASSOC 2) (union ASSOCobligation2_0_2(union ASSOCobligation2_1_2 (union ASSOCobligation2_2_2 ASSOCobligation2_3_2))) ))



(assert (=> (= (obligation3 1) true)(subset (ASSIGN* 2) (union (join (join (union (singleton (mkTuple 6 6)) (join (ASSIGN* 1) (singleton (mkTuple 6 6)))) (singleton (mkTuple 6 14))) (union (singleton (mkTuple 14 14)) (join (singleton (mkTuple 14 14)) (ASSIGN* 1) ))) (ASSIGN* 1)))))
(assert (=> (= (obligation3 1) true)(subset (ASSIGN 2)( union (ASSIGN 1) (singleton (mkTuple 6 14))))))
(declare-fun ASSOCobligation3_0_2 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation3 1) true)(subset ASSOCobligation3_0_2 (union  (ASSOC 1) (singleton(mkTuple 20 46 26))))))
(declare-fun ASSOCobligation3_1_2 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation3 1) true)(subset ASSOCobligation3_1_2 (union  (ASSOC 1) (singleton(mkTuple 20 46 26))))))
(assert (= (ASSOC 2)  (union ASSOCobligation3_0_2 ASSOCobligation3_1_2))) 



(assert (=> (= (obligation4 1) true)(subset (ASSIGN* 2) (setminus (ASSIGN* 1) (setminus (setminus (union (singleton (mkTuple 6 14)) (join (singleton (mkTuple 6 14)) (ASSIGN* 1))) (join (join (intersection (join (union  (singleton (mkTuple 6 6)) (join (ASSIGN* 1)  (singleton (mkTuple 6 6)))) (transpose (union  (singleton (mkTuple 6 6)) (join (ASSIGN* 1)  (singleton (mkTuple 6 6)))))) NODES) (setminus (ASSIGN 1) (singleton (mkTuple 6 14)))) (ASSIGN* 1))) (join (join (intersection (join (union  (singleton (mkTuple 6 6)) (join (ASSIGN* 1)  (singleton (mkTuple 6 6)))) (transpose (union  (singleton (mkTuple 6 6)) (join (ASSIGN* 1)  (singleton (mkTuple 6 6)))))) NODES) (setminus (ASSIGN 1) (singleton (mkTuple 6 14)))) (ASSIGN* 1)))))))
(assert (=> (= (obligation4 1) true)(subset (ASSIGN 2) (setminus (ASSIGN 1) (singleton (mkTuple 6 14))))))

(declare-fun ASSOCobligation4_0_2 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation4 1) true)(subset ASSOCobligation4_0_2 (union  (ASSOC 1) (singleton(mkTuple 22 43 26))))))
(declare-fun ASSOCobligation4_1_2 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation4 1) true)(subset ASSOCobligation4_1_2 (union  (ASSOC 1) (singleton(mkTuple 22 43 26))))))
(assert (= (ASSOC 2)  (union ASSOCobligation4_0_2 ASSOCobligation4_1_2))) 



(assert (=> (=(obligation5 1) true) (= (ASSIGN* 2) (ASSIGN* 1))))
(assert (=> (=(obligation5 1) true) (= (ASSIGN 2) (ASSIGN 1))))
(declare-fun ASSOCobligation5_0_2 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation5 1) true)(subset ASSOCobligation5_0_2 (union  (ASSOC 1) (singleton(mkTuple 23 44 26))))))
(declare-fun ASSOCobligation5_1_2 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation5 1) true)(subset ASSOCobligation5_1_2 (union  (ASSOC 1) (singleton(mkTuple 23 44 26))))))
(assert (= (ASSOC 2)  (union ASSOCobligation5_0_2 ASSOCobligation5_1_2))) 



(assert (=> (=(obligation6 1) true) (= (ASSIGN* 2) (ASSIGN* 1))))
(assert (=> (=(obligation6 1) true) (= (ASSIGN 2) (ASSIGN 1))))
(declare-fun ASSOCobligation6_0_2 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation6 1) true)(subset ASSOCobligation6_0_2 (union  (ASSOC 1) (singleton(mkTuple 10 46 26))))))
(declare-fun ASSOCobligation6_1_2 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation6 1) true)(subset ASSOCobligation6_1_2 (union  (ASSOC 1) (singleton(mkTuple 10 46 26))))))
(assert (= (ASSOC 2)  (union ASSOCobligation6_0_2 ASSOCobligation6_1_2))) 



(assert (=> (=(obligation7 1) true) (= (ASSIGN* 2) (ASSIGN* 1))))
(assert (=> (=(obligation7 1) true) (= (ASSIGN 2) (ASSIGN 1))))
(declare-fun ASSOCobligation7_0_2 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation7 1) true)(subset ASSOCobligation7_0_2 (union  (ASSOC 1) (singleton(mkTuple 12 46 26))))))
(declare-fun ASSOCobligation7_1_2 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation7 1) true)(subset ASSOCobligation7_1_2 (union  (ASSOC 1) (singleton(mkTuple 12 46 26))))))
(assert (= (ASSOC 2)  (union ASSOCobligation7_0_2 ASSOCobligation7_1_2))) 




; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 2) (ASSIGN* 1))
(or 
(= (obligation7 1) true)(= (obligation6 1) true)(= (obligation3 1) true)(= (obligation2 1) true)(= (obligation5 1) true)(= (obligation4 1) true)(= (obligation1 1) true))))
(assert (=> (distinct (ASSIGN 2) (ASSIGN 1))
(or (= (obligation7 1) true)(= (obligation6 1) true)(= (obligation3 1) true)(= (obligation2 1) true)(= (obligation5 1) true)(= (obligation4 1) true)(= (obligation1 1) true))))
(assert (=> (distinct (ASSOC 2) (ASSOC 1))
(or 
(= (obligation7 1) true)(= (obligation6 1) true)(= (obligation3 1) true)(= (obligation2 1) true)(= (obligation5 1) true)(= (obligation4 1) true)(= (obligation1 1) true))))


; 5.4 Exactly one naive


; AT MOST ONE
(assert (not (and (= (obligation7 1) true) (= (obligation6 1) true))))
(assert (not (and (= (obligation7 1) true) (= (obligation3 1) true))))
(assert (not (and (= (obligation7 1) true) (= (obligation2 1) true))))
(assert (not (and (= (obligation7 1) true) (= (obligation5 1) true))))
(assert (not (and (= (obligation7 1) true) (= (obligation4 1) true))))
(assert (not (and (= (obligation7 1) true) (= (obligation1 1) true))))
(assert (not (and (= (obligation6 1) true) (= (obligation3 1) true))))
(assert (not (and (= (obligation6 1) true) (= (obligation2 1) true))))
(assert (not (and (= (obligation6 1) true) (= (obligation5 1) true))))
(assert (not (and (= (obligation6 1) true) (= (obligation4 1) true))))
(assert (not (and (= (obligation6 1) true) (= (obligation1 1) true))))
(assert (not (and (= (obligation3 1) true) (= (obligation2 1) true))))
(assert (not (and (= (obligation3 1) true) (= (obligation5 1) true))))
(assert (not (and (= (obligation3 1) true) (= (obligation4 1) true))))
(assert (not (and (= (obligation3 1) true) (= (obligation1 1) true))))
(assert (not (and (= (obligation2 1) true) (= (obligation5 1) true))))
(assert (not (and (= (obligation2 1) true) (= (obligation4 1) true))))
(assert (not (and (= (obligation2 1) true) (= (obligation1 1) true))))
(assert (not (and (= (obligation5 1) true) (= (obligation4 1) true))))
(assert (not (and (= (obligation5 1) true) (= (obligation1 1) true))))
(assert (not (and (= (obligation4 1) true) (= (obligation1 1) true))))

; AT LEAST ONE
(assert (or(= (obligation7 1) true)(= (obligation6 1) true)(= (obligation3 1) true)(= (obligation2 1) true)(= (obligation5 1) true)(= (obligation4 1) true)(= (obligation1 1) true)))


;--------------------------------------------------------------------------------------------------------------------
;STEP3

; 5.1 a->PRE
(declare-fun obligation1U_2 () Int)
(declare-fun obligation1UA_2 () Int)
(declare-fun obligation1AT_2 () Int)
(declare-fun obligation1UO_2 () Int)
(declare-fun obligation1ar_2 () Int)
(declare-fun obligation1S_2 () Int)
(declare-fun obligation1T_2 () Int)
(assert (>= obligation1U_2 0))
(assert (>= obligation1UA_2 0))
(assert (>= obligation1AT_2 0))
(assert (>= obligation1UO_2 0))
(assert (= obligation1ar_2 43))
(assert (= obligation1S_2 25))
(assert (= obligation1T_2 26))
(assert (=> (= (obligation1 2) true) (and
 (member (mkTuple  obligation1U_2 obligation1S_2) (ASSIGN* 2))
 (member (mkTuple  obligation1S_2 obligation1UA_2) (ASSIGN* 2))
(member (mkTuple obligation1UA_2 obligation1ar_2 obligation1AT_2) (ASSOC 2))
 (member (mkTuple  obligation1UO_2 obligation1AT_2) (ASSIGN* 2))
 (member (mkTuple  obligation1T_2 obligation1UO_2) (ASSIGN* 2))
 (distinct obligation1S_2 obligation1U_2)
)))


(declare-fun obligation2U_2 () Int)
(declare-fun obligation2UA_2 () Int)
(declare-fun obligation2AT_2 () Int)
(declare-fun obligation2UO_2 () Int)
(declare-fun obligation2ar_2 () Int)
(declare-fun obligation2S_2 () Int)
(declare-fun obligation2T_2 () Int)
(assert (>= obligation2U_2 0))
(assert (>= obligation2UA_2 0))
(assert (>= obligation2AT_2 0))
(assert (>= obligation2UO_2 0))
(assert (= obligation2ar_2 46))
(assert (= obligation2S_2 1))
(assert (= obligation2T_2 26))
(assert (=> (= (obligation2 2) true) (and
 (member (mkTuple  obligation2U_2 obligation2S_2) (ASSIGN* 2))
 (member (mkTuple  obligation2S_2 obligation2UA_2) (ASSIGN* 2))
(member (mkTuple obligation2UA_2 obligation2ar_2 obligation2AT_2) (ASSOC 2))
 (member (mkTuple  obligation2UO_2 obligation2AT_2) (ASSIGN* 2))
 (member (mkTuple  obligation2T_2 obligation2UO_2) (ASSIGN* 2))
 (distinct obligation2S_2 obligation2U_2)
)))


(declare-fun obligation3U_2 () Int)
(declare-fun obligation3UA_2 () Int)
(declare-fun obligation3AT_2 () Int)
(declare-fun obligation3UO_2 () Int)
(declare-fun obligation3ar_2 () Int)
(declare-fun obligation3S_2 () Int)
(declare-fun obligation3T_2 () Int)
(assert (>= obligation3U_2 0))
(assert (>= obligation3UA_2 0))
(assert (>= obligation3AT_2 0))
(assert (>= obligation3UO_2 0))
(assert (= obligation3ar_2 46))
(assert (= obligation3S_2 5))
(assert (= obligation3T_2 26))
(assert (=> (= (obligation3 2) true) (and
 (member (mkTuple  obligation3U_2 obligation3S_2) (ASSIGN* 2))
 (member (mkTuple  obligation3S_2 obligation3UA_2) (ASSIGN* 2))
(member (mkTuple obligation3UA_2 obligation3ar_2 obligation3AT_2) (ASSOC 2))
 (member (mkTuple  obligation3UO_2 obligation3AT_2) (ASSIGN* 2))
 (member (mkTuple  obligation3T_2 obligation3UO_2) (ASSIGN* 2))
 (distinct obligation3S_2 obligation3U_2)
)))


(declare-fun obligation4U_2 () Int)
(declare-fun obligation4UA_2 () Int)
(declare-fun obligation4AT_2 () Int)
(declare-fun obligation4UO_2 () Int)
(declare-fun obligation4ar_2 () Int)
(declare-fun obligation4S_2 () Int)
(declare-fun obligation4T_2 () Int)
(assert (>= obligation4U_2 0))
(assert (>= obligation4UA_2 0))
(assert (>= obligation4AT_2 0))
(assert (>= obligation4UO_2 0))
(assert (= obligation4ar_2 46))
(assert (= obligation4S_2 20))
(assert (= obligation4T_2 26))
(assert (=> (= (obligation4 2) true) (and
 (member (mkTuple  obligation4U_2 obligation4S_2) (ASSIGN* 2))
 (member (mkTuple  obligation4S_2 obligation4UA_2) (ASSIGN* 2))
(member (mkTuple obligation4UA_2 obligation4ar_2 obligation4AT_2) (ASSOC 2))
 (member (mkTuple  obligation4UO_2 obligation4AT_2) (ASSIGN* 2))
 (member (mkTuple  obligation4T_2 obligation4UO_2) (ASSIGN* 2))
 (distinct obligation4S_2 obligation4U_2)
)))


(declare-fun obligation5U_2 () Int)
(declare-fun obligation5UA_2 () Int)
(declare-fun obligation5AT_2 () Int)
(declare-fun obligation5UO_2 () Int)
(declare-fun obligation5ar_2 () Int)
(declare-fun obligation5S_2 () Int)
(declare-fun obligation5T_2 () Int)
(assert (>= obligation5U_2 0))
(assert (>= obligation5UA_2 0))
(assert (>= obligation5AT_2 0))
(assert (>= obligation5UO_2 0))
(assert (= obligation5ar_2 43))
(assert (= obligation5S_2 22))
(assert (= obligation5T_2 26))
(assert (=> (= (obligation5 2) true) (and
 (member (mkTuple  obligation5U_2 obligation5S_2) (ASSIGN* 2))
 (member (mkTuple  obligation5S_2 obligation5UA_2) (ASSIGN* 2))
(member (mkTuple obligation5UA_2 obligation5ar_2 obligation5AT_2) (ASSOC 2))
 (member (mkTuple  obligation5UO_2 obligation5AT_2) (ASSIGN* 2))
 (member (mkTuple  obligation5T_2 obligation5UO_2) (ASSIGN* 2))
 (distinct obligation5S_2 obligation5U_2)
)))


(declare-fun obligation6U_2 () Int)
(declare-fun obligation6UA_2 () Int)
(declare-fun obligation6AT_2 () Int)
(declare-fun obligation6UO_2 () Int)
(declare-fun obligation6ar_2 () Int)
(declare-fun obligation6S_2 () Int)
(declare-fun obligation6T_2 () Int)
(assert (>= obligation6U_2 0))
(assert (>= obligation6UA_2 0))
(assert (>= obligation6AT_2 0))
(assert (>= obligation6UO_2 0))
(assert (= obligation6ar_2 44))
(assert (= obligation6S_2 23))
(assert (= obligation6T_2 26))
(assert (=> (= (obligation6 2) true) (and
 (member (mkTuple  obligation6U_2 obligation6S_2) (ASSIGN* 2))
 (member (mkTuple  obligation6S_2 obligation6UA_2) (ASSIGN* 2))
(member (mkTuple obligation6UA_2 obligation6ar_2 obligation6AT_2) (ASSOC 2))
 (member (mkTuple  obligation6UO_2 obligation6AT_2) (ASSIGN* 2))
 (member (mkTuple  obligation6T_2 obligation6UO_2) (ASSIGN* 2))
 (distinct obligation6S_2 obligation6U_2)
)))


(declare-fun obligation7U_2 () Int)
(declare-fun obligation7UA_2 () Int)
(declare-fun obligation7AT_2 () Int)
(declare-fun obligation7UO_2 () Int)
(declare-fun obligation7ar_2 () Int)
(declare-fun obligation7S_2 () Int)
(declare-fun obligation7T_2 () Int)
(assert (>= obligation7U_2 0))
(assert (>= obligation7UA_2 0))
(assert (>= obligation7AT_2 0))
(assert (>= obligation7UO_2 0))
(assert (= obligation7ar_2 46))
(assert (= obligation7S_2 10))
(assert (= obligation7T_2 26))
(assert (=> (= (obligation7 2) true) (and
 (member (mkTuple  obligation7U_2 obligation7S_2) (ASSIGN* 2))
 (member (mkTuple  obligation7S_2 obligation7UA_2) (ASSIGN* 2))
(member (mkTuple obligation7UA_2 obligation7ar_2 obligation7AT_2) (ASSOC 2))
 (member (mkTuple  obligation7UO_2 obligation7AT_2) (ASSIGN* 2))
 (member (mkTuple  obligation7T_2 obligation7UO_2) (ASSIGN* 2))
 (distinct obligation7S_2 obligation7U_2)
)))




; 5.2 a->Eff

(assert (=> (=(obligation1 2) true) (= (ASSIGN* 3) (ASSIGN* 2))))
(assert (=> (=(obligation1 2) true) (= (ASSIGN 3) (ASSIGN 2))))
(declare-fun ASSOCobligation1_0_3 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation1 2) true)(subset ASSOCobligation1_0_3 (union  (ASSOC 2) (singleton(mkTuple 1 46 26))))))
(declare-fun ASSOCobligation1_1_3 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation1 2) true)(subset ASSOCobligation1_1_3 (union  (ASSOC 2) (singleton(mkTuple 1 46 26))))))
(assert (= (ASSOC 3)  (union ASSOCobligation1_0_3 ASSOCobligation1_1_3))) 



(assert (=> (=(obligation2 2) true) (= (ASSIGN* 3) (ASSIGN* 2))))
(assert (=> (=(obligation2 2) true) (= (ASSIGN 3) (ASSIGN 2))))
(declare-fun ASSOCobligation2_0_3 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation2 2) true)(subset ASSOCobligation2_0_3 (union  (ASSOC 2) (singleton(mkTuple 5 46 26))))))
(declare-fun ASSOCobligation2_1_3 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation2 2) true)(subset ASSOCobligation2_1_3 (union  (ASSOC 2) (singleton(mkTuple 5 46 26))))))
(declare-fun ASSOCobligation2_2_3 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation2 2) true)(subset ASSOCobligation2_2_3 (union  (ASSOC 2) (singleton(mkTuple 5 46 26))))))
(declare-fun ASSOCobligation2_3_3 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation2 2) true)(subset ASSOCobligation2_3_3 (union  (ASSOC 2) (singleton(mkTuple 5 46 26))))))
(assert (= (ASSOC 3) (union ASSOCobligation2_0_3(union ASSOCobligation2_1_3 (union ASSOCobligation2_2_3 ASSOCobligation2_3_3))) ))



(assert (=> (= (obligation3 2) true)(subset (ASSIGN* 3) (union (join (join (union (singleton (mkTuple 6 6)) (join (ASSIGN* 2) (singleton (mkTuple 6 6)))) (singleton (mkTuple 6 14))) (union (singleton (mkTuple 14 14)) (join (singleton (mkTuple 14 14)) (ASSIGN* 2) ))) (ASSIGN* 2)))))
(assert (=> (= (obligation3 2) true)(subset (ASSIGN 3)( union (ASSIGN 2) (singleton (mkTuple 6 14))))))
(declare-fun ASSOCobligation3_0_3 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation3 2) true)(subset ASSOCobligation3_0_3 (union  (ASSOC 2) (singleton(mkTuple 20 46 26))))))
(declare-fun ASSOCobligation3_1_3 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation3 2) true)(subset ASSOCobligation3_1_3 (union  (ASSOC 2) (singleton(mkTuple 20 46 26))))))
(assert (= (ASSOC 3)  (union ASSOCobligation3_0_3 ASSOCobligation3_1_3))) 



(assert (=> (= (obligation4 2) true)(subset (ASSIGN* 3) (setminus (ASSIGN* 2) (setminus (setminus (union (singleton (mkTuple 6 14)) (join (singleton (mkTuple 6 14)) (ASSIGN* 2))) (join (join (intersection (join (union  (singleton (mkTuple 6 6)) (join (ASSIGN* 2)  (singleton (mkTuple 6 6)))) (transpose (union  (singleton (mkTuple 6 6)) (join (ASSIGN* 2)  (singleton (mkTuple 6 6)))))) NODES) (setminus (ASSIGN 2) (singleton (mkTuple 6 14)))) (ASSIGN* 2))) (join (join (intersection (join (union  (singleton (mkTuple 6 6)) (join (ASSIGN* 2)  (singleton (mkTuple 6 6)))) (transpose (union  (singleton (mkTuple 6 6)) (join (ASSIGN* 2)  (singleton (mkTuple 6 6)))))) NODES) (setminus (ASSIGN 2) (singleton (mkTuple 6 14)))) (ASSIGN* 2)))))))
(assert (=> (= (obligation4 2) true)(subset (ASSIGN 3) (setminus (ASSIGN 2) (singleton (mkTuple 6 14))))))

(declare-fun ASSOCobligation4_0_3 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation4 2) true)(subset ASSOCobligation4_0_3 (union  (ASSOC 2) (singleton(mkTuple 22 43 26))))))
(declare-fun ASSOCobligation4_1_3 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation4 2) true)(subset ASSOCobligation4_1_3 (union  (ASSOC 2) (singleton(mkTuple 22 43 26))))))
(assert (= (ASSOC 3)  (union ASSOCobligation4_0_3 ASSOCobligation4_1_3))) 



(assert (=> (=(obligation5 2) true) (= (ASSIGN* 3) (ASSIGN* 2))))
(assert (=> (=(obligation5 2) true) (= (ASSIGN 3) (ASSIGN 2))))
(declare-fun ASSOCobligation5_0_3 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation5 2) true)(subset ASSOCobligation5_0_3 (union  (ASSOC 2) (singleton(mkTuple 23 44 26))))))
(declare-fun ASSOCobligation5_1_3 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation5 2) true)(subset ASSOCobligation5_1_3 (union  (ASSOC 2) (singleton(mkTuple 23 44 26))))))
(assert (= (ASSOC 3)  (union ASSOCobligation5_0_3 ASSOCobligation5_1_3))) 



(assert (=> (=(obligation6 2) true) (= (ASSIGN* 3) (ASSIGN* 2))))
(assert (=> (=(obligation6 2) true) (= (ASSIGN 3) (ASSIGN 2))))
(declare-fun ASSOCobligation6_0_3 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation6 2) true)(subset ASSOCobligation6_0_3 (union  (ASSOC 2) (singleton(mkTuple 10 46 26))))))
(declare-fun ASSOCobligation6_1_3 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation6 2) true)(subset ASSOCobligation6_1_3 (union  (ASSOC 2) (singleton(mkTuple 10 46 26))))))
(assert (= (ASSOC 3)  (union ASSOCobligation6_0_3 ASSOCobligation6_1_3))) 



(assert (=> (=(obligation7 2) true) (= (ASSIGN* 3) (ASSIGN* 2))))
(assert (=> (=(obligation7 2) true) (= (ASSIGN 3) (ASSIGN 2))))
(declare-fun ASSOCobligation7_0_3 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation7 2) true)(subset ASSOCobligation7_0_3 (union  (ASSOC 2) (singleton(mkTuple 12 46 26))))))
(declare-fun ASSOCobligation7_1_3 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation7 2) true)(subset ASSOCobligation7_1_3 (union  (ASSOC 2) (singleton(mkTuple 12 46 26))))))
(assert (= (ASSOC 3)  (union ASSOCobligation7_0_3 ASSOCobligation7_1_3))) 




; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 3) (ASSIGN* 2))
(or 
(= (obligation7 2) true)(= (obligation6 2) true)(= (obligation3 2) true)(= (obligation2 2) true)(= (obligation5 2) true)(= (obligation4 2) true)(= (obligation1 2) true))))
(assert (=> (distinct (ASSIGN 3) (ASSIGN 2))
(or (= (obligation7 2) true)(= (obligation6 2) true)(= (obligation3 2) true)(= (obligation2 2) true)(= (obligation5 2) true)(= (obligation4 2) true)(= (obligation1 2) true))))
(assert (=> (distinct (ASSOC 3) (ASSOC 2))
(or 
(= (obligation7 2) true)(= (obligation6 2) true)(= (obligation3 2) true)(= (obligation2 2) true)(= (obligation5 2) true)(= (obligation4 2) true)(= (obligation1 2) true))))


; 5.4 Exactly one naive


; AT MOST ONE
(assert (not (and (= (obligation7 2) true) (= (obligation6 2) true))))
(assert (not (and (= (obligation7 2) true) (= (obligation3 2) true))))
(assert (not (and (= (obligation7 2) true) (= (obligation2 2) true))))
(assert (not (and (= (obligation7 2) true) (= (obligation5 2) true))))
(assert (not (and (= (obligation7 2) true) (= (obligation4 2) true))))
(assert (not (and (= (obligation7 2) true) (= (obligation1 2) true))))
(assert (not (and (= (obligation6 2) true) (= (obligation3 2) true))))
(assert (not (and (= (obligation6 2) true) (= (obligation2 2) true))))
(assert (not (and (= (obligation6 2) true) (= (obligation5 2) true))))
(assert (not (and (= (obligation6 2) true) (= (obligation4 2) true))))
(assert (not (and (= (obligation6 2) true) (= (obligation1 2) true))))
(assert (not (and (= (obligation3 2) true) (= (obligation2 2) true))))
(assert (not (and (= (obligation3 2) true) (= (obligation5 2) true))))
(assert (not (and (= (obligation3 2) true) (= (obligation4 2) true))))
(assert (not (and (= (obligation3 2) true) (= (obligation1 2) true))))
(assert (not (and (= (obligation2 2) true) (= (obligation5 2) true))))
(assert (not (and (= (obligation2 2) true) (= (obligation4 2) true))))
(assert (not (and (= (obligation2 2) true) (= (obligation1 2) true))))
(assert (not (and (= (obligation5 2) true) (= (obligation4 2) true))))
(assert (not (and (= (obligation5 2) true) (= (obligation1 2) true))))
(assert (not (and (= (obligation4 2) true) (= (obligation1 2) true))))

; AT LEAST ONE
(assert (or(= (obligation7 2) true)(= (obligation6 2) true)(= (obligation3 2) true)(= (obligation2 2) true)(= (obligation5 2) true)(= (obligation4 2) true)(= (obligation1 2) true)))


(assert 
(= (obligation4 2) true)
)
(check-sat)
(get-value (obligation7))
(get-value (obligation6))
(get-value (obligation3))
(get-value (obligation2))
(get-value (obligation5))
(get-value (obligation4))
(get-value (obligation1))
(get-value (obligation1U_0))
(get-value (obligation1UA_0))
(get-value (obligation1AT_0))
(get-value (obligation1UO_0))
(get-value (obligation1S_0))
(get-value (obligation1T_0))
(get-value (obligation1ar_0))
(get-value (obligation2U_0))
(get-value (obligation2UA_0))
(get-value (obligation2AT_0))
(get-value (obligation2UO_0))
(get-value (obligation2S_0))
(get-value (obligation2T_0))
(get-value (obligation2ar_0))
(get-value (obligation3U_0))
(get-value (obligation3UA_0))
(get-value (obligation3AT_0))
(get-value (obligation3UO_0))
(get-value (obligation3S_0))
(get-value (obligation3T_0))
(get-value (obligation3ar_0))
(get-value (obligation4U_0))
(get-value (obligation4UA_0))
(get-value (obligation4AT_0))
(get-value (obligation4UO_0))
(get-value (obligation4S_0))
(get-value (obligation4T_0))
(get-value (obligation4ar_0))
(get-value (obligation5U_0))
(get-value (obligation5UA_0))
(get-value (obligation5AT_0))
(get-value (obligation5UO_0))
(get-value (obligation5S_0))
(get-value (obligation5T_0))
(get-value (obligation5ar_0))
(get-value (obligation6U_0))
(get-value (obligation6UA_0))
(get-value (obligation6AT_0))
(get-value (obligation6UO_0))
(get-value (obligation6S_0))
(get-value (obligation6T_0))
(get-value (obligation6ar_0))
(get-value (obligation7U_0))
(get-value (obligation7UA_0))
(get-value (obligation7AT_0))
(get-value (obligation7UO_0))
(get-value (obligation7S_0))
(get-value (obligation7T_0))
(get-value (obligation7ar_0))
(get-value (obligation1U_0))
(get-value (obligation1UA_0))
(get-value (obligation1AT_0))
(get-value (obligation1UO_0))
(get-value (obligation1S_0))
(get-value (obligation1T_0))
(get-value (obligation1ar_0))
(get-value (obligation2U_0))
(get-value (obligation2UA_0))
(get-value (obligation2AT_0))
(get-value (obligation2UO_0))
(get-value (obligation2S_0))
(get-value (obligation2T_0))
(get-value (obligation2ar_0))
(get-value (obligation3U_0))
(get-value (obligation3UA_0))
(get-value (obligation3AT_0))
(get-value (obligation3UO_0))
(get-value (obligation3S_0))
(get-value (obligation3T_0))
(get-value (obligation3ar_0))
(get-value (obligation4U_0))
(get-value (obligation4UA_0))
(get-value (obligation4AT_0))
(get-value (obligation4UO_0))
(get-value (obligation4S_0))
(get-value (obligation4T_0))
(get-value (obligation4ar_0))
(get-value (obligation5U_0))
(get-value (obligation5UA_0))
(get-value (obligation5AT_0))
(get-value (obligation5UO_0))
(get-value (obligation5S_0))
(get-value (obligation5T_0))
(get-value (obligation5ar_0))
(get-value (obligation6U_0))
(get-value (obligation6UA_0))
(get-value (obligation6AT_0))
(get-value (obligation6UO_0))
(get-value (obligation6S_0))
(get-value (obligation6T_0))
(get-value (obligation6ar_0))
(get-value (obligation7U_0))
(get-value (obligation7UA_0))
(get-value (obligation7AT_0))
(get-value (obligation7UO_0))
(get-value (obligation7S_0))
(get-value (obligation7T_0))
(get-value (obligation7ar_0))
(get-value (obligation1U_1))
(get-value (obligation1UA_1))
(get-value (obligation1AT_1))
(get-value (obligation1UO_1))
(get-value (obligation1S_1))
(get-value (obligation1T_1))
(get-value (obligation1ar_1))
(get-value (obligation2U_1))
(get-value (obligation2UA_1))
(get-value (obligation2AT_1))
(get-value (obligation2UO_1))
(get-value (obligation2S_1))
(get-value (obligation2T_1))
(get-value (obligation2ar_1))
(get-value (obligation3U_1))
(get-value (obligation3UA_1))
(get-value (obligation3AT_1))
(get-value (obligation3UO_1))
(get-value (obligation3S_1))
(get-value (obligation3T_1))
(get-value (obligation3ar_1))
(get-value (obligation4U_1))
(get-value (obligation4UA_1))
(get-value (obligation4AT_1))
(get-value (obligation4UO_1))
(get-value (obligation4S_1))
(get-value (obligation4T_1))
(get-value (obligation4ar_1))
(get-value (obligation5U_1))
(get-value (obligation5UA_1))
(get-value (obligation5AT_1))
(get-value (obligation5UO_1))
(get-value (obligation5S_1))
(get-value (obligation5T_1))
(get-value (obligation5ar_1))
(get-value (obligation6U_1))
(get-value (obligation6UA_1))
(get-value (obligation6AT_1))
(get-value (obligation6UO_1))
(get-value (obligation6S_1))
(get-value (obligation6T_1))
(get-value (obligation6ar_1))
(get-value (obligation7U_1))
(get-value (obligation7UA_1))
(get-value (obligation7AT_1))
(get-value (obligation7UO_1))
(get-value (obligation7S_1))
(get-value (obligation7T_1))
(get-value (obligation7ar_1))
(get-value (obligation1U_0))
(get-value (obligation1UA_0))
(get-value (obligation1AT_0))
(get-value (obligation1UO_0))
(get-value (obligation1S_0))
(get-value (obligation1T_0))
(get-value (obligation1ar_0))
(get-value (obligation2U_0))
(get-value (obligation2UA_0))
(get-value (obligation2AT_0))
(get-value (obligation2UO_0))
(get-value (obligation2S_0))
(get-value (obligation2T_0))
(get-value (obligation2ar_0))
(get-value (obligation3U_0))
(get-value (obligation3UA_0))
(get-value (obligation3AT_0))
(get-value (obligation3UO_0))
(get-value (obligation3S_0))
(get-value (obligation3T_0))
(get-value (obligation3ar_0))
(get-value (obligation4U_0))
(get-value (obligation4UA_0))
(get-value (obligation4AT_0))
(get-value (obligation4UO_0))
(get-value (obligation4S_0))
(get-value (obligation4T_0))
(get-value (obligation4ar_0))
(get-value (obligation5U_0))
(get-value (obligation5UA_0))
(get-value (obligation5AT_0))
(get-value (obligation5UO_0))
(get-value (obligation5S_0))
(get-value (obligation5T_0))
(get-value (obligation5ar_0))
(get-value (obligation6U_0))
(get-value (obligation6UA_0))
(get-value (obligation6AT_0))
(get-value (obligation6UO_0))
(get-value (obligation6S_0))
(get-value (obligation6T_0))
(get-value (obligation6ar_0))
(get-value (obligation7U_0))
(get-value (obligation7UA_0))
(get-value (obligation7AT_0))
(get-value (obligation7UO_0))
(get-value (obligation7S_0))
(get-value (obligation7T_0))
(get-value (obligation7ar_0))
(get-value (obligation1U_1))
(get-value (obligation1UA_1))
(get-value (obligation1AT_1))
(get-value (obligation1UO_1))
(get-value (obligation1S_1))
(get-value (obligation1T_1))
(get-value (obligation1ar_1))
(get-value (obligation2U_1))
(get-value (obligation2UA_1))
(get-value (obligation2AT_1))
(get-value (obligation2UO_1))
(get-value (obligation2S_1))
(get-value (obligation2T_1))
(get-value (obligation2ar_1))
(get-value (obligation3U_1))
(get-value (obligation3UA_1))
(get-value (obligation3AT_1))
(get-value (obligation3UO_1))
(get-value (obligation3S_1))
(get-value (obligation3T_1))
(get-value (obligation3ar_1))
(get-value (obligation4U_1))
(get-value (obligation4UA_1))
(get-value (obligation4AT_1))
(get-value (obligation4UO_1))
(get-value (obligation4S_1))
(get-value (obligation4T_1))
(get-value (obligation4ar_1))
(get-value (obligation5U_1))
(get-value (obligation5UA_1))
(get-value (obligation5AT_1))
(get-value (obligation5UO_1))
(get-value (obligation5S_1))
(get-value (obligation5T_1))
(get-value (obligation5ar_1))
(get-value (obligation6U_1))
(get-value (obligation6UA_1))
(get-value (obligation6AT_1))
(get-value (obligation6UO_1))
(get-value (obligation6S_1))
(get-value (obligation6T_1))
(get-value (obligation6ar_1))
(get-value (obligation7U_1))
(get-value (obligation7UA_1))
(get-value (obligation7AT_1))
(get-value (obligation7UO_1))
(get-value (obligation7S_1))
(get-value (obligation7T_1))
(get-value (obligation7ar_1))
(get-value (obligation1U_2))
(get-value (obligation1UA_2))
(get-value (obligation1AT_2))
(get-value (obligation1UO_2))
(get-value (obligation1S_2))
(get-value (obligation1T_2))
(get-value (obligation1ar_2))
(get-value (obligation2U_2))
(get-value (obligation2UA_2))
(get-value (obligation2AT_2))
(get-value (obligation2UO_2))
(get-value (obligation2S_2))
(get-value (obligation2T_2))
(get-value (obligation2ar_2))
(get-value (obligation3U_2))
(get-value (obligation3UA_2))
(get-value (obligation3AT_2))
(get-value (obligation3UO_2))
(get-value (obligation3S_2))
(get-value (obligation3T_2))
(get-value (obligation3ar_2))
(get-value (obligation4U_2))
(get-value (obligation4UA_2))
(get-value (obligation4AT_2))
(get-value (obligation4UO_2))
(get-value (obligation4S_2))
(get-value (obligation4T_2))
(get-value (obligation4ar_2))
(get-value (obligation5U_2))
(get-value (obligation5UA_2))
(get-value (obligation5AT_2))
(get-value (obligation5UO_2))
(get-value (obligation5S_2))
(get-value (obligation5T_2))
(get-value (obligation5ar_2))
(get-value (obligation6U_2))
(get-value (obligation6UA_2))
(get-value (obligation6AT_2))
(get-value (obligation6UO_2))
(get-value (obligation6S_2))
(get-value (obligation6T_2))
(get-value (obligation6ar_2))
(get-value (obligation7U_2))
(get-value (obligation7UA_2))
(get-value (obligation7AT_2))
(get-value (obligation7UO_2))
(get-value (obligation7S_2))
(get-value (obligation7T_2))
(get-value (obligation7ar_2))
