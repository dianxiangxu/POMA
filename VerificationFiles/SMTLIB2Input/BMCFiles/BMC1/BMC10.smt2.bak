(set-logic QF_ALL)
(set-option :produce-models true)
(declare-fun USERS () (Set (Tuple Int Int)))
(assert (= USERS (set.insert (tuple 12 12) 
(tuple 3 3) 
(tuple 9 9) 
(tuple 1 1) 
(tuple 17 17) 
(tuple 22 22) 
(tuple 15 15) 
(set.singleton (tuple 5 5)))))
(declare-fun ASSIGN* (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN* 0) (set.insert (tuple 12 23) 
(tuple 17 13) 
(tuple 10 10) 
(tuple 9 10) 
(tuple 6 13) 
(tuple 17 17) 
(tuple 7 21) 
(tuple 12 19) 
(tuple 18 21) 
(tuple 16 21) 
(tuple 5 21) 
(tuple 8 21) 
(tuple 17 21) 
(tuple 12 12) 
(tuple 10 21) 
(tuple 23 21) 
(tuple 12 16) 
(tuple 3 11) 
(tuple 11 21) 
(tuple 18 18) 
(tuple 22 22) 
(tuple 15 15) 
(tuple 6 21) 
(tuple 22 2) 
(tuple 19 21) 
(tuple 3 3) 
(tuple 4 4) 
(tuple 12 21) 
(tuple 1 1) 
(tuple 2 2) 
(tuple 12 4) 
(tuple 20 21) 
(tuple 14 14) 
(tuple 1 21) 
(tuple 5 11) 
(tuple 22 21) 
(tuple 21 21) 
(tuple 13 21) 
(tuple 13 13) 
(tuple 1 8) 
(tuple 4 21) 
(tuple 19 19) 
(tuple 23 23) 
(tuple 9 21) 
(tuple 16 16) 
(tuple 14 21) 
(tuple 12 18) 
(tuple 20 20) 
(tuple 3 21) 
(tuple 12 14) 
(tuple 11 11) 
(tuple 9 9) 
(tuple 15 8) 
(tuple 5 5) 
(tuple 8 8) 
(tuple 15 21) 
(tuple 6 6) 
(tuple 7 7) 
(set.singleton (tuple 2 21)))))
(declare-fun ASSIGN (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN 0) (set.insert (tuple 12 23) 
(tuple 17 13) 
(tuple 10 10) 
(tuple 9 10) 
(tuple 6 13) 
(tuple 17 17) 
(tuple 7 21) 
(tuple 12 19) 
(tuple 18 21) 
(tuple 16 21) 
(tuple 8 21) 
(tuple 12 12) 
(tuple 10 21) 
(tuple 23 21) 
(tuple 12 16) 
(tuple 3 11) 
(tuple 11 21) 
(tuple 18 18) 
(tuple 22 22) 
(tuple 15 15) 
(tuple 22 2) 
(tuple 19 21) 
(tuple 3 3) 
(tuple 4 4) 
(tuple 1 1) 
(tuple 2 2) 
(tuple 12 4) 
(tuple 20 21) 
(tuple 14 14) 
(tuple 5 11) 
(tuple 13 21) 
(tuple 13 13) 
(tuple 4 21) 
(tuple 1 8) 
(tuple 19 19) 
(tuple 23 23) 
(tuple 14 21) 
(tuple 16 16) 
(tuple 12 18) 
(tuple 20 20) 
(tuple 12 14) 
(tuple 9 9) 
(tuple 11 11) 
(tuple 15 8) 
(tuple 5 5) 
(tuple 8 8) 
(tuple 6 6) 
(tuple 2 21) 
(set.singleton (tuple 7 7)))))
(declare-fun ASSOC (Int) (Set (Tuple Int Int Int)))

(assert (= (ASSOC 0) (set.insert(tuple 18 24 20) 
(tuple 18 24 20) 
(set.singleton (tuple 18 24 20)))))

(declare-fun NODES () (Set (Tuple Int Int)))
(assert (= NODES (set.insert (tuple 1 1) 
(tuple 2 2) 
(tuple 3 3) 
(tuple 4 4) 
(tuple 5 5) 
(tuple 6 6) 
(tuple 7 7) 
(tuple 8 8) 
(tuple 9 9) 
(tuple 10 10) 
(tuple 11 11) 
(tuple 12 12) 
(tuple 13 13) 
(tuple 14 14) 
(tuple 15 15) 
(tuple 16 16) 
(tuple 17 17) 
(tuple 18 18) 
(tuple 19 19) 
(tuple 20 20) 
(tuple 21 21) 
(tuple 22 22) 
(set.singleton (tuple 23 23))))) 


(declare-fun obligation7 (Int) Bool)
(declare-fun obligation6 (Int) Bool)
(declare-fun obligation9 (Int) Bool)
(declare-fun obligation8 (Int) Bool)
(declare-fun obligation3 (Int) Bool)
(declare-fun obligation2 (Int) Bool)
(declare-fun obligation5 (Int) Bool)
(declare-fun obligation4 (Int) Bool)
(declare-fun obligation1 (Int) Bool)
(declare-fun obligation10 (Int) Bool)
(declare-fun obligation0 (Int) Bool)
;--------------------------------------------------------------------------------------------------------------------
;STEP1

; 5.1 a->PRE
(declare-fun obligation0U_0 () Int)
(declare-fun obligation0UA_0 () Int)
(declare-fun obligation0AT_0 () Int)
(declare-fun obligation0UO_0 () Int)
(declare-fun obligation0ar_0 () Int)
(declare-fun obligation0S_0 () Int)
(declare-fun obligation0T_0 () Int)
(assert (>= obligation0U_0 0))
(assert (>= obligation0UA_0 0))
(assert (>= obligation0AT_0 0))
(assert (>= obligation0UO_0 0))
(assert (or (= obligation0ar_0 24)
))
(assert (= obligation0S_0 18))
(assert (= obligation0T_0 20))
(assert (=> (= (obligation0 0) true) (and
 (set.member (tuple  obligation0U_0 obligation0S_0) (ASSIGN* 0))
 (set.member (tuple  obligation0U_0 obligation0UA_0) (ASSIGN* 0))
 (set.member (tuple obligation0UA_0 obligation0ar_0 obligation0AT_0) (ASSOC 0))
 (set.member (tuple  obligation0UO_0 obligation0T_0) (ASSIGN* 0))
 (set.member (tuple  obligation0UO_0 obligation0AT_0) (ASSIGN* 0))
 (set.member (tuple  obligation0U_0 obligation0U_0) USERS)
 (distinct obligation0S_0 obligation0U_0)
)))


(declare-fun obligation1U_0 () Int)
(declare-fun obligation1UA_0 () Int)
(declare-fun obligation1AT_0 () Int)
(declare-fun obligation1UO_0 () Int)
(declare-fun obligation1ar_0 () Int)
(declare-fun obligation1S_0 () Int)
(declare-fun obligation1T_0 () Int)
(assert (>= obligation1U_0 0))
(assert (>= obligation1UA_0 0))
(assert (>= obligation1AT_0 0))
(assert (>= obligation1UO_0 0))
(assert (or (= obligation1ar_0 32)
))
(assert (= obligation1S_0 16))
(assert (= obligation1T_0 20))
(assert (=> (= (obligation1 0) true) (and
 (set.member (tuple  obligation1U_0 obligation1S_0) (ASSIGN* 0))
 (set.member (tuple  obligation1U_0 obligation1UA_0) (ASSIGN* 0))
 (set.member (tuple obligation1UA_0 obligation1ar_0 obligation1AT_0) (ASSOC 0))
 (set.member (tuple  obligation1UO_0 obligation1T_0) (ASSIGN* 0))
 (set.member (tuple  obligation1UO_0 obligation1AT_0) (ASSIGN* 0))
 (set.member (tuple  obligation1U_0 obligation1U_0) USERS)
 (distinct obligation1S_0 obligation1U_0)
)))


(declare-fun obligation2U_0 () Int)
(declare-fun obligation2UA_0 () Int)
(declare-fun obligation2AT_0 () Int)
(declare-fun obligation2UO_0 () Int)
(declare-fun obligation2ar_0 () Int)
(declare-fun obligation2S_0 () Int)
(declare-fun obligation2T_0 () Int)
(assert (>= obligation2U_0 0))
(assert (>= obligation2UA_0 0))
(assert (>= obligation2AT_0 0))
(assert (>= obligation2UO_0 0))
(assert (or (= obligation2ar_0 26)
))
(assert (= obligation2S_0 4))
(assert (= obligation2T_0 20))
(assert (=> (= (obligation2 0) true) (and
 (set.member (tuple  obligation2U_0 obligation2S_0) (ASSIGN* 0))
 (set.member (tuple  obligation2U_0 obligation2UA_0) (ASSIGN* 0))
 (set.member (tuple obligation2UA_0 obligation2ar_0 obligation2AT_0) (ASSOC 0))
 (set.member (tuple  obligation2UO_0 obligation2T_0) (ASSIGN* 0))
 (set.member (tuple  obligation2UO_0 obligation2AT_0) (ASSIGN* 0))
 (set.member (tuple  obligation2U_0 obligation2U_0) USERS)
 (distinct obligation2S_0 obligation2U_0)
)))


(declare-fun obligation3U_0 () Int)
(declare-fun obligation3UA_0 () Int)
(declare-fun obligation3AT_0 () Int)
(declare-fun obligation3UO_0 () Int)
(declare-fun obligation3ar_0 () Int)
(declare-fun obligation3S_0 () Int)
(declare-fun obligation3T_0 () Int)
(assert (>= obligation3U_0 0))
(assert (>= obligation3UA_0 0))
(assert (>= obligation3AT_0 0))
(assert (>= obligation3UO_0 0))
(assert (or (= obligation3ar_0 27)
))
(assert (= obligation3S_0 23))
(assert (= obligation3T_0 20))
(assert (=> (= (obligation3 0) true) (and
 (set.member (tuple  obligation3U_0 obligation3S_0) (ASSIGN* 0))
 (set.member (tuple  obligation3U_0 obligation3UA_0) (ASSIGN* 0))
 (set.member (tuple obligation3UA_0 obligation3ar_0 obligation3AT_0) (ASSOC 0))
 (set.member (tuple  obligation3UO_0 obligation3T_0) (ASSIGN* 0))
 (set.member (tuple  obligation3UO_0 obligation3AT_0) (ASSIGN* 0))
 (set.member (tuple  obligation3U_0 obligation3U_0) USERS)
 (distinct obligation3S_0 obligation3U_0)
)))


(declare-fun obligation4U_0 () Int)
(declare-fun obligation4UA_0 () Int)
(declare-fun obligation4AT_0 () Int)
(declare-fun obligation4UO_0 () Int)
(declare-fun obligation4ar_0 () Int)
(declare-fun obligation4S_0 () Int)
(declare-fun obligation4T_0 () Int)
(assert (>= obligation4U_0 0))
(assert (>= obligation4UA_0 0))
(assert (>= obligation4AT_0 0))
(assert (>= obligation4UO_0 0))
(assert (or (= obligation4ar_0 28)
))
(assert (= obligation4S_0 19))
(assert (= obligation4T_0 20))
(assert (=> (= (obligation4 0) true) (and
 (set.member (tuple  obligation4U_0 obligation4S_0) (ASSIGN* 0))
 (set.member (tuple  obligation4U_0 obligation4UA_0) (ASSIGN* 0))
 (set.member (tuple obligation4UA_0 obligation4ar_0 obligation4AT_0) (ASSOC 0))
 (set.member (tuple  obligation4UO_0 obligation4T_0) (ASSIGN* 0))
 (set.member (tuple  obligation4UO_0 obligation4AT_0) (ASSIGN* 0))
 (set.member (tuple  obligation4U_0 obligation4U_0) USERS)
 (distinct obligation4S_0 obligation4U_0)
)))


(declare-fun obligation5U_0 () Int)
(declare-fun obligation5UA_0 () Int)
(declare-fun obligation5AT_0 () Int)
(declare-fun obligation5UO_0 () Int)
(declare-fun obligation5ar_0 () Int)
(declare-fun obligation5S_0 () Int)
(declare-fun obligation5T_0 () Int)
(assert (>= obligation5U_0 0))
(assert (>= obligation5UA_0 0))
(assert (>= obligation5AT_0 0))
(assert (>= obligation5UO_0 0))
(assert (or (= obligation5ar_0 35)
))
(assert (= obligation5S_0 14))
(assert (= obligation5T_0 20))
(assert (=> (= (obligation5 0) true) (and
 (set.member (tuple  obligation5U_0 obligation5S_0) (ASSIGN* 0))
 (set.member (tuple  obligation5U_0 obligation5UA_0) (ASSIGN* 0))
 (set.member (tuple obligation5UA_0 obligation5ar_0 obligation5AT_0) (ASSOC 0))
 (set.member (tuple  obligation5UO_0 obligation5T_0) (ASSIGN* 0))
 (set.member (tuple  obligation5UO_0 obligation5AT_0) (ASSIGN* 0))
 (set.member (tuple  obligation5U_0 obligation5U_0) USERS)
 (distinct obligation5S_0 obligation5U_0)
)))


(declare-fun obligation6U_0 () Int)
(declare-fun obligation6UA_0 () Int)
(declare-fun obligation6AT_0 () Int)
(declare-fun obligation6UO_0 () Int)
(declare-fun obligation6ar_0 () Int)
(declare-fun obligation6S_0 () Int)
(declare-fun obligation6T_0 () Int)
(assert (>= obligation6U_0 0))
(assert (>= obligation6UA_0 0))
(assert (>= obligation6AT_0 0))
(assert (>= obligation6UO_0 0))
(assert (or (= obligation6ar_0 30)
))
(assert (= obligation6S_0 2))
(assert (= obligation6T_0 20))
(assert (=> (= (obligation6 0) true) (and
 (set.member (tuple  obligation6U_0 obligation6S_0) (ASSIGN* 0))
 (set.member (tuple  obligation6U_0 obligation6UA_0) (ASSIGN* 0))
 (set.member (tuple obligation6UA_0 obligation6ar_0 obligation6AT_0) (ASSOC 0))
 (set.member (tuple  obligation6UO_0 obligation6T_0) (ASSIGN* 0))
 (set.member (tuple  obligation6UO_0 obligation6AT_0) (ASSIGN* 0))
 (set.member (tuple  obligation6U_0 obligation6U_0) USERS)
 (distinct obligation6S_0 obligation6U_0)
)))


(declare-fun obligation7U_0 () Int)
(declare-fun obligation7UA_0 () Int)
(declare-fun obligation7AT_0 () Int)
(declare-fun obligation7UO_0 () Int)
(declare-fun obligation7ar_0 () Int)
(declare-fun obligation7S_0 () Int)
(declare-fun obligation7T_0 () Int)
(assert (>= obligation7U_0 0))
(assert (>= obligation7UA_0 0))
(assert (>= obligation7AT_0 0))
(assert (>= obligation7UO_0 0))
(assert (or (= obligation7ar_0 31)
))
(assert (= obligation7S_0 8))
(assert (= obligation7T_0 20))
(assert (=> (= (obligation7 0) true) (and
 (set.member (tuple  obligation7U_0 obligation7S_0) (ASSIGN* 0))
 (set.member (tuple  obligation7U_0 obligation7UA_0) (ASSIGN* 0))
 (set.member (tuple obligation7UA_0 obligation7ar_0 obligation7AT_0) (ASSOC 0))
 (set.member (tuple  obligation7UO_0 obligation7T_0) (ASSIGN* 0))
 (set.member (tuple  obligation7UO_0 obligation7AT_0) (ASSIGN* 0))
 (set.member (tuple  obligation7U_0 obligation7U_0) USERS)
 (distinct obligation7S_0 obligation7U_0)
)))


(declare-fun obligation8U_0 () Int)
(declare-fun obligation8UA_0 () Int)
(declare-fun obligation8AT_0 () Int)
(declare-fun obligation8UO_0 () Int)
(declare-fun obligation8ar_0 () Int)
(declare-fun obligation8S_0 () Int)
(declare-fun obligation8T_0 () Int)
(assert (>= obligation8U_0 0))
(assert (>= obligation8UA_0 0))
(assert (>= obligation8AT_0 0))
(assert (>= obligation8UO_0 0))
(assert (or (= obligation8ar_0 32)
))
(assert (= obligation8S_0 10))
(assert (= obligation8T_0 20))
(assert (=> (= (obligation8 0) true) (and
 (set.member (tuple  obligation8U_0 obligation8S_0) (ASSIGN* 0))
 (set.member (tuple  obligation8U_0 obligation8UA_0) (ASSIGN* 0))
 (set.member (tuple obligation8UA_0 obligation8ar_0 obligation8AT_0) (ASSOC 0))
 (set.member (tuple  obligation8UO_0 obligation8T_0) (ASSIGN* 0))
 (set.member (tuple  obligation8UO_0 obligation8AT_0) (ASSIGN* 0))
 (set.member (tuple  obligation8U_0 obligation8U_0) USERS)
 (distinct obligation8S_0 obligation8U_0)
)))


(declare-fun obligation9U_0 () Int)
(declare-fun obligation9UA_0 () Int)
(declare-fun obligation9AT_0 () Int)
(declare-fun obligation9UO_0 () Int)
(declare-fun obligation9ar_0 () Int)
(declare-fun obligation9S_0 () Int)
(declare-fun obligation9T_0 () Int)
(assert (>= obligation9U_0 0))
(assert (>= obligation9UA_0 0))
(assert (>= obligation9AT_0 0))
(assert (>= obligation9UO_0 0))
(assert (or (= obligation9ar_0 33)
))
(assert (= obligation9S_0 11))
(assert (= obligation9T_0 20))
(assert (=> (= (obligation9 0) true) (and
 (set.member (tuple  obligation9U_0 obligation9S_0) (ASSIGN* 0))
 (set.member (tuple  obligation9U_0 obligation9UA_0) (ASSIGN* 0))
 (set.member (tuple obligation9UA_0 obligation9ar_0 obligation9AT_0) (ASSOC 0))
 (set.member (tuple  obligation9UO_0 obligation9T_0) (ASSIGN* 0))
 (set.member (tuple  obligation9UO_0 obligation9AT_0) (ASSIGN* 0))
 (set.member (tuple  obligation9U_0 obligation9U_0) USERS)
 (distinct obligation9S_0 obligation9U_0)
)))


(declare-fun obligation10U_0 () Int)
(declare-fun obligation10UA_0 () Int)
(declare-fun obligation10AT_0 () Int)
(declare-fun obligation10UO_0 () Int)
(declare-fun obligation10ar_0 () Int)
(declare-fun obligation10S_0 () Int)
(declare-fun obligation10T_0 () Int)
(assert (>= obligation10U_0 0))
(assert (>= obligation10UA_0 0))
(assert (>= obligation10AT_0 0))
(assert (>= obligation10UO_0 0))
(assert (or (= obligation10ar_0 34)
))
(assert (= obligation10S_0 13))
(assert (= obligation10T_0 20))
(assert (=> (= (obligation10 0) true) (and
 (set.member (tuple  obligation10U_0 obligation10S_0) (ASSIGN* 0))
 (set.member (tuple  obligation10U_0 obligation10UA_0) (ASSIGN* 0))
 (set.member (tuple obligation10UA_0 obligation10ar_0 obligation10AT_0) (ASSOC 0))
 (set.member (tuple  obligation10UO_0 obligation10T_0) (ASSIGN* 0))
 (set.member (tuple  obligation10UO_0 obligation10AT_0) (ASSIGN* 0))
 (set.member (tuple  obligation10U_0 obligation10U_0) USERS)
 (distinct obligation10S_0 obligation10U_0)
)))




; 5.2 a->Eff

(declare-fun obligation0_GrantAction_1_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation0 0) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation0_GrantAction_1_0
		(=>(not (set.member (tuple 16 32 20) (ASSOC 0))) (= obligation0_GrantAction_1_0 (set.singleton(tuple 16 32 20))))

		(=>(not (not (set.member (tuple 16 32 20) (ASSOC 0)))) (= obligation0_GrantAction_1_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 1) (ASSIGN 0)))
(assert (= (ASSIGN* 1) (ASSIGN* 0)))
(assert (= (ASSOC 1) 
	(set.union (ASSOC 0)  obligation0_GrantAction_1_0)
))



(declare-fun obligation1_GrantAction_1_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation1 0) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation1_GrantAction_1_0
		(=>(not (set.member (tuple 4 26 20) (ASSOC 0))) (= obligation1_GrantAction_1_0 (set.singleton(tuple 4 26 20))))

		(=>(not (not (set.member (tuple 4 26 20) (ASSOC 0)))) (= obligation1_GrantAction_1_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 1) (ASSIGN 0)))
(assert (= (ASSIGN* 1) (ASSIGN* 0)))
(assert (= (ASSOC 1) 
	(set.union (ASSOC 0)  obligation1_GrantAction_1_0)
))



(declare-fun obligation2_GrantAction_1_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation2 0) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation2_GrantAction_1_0
		(=>(not (set.member (tuple 23 27 20) (ASSOC 0))) (= obligation2_GrantAction_1_0 (set.singleton(tuple 23 27 20))))

		(=>(not (not (set.member (tuple 23 27 20) (ASSOC 0)))) (= obligation2_GrantAction_1_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 1) (ASSIGN 0)))
(assert (= (ASSIGN* 1) (ASSIGN* 0)))
(assert (= (ASSOC 1) 
	(set.union (ASSOC 0)  obligation2_GrantAction_1_0)
))



(declare-fun obligation3_GrantAction_1_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation3 0) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation3_GrantAction_1_0
		(=>(not (set.member (tuple 19 28 20) (ASSOC 0))) (= obligation3_GrantAction_1_0 (set.singleton(tuple 19 28 20))))

		(=>(not (not (set.member (tuple 19 28 20) (ASSOC 0)))) (= obligation3_GrantAction_1_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 1) (ASSIGN 0)))
(assert (= (ASSIGN* 1) (ASSIGN* 0)))
(assert (= (ASSOC 1) 
	(set.union (ASSOC 0)  obligation3_GrantAction_1_0)
))



(declare-fun obligation4_GrantAction_1_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation4 0) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation4_GrantAction_1_0
		(=>(not (set.member (tuple 14 35 20) (ASSOC 0))) (= obligation4_GrantAction_1_0 (set.singleton(tuple 14 35 20))))

		(=>(not (not (set.member (tuple 14 35 20) (ASSOC 0)))) (= obligation4_GrantAction_1_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 1) (ASSIGN 0)))
(assert (= (ASSIGN* 1) (ASSIGN* 0)))
(assert (= (ASSOC 1) 
	(set.union (ASSOC 0)  obligation4_GrantAction_1_0)
))



(declare-fun obligation5_GrantAction_1_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation5 0) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation5_GrantAction_1_0
		(=>(not (set.member (tuple 2 30 20) (ASSOC 0))) (= obligation5_GrantAction_1_0 (set.singleton(tuple 2 30 20))))

		(=>(not (not (set.member (tuple 2 30 20) (ASSOC 0)))) (= obligation5_GrantAction_1_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 1) (ASSIGN 0)))
(assert (= (ASSIGN* 1) (ASSIGN* 0)))
(assert (= (ASSOC 1) 
	(set.union (ASSOC 0)  obligation5_GrantAction_1_0)
))



(declare-fun obligation6_GrantAction_1_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation6 0) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation6_GrantAction_1_0
		(=>(not (set.member (tuple 8 31 20) (ASSOC 0))) (= obligation6_GrantAction_1_0 (set.singleton(tuple 8 31 20))))

		(=>(not (not (set.member (tuple 8 31 20) (ASSOC 0)))) (= obligation6_GrantAction_1_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 1) (ASSIGN 0)))
(assert (= (ASSIGN* 1) (ASSIGN* 0)))
(assert (= (ASSOC 1) 
	(set.union (ASSOC 0)  obligation6_GrantAction_1_0)
))



(declare-fun obligation7_GrantAction_1_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation7 0) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation7_GrantAction_1_0
		(=>(not (set.member (tuple 10 32 20) (ASSOC 0))) (= obligation7_GrantAction_1_0 (set.singleton(tuple 10 32 20))))

		(=>(not (not (set.member (tuple 10 32 20) (ASSOC 0)))) (= obligation7_GrantAction_1_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 1) (ASSIGN 0)))
(assert (= (ASSIGN* 1) (ASSIGN* 0)))
(assert (= (ASSOC 1) 
	(set.union (ASSOC 0)  obligation7_GrantAction_1_0)
))



(declare-fun obligation8_GrantAction_1_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation8 0) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation8_GrantAction_1_0
		(=>(not (set.member (tuple 11 33 20) (ASSOC 0))) (= obligation8_GrantAction_1_0 (set.singleton(tuple 11 33 20))))

		(=>(not (not (set.member (tuple 11 33 20) (ASSOC 0)))) (= obligation8_GrantAction_1_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 1) (ASSIGN 0)))
(assert (= (ASSIGN* 1) (ASSIGN* 0)))
(assert (= (ASSOC 1) 
	(set.union (ASSOC 0)  obligation8_GrantAction_1_0)
))



(declare-fun obligation9_GrantAction_1_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation9 0) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation9_GrantAction_1_0
		(=>(not (set.member (tuple 13 34 20) (ASSOC 0))) (= obligation9_GrantAction_1_0 (set.singleton(tuple 13 34 20))))

		(=>(not (not (set.member (tuple 13 34 20) (ASSOC 0)))) (= obligation9_GrantAction_1_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 1) (ASSIGN 0)))
(assert (= (ASSIGN* 1) (ASSIGN* 0)))
(assert (= (ASSOC 1) 
	(set.union (ASSOC 0)  obligation9_GrantAction_1_0)
))



(declare-fun obligation10_GrantAction_1_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation10 0) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation10_GrantAction_1_0
		(=>(not (set.member (tuple 13 35 20) (ASSOC 0))) (= obligation10_GrantAction_1_0 (set.singleton(tuple 13 35 20))))

		(=>(not (not (set.member (tuple 13 35 20) (ASSOC 0)))) (= obligation10_GrantAction_1_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 1) (ASSIGN 0)))
(assert (= (ASSIGN* 1) (ASSIGN* 0)))
(assert (= (ASSOC 1) 
	(set.union (ASSOC 0)  obligation10_GrantAction_1_0)
))



; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 1) (ASSIGN* 0))
(or 
(= (obligation7 0) true)(= (obligation6 0) true)(= (obligation9 0) true)(= (obligation8 0) true)(= (obligation3 0) true)(= (obligation2 0) true)(= (obligation5 0) true)(= (obligation4 0) true)(= (obligation1 0) true)(= (obligation10 0) true)(= (obligation0 0) true))))
(assert (=> (distinct (ASSIGN 1) (ASSIGN 0))
(or (= (obligation7 0) true)(= (obligation6 0) true)(= (obligation9 0) true)(= (obligation8 0) true)(= (obligation3 0) true)(= (obligation2 0) true)(= (obligation5 0) true)(= (obligation4 0) true)(= (obligation1 0) true)(= (obligation10 0) true)(= (obligation0 0) true))))
(assert (=> (distinct (ASSOC 1) (ASSOC 0))
(or 
(= (obligation7 0) true)(= (obligation6 0) true)(= (obligation9 0) true)(= (obligation8 0) true)(= (obligation3 0) true)(= (obligation2 0) true)(= (obligation5 0) true)(= (obligation4 0) true)(= (obligation1 0) true)(= (obligation10 0) true)(= (obligation0 0) true))))


; 5.4 Exactly one naive
; AT LEAST ONE
(assert (or(= (obligation7 0) true)(= (obligation6 0) true)(= (obligation9 0) true)(= (obligation8 0) true)(= (obligation3 0) true)(= (obligation2 0) true)(= (obligation5 0) true)(= (obligation4 0) true)(= (obligation1 0) true)(= (obligation10 0) true)(= (obligation0 0) true)))


;--------------------------------------------------------------------------------------------------------------------
;STEP2

; 5.1 a->PRE
(declare-fun obligation0U_1 () Int)
(declare-fun obligation0UA_1 () Int)
(declare-fun obligation0AT_1 () Int)
(declare-fun obligation0UO_1 () Int)
(declare-fun obligation0ar_1 () Int)
(declare-fun obligation0S_1 () Int)
(declare-fun obligation0T_1 () Int)
(assert (>= obligation0U_1 0))
(assert (>= obligation0UA_1 0))
(assert (>= obligation0AT_1 0))
(assert (>= obligation0UO_1 0))
(assert (or (= obligation0ar_1 24)
))
(assert (= obligation0S_1 18))
(assert (= obligation0T_1 20))
(assert (=> (= (obligation0 1) true) (and
 (set.member (tuple  obligation0U_1 obligation0S_1) (ASSIGN* 1))
 (set.member (tuple  obligation0U_1 obligation0UA_1) (ASSIGN* 1))
 (set.member (tuple obligation0UA_1 obligation0ar_1 obligation0AT_1) (ASSOC 1))
 (set.member (tuple  obligation0UO_1 obligation0T_1) (ASSIGN* 1))
 (set.member (tuple  obligation0UO_1 obligation0AT_1) (ASSIGN* 1))
 (set.member (tuple  obligation0U_1 obligation0U_1) USERS)
 (distinct obligation0S_1 obligation0U_1)
)))


(declare-fun obligation1U_1 () Int)
(declare-fun obligation1UA_1 () Int)
(declare-fun obligation1AT_1 () Int)
(declare-fun obligation1UO_1 () Int)
(declare-fun obligation1ar_1 () Int)
(declare-fun obligation1S_1 () Int)
(declare-fun obligation1T_1 () Int)
(assert (>= obligation1U_1 0))
(assert (>= obligation1UA_1 0))
(assert (>= obligation1AT_1 0))
(assert (>= obligation1UO_1 0))
(assert (or (= obligation1ar_1 32)
))
(assert (= obligation1S_1 16))
(assert (= obligation1T_1 20))
(assert (=> (= (obligation1 1) true) (and
 (set.member (tuple  obligation1U_1 obligation1S_1) (ASSIGN* 1))
 (set.member (tuple  obligation1U_1 obligation1UA_1) (ASSIGN* 1))
 (set.member (tuple obligation1UA_1 obligation1ar_1 obligation1AT_1) (ASSOC 1))
 (set.member (tuple  obligation1UO_1 obligation1T_1) (ASSIGN* 1))
 (set.member (tuple  obligation1UO_1 obligation1AT_1) (ASSIGN* 1))
 (set.member (tuple  obligation1U_1 obligation1U_1) USERS)
 (distinct obligation1S_1 obligation1U_1)
)))


(declare-fun obligation2U_1 () Int)
(declare-fun obligation2UA_1 () Int)
(declare-fun obligation2AT_1 () Int)
(declare-fun obligation2UO_1 () Int)
(declare-fun obligation2ar_1 () Int)
(declare-fun obligation2S_1 () Int)
(declare-fun obligation2T_1 () Int)
(assert (>= obligation2U_1 0))
(assert (>= obligation2UA_1 0))
(assert (>= obligation2AT_1 0))
(assert (>= obligation2UO_1 0))
(assert (or (= obligation2ar_1 26)
))
(assert (= obligation2S_1 4))
(assert (= obligation2T_1 20))
(assert (=> (= (obligation2 1) true) (and
 (set.member (tuple  obligation2U_1 obligation2S_1) (ASSIGN* 1))
 (set.member (tuple  obligation2U_1 obligation2UA_1) (ASSIGN* 1))
 (set.member (tuple obligation2UA_1 obligation2ar_1 obligation2AT_1) (ASSOC 1))
 (set.member (tuple  obligation2UO_1 obligation2T_1) (ASSIGN* 1))
 (set.member (tuple  obligation2UO_1 obligation2AT_1) (ASSIGN* 1))
 (set.member (tuple  obligation2U_1 obligation2U_1) USERS)
 (distinct obligation2S_1 obligation2U_1)
)))


(declare-fun obligation3U_1 () Int)
(declare-fun obligation3UA_1 () Int)
(declare-fun obligation3AT_1 () Int)
(declare-fun obligation3UO_1 () Int)
(declare-fun obligation3ar_1 () Int)
(declare-fun obligation3S_1 () Int)
(declare-fun obligation3T_1 () Int)
(assert (>= obligation3U_1 0))
(assert (>= obligation3UA_1 0))
(assert (>= obligation3AT_1 0))
(assert (>= obligation3UO_1 0))
(assert (or (= obligation3ar_1 27)
))
(assert (= obligation3S_1 23))
(assert (= obligation3T_1 20))
(assert (=> (= (obligation3 1) true) (and
 (set.member (tuple  obligation3U_1 obligation3S_1) (ASSIGN* 1))
 (set.member (tuple  obligation3U_1 obligation3UA_1) (ASSIGN* 1))
 (set.member (tuple obligation3UA_1 obligation3ar_1 obligation3AT_1) (ASSOC 1))
 (set.member (tuple  obligation3UO_1 obligation3T_1) (ASSIGN* 1))
 (set.member (tuple  obligation3UO_1 obligation3AT_1) (ASSIGN* 1))
 (set.member (tuple  obligation3U_1 obligation3U_1) USERS)
 (distinct obligation3S_1 obligation3U_1)
)))


(declare-fun obligation4U_1 () Int)
(declare-fun obligation4UA_1 () Int)
(declare-fun obligation4AT_1 () Int)
(declare-fun obligation4UO_1 () Int)
(declare-fun obligation4ar_1 () Int)
(declare-fun obligation4S_1 () Int)
(declare-fun obligation4T_1 () Int)
(assert (>= obligation4U_1 0))
(assert (>= obligation4UA_1 0))
(assert (>= obligation4AT_1 0))
(assert (>= obligation4UO_1 0))
(assert (or (= obligation4ar_1 28)
))
(assert (= obligation4S_1 19))
(assert (= obligation4T_1 20))
(assert (=> (= (obligation4 1) true) (and
 (set.member (tuple  obligation4U_1 obligation4S_1) (ASSIGN* 1))
 (set.member (tuple  obligation4U_1 obligation4UA_1) (ASSIGN* 1))
 (set.member (tuple obligation4UA_1 obligation4ar_1 obligation4AT_1) (ASSOC 1))
 (set.member (tuple  obligation4UO_1 obligation4T_1) (ASSIGN* 1))
 (set.member (tuple  obligation4UO_1 obligation4AT_1) (ASSIGN* 1))
 (set.member (tuple  obligation4U_1 obligation4U_1) USERS)
 (distinct obligation4S_1 obligation4U_1)
)))


(declare-fun obligation5U_1 () Int)
(declare-fun obligation5UA_1 () Int)
(declare-fun obligation5AT_1 () Int)
(declare-fun obligation5UO_1 () Int)
(declare-fun obligation5ar_1 () Int)
(declare-fun obligation5S_1 () Int)
(declare-fun obligation5T_1 () Int)
(assert (>= obligation5U_1 0))
(assert (>= obligation5UA_1 0))
(assert (>= obligation5AT_1 0))
(assert (>= obligation5UO_1 0))
(assert (or (= obligation5ar_1 35)
))
(assert (= obligation5S_1 14))
(assert (= obligation5T_1 20))
(assert (=> (= (obligation5 1) true) (and
 (set.member (tuple  obligation5U_1 obligation5S_1) (ASSIGN* 1))
 (set.member (tuple  obligation5U_1 obligation5UA_1) (ASSIGN* 1))
 (set.member (tuple obligation5UA_1 obligation5ar_1 obligation5AT_1) (ASSOC 1))
 (set.member (tuple  obligation5UO_1 obligation5T_1) (ASSIGN* 1))
 (set.member (tuple  obligation5UO_1 obligation5AT_1) (ASSIGN* 1))
 (set.member (tuple  obligation5U_1 obligation5U_1) USERS)
 (distinct obligation5S_1 obligation5U_1)
)))


(declare-fun obligation6U_1 () Int)
(declare-fun obligation6UA_1 () Int)
(declare-fun obligation6AT_1 () Int)
(declare-fun obligation6UO_1 () Int)
(declare-fun obligation6ar_1 () Int)
(declare-fun obligation6S_1 () Int)
(declare-fun obligation6T_1 () Int)
(assert (>= obligation6U_1 0))
(assert (>= obligation6UA_1 0))
(assert (>= obligation6AT_1 0))
(assert (>= obligation6UO_1 0))
(assert (or (= obligation6ar_1 30)
))
(assert (= obligation6S_1 2))
(assert (= obligation6T_1 20))
(assert (=> (= (obligation6 1) true) (and
 (set.member (tuple  obligation6U_1 obligation6S_1) (ASSIGN* 1))
 (set.member (tuple  obligation6U_1 obligation6UA_1) (ASSIGN* 1))
 (set.member (tuple obligation6UA_1 obligation6ar_1 obligation6AT_1) (ASSOC 1))
 (set.member (tuple  obligation6UO_1 obligation6T_1) (ASSIGN* 1))
 (set.member (tuple  obligation6UO_1 obligation6AT_1) (ASSIGN* 1))
 (set.member (tuple  obligation6U_1 obligation6U_1) USERS)
 (distinct obligation6S_1 obligation6U_1)
)))


(declare-fun obligation7U_1 () Int)
(declare-fun obligation7UA_1 () Int)
(declare-fun obligation7AT_1 () Int)
(declare-fun obligation7UO_1 () Int)
(declare-fun obligation7ar_1 () Int)
(declare-fun obligation7S_1 () Int)
(declare-fun obligation7T_1 () Int)
(assert (>= obligation7U_1 0))
(assert (>= obligation7UA_1 0))
(assert (>= obligation7AT_1 0))
(assert (>= obligation7UO_1 0))
(assert (or (= obligation7ar_1 31)
))
(assert (= obligation7S_1 8))
(assert (= obligation7T_1 20))
(assert (=> (= (obligation7 1) true) (and
 (set.member (tuple  obligation7U_1 obligation7S_1) (ASSIGN* 1))
 (set.member (tuple  obligation7U_1 obligation7UA_1) (ASSIGN* 1))
 (set.member (tuple obligation7UA_1 obligation7ar_1 obligation7AT_1) (ASSOC 1))
 (set.member (tuple  obligation7UO_1 obligation7T_1) (ASSIGN* 1))
 (set.member (tuple  obligation7UO_1 obligation7AT_1) (ASSIGN* 1))
 (set.member (tuple  obligation7U_1 obligation7U_1) USERS)
 (distinct obligation7S_1 obligation7U_1)
)))


(declare-fun obligation8U_1 () Int)
(declare-fun obligation8UA_1 () Int)
(declare-fun obligation8AT_1 () Int)
(declare-fun obligation8UO_1 () Int)
(declare-fun obligation8ar_1 () Int)
(declare-fun obligation8S_1 () Int)
(declare-fun obligation8T_1 () Int)
(assert (>= obligation8U_1 0))
(assert (>= obligation8UA_1 0))
(assert (>= obligation8AT_1 0))
(assert (>= obligation8UO_1 0))
(assert (or (= obligation8ar_1 32)
))
(assert (= obligation8S_1 10))
(assert (= obligation8T_1 20))
(assert (=> (= (obligation8 1) true) (and
 (set.member (tuple  obligation8U_1 obligation8S_1) (ASSIGN* 1))
 (set.member (tuple  obligation8U_1 obligation8UA_1) (ASSIGN* 1))
 (set.member (tuple obligation8UA_1 obligation8ar_1 obligation8AT_1) (ASSOC 1))
 (set.member (tuple  obligation8UO_1 obligation8T_1) (ASSIGN* 1))
 (set.member (tuple  obligation8UO_1 obligation8AT_1) (ASSIGN* 1))
 (set.member (tuple  obligation8U_1 obligation8U_1) USERS)
 (distinct obligation8S_1 obligation8U_1)
)))


(declare-fun obligation9U_1 () Int)
(declare-fun obligation9UA_1 () Int)
(declare-fun obligation9AT_1 () Int)
(declare-fun obligation9UO_1 () Int)
(declare-fun obligation9ar_1 () Int)
(declare-fun obligation9S_1 () Int)
(declare-fun obligation9T_1 () Int)
(assert (>= obligation9U_1 0))
(assert (>= obligation9UA_1 0))
(assert (>= obligation9AT_1 0))
(assert (>= obligation9UO_1 0))
(assert (or (= obligation9ar_1 33)
))
(assert (= obligation9S_1 11))
(assert (= obligation9T_1 20))
(assert (=> (= (obligation9 1) true) (and
 (set.member (tuple  obligation9U_1 obligation9S_1) (ASSIGN* 1))
 (set.member (tuple  obligation9U_1 obligation9UA_1) (ASSIGN* 1))
 (set.member (tuple obligation9UA_1 obligation9ar_1 obligation9AT_1) (ASSOC 1))
 (set.member (tuple  obligation9UO_1 obligation9T_1) (ASSIGN* 1))
 (set.member (tuple  obligation9UO_1 obligation9AT_1) (ASSIGN* 1))
 (set.member (tuple  obligation9U_1 obligation9U_1) USERS)
 (distinct obligation9S_1 obligation9U_1)
)))


(declare-fun obligation10U_1 () Int)
(declare-fun obligation10UA_1 () Int)
(declare-fun obligation10AT_1 () Int)
(declare-fun obligation10UO_1 () Int)
(declare-fun obligation10ar_1 () Int)
(declare-fun obligation10S_1 () Int)
(declare-fun obligation10T_1 () Int)
(assert (>= obligation10U_1 0))
(assert (>= obligation10UA_1 0))
(assert (>= obligation10AT_1 0))
(assert (>= obligation10UO_1 0))
(assert (or (= obligation10ar_1 34)
))
(assert (= obligation10S_1 13))
(assert (= obligation10T_1 20))
(assert (=> (= (obligation10 1) true) (and
 (set.member (tuple  obligation10U_1 obligation10S_1) (ASSIGN* 1))
 (set.member (tuple  obligation10U_1 obligation10UA_1) (ASSIGN* 1))
 (set.member (tuple obligation10UA_1 obligation10ar_1 obligation10AT_1) (ASSOC 1))
 (set.member (tuple  obligation10UO_1 obligation10T_1) (ASSIGN* 1))
 (set.member (tuple  obligation10UO_1 obligation10AT_1) (ASSIGN* 1))
 (set.member (tuple  obligation10U_1 obligation10U_1) USERS)
 (distinct obligation10S_1 obligation10U_1)
)))




; 5.2 a->Eff

(declare-fun obligation0_GrantAction_2_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation0 1) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation0_GrantAction_2_0
		(=>(not (set.member (tuple 16 32 20) (ASSOC 1))) (= obligation0_GrantAction_2_0 (set.singleton(tuple 16 32 20))))

		(=>(not (not (set.member (tuple 16 32 20) (ASSOC 1)))) (= obligation0_GrantAction_2_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 2) (ASSIGN 1)))
(assert (= (ASSIGN* 2) (ASSIGN* 1)))
(assert (= (ASSOC 2) 
	(set.union (ASSOC 1)  obligation0_GrantAction_2_0)
))



(declare-fun obligation1_GrantAction_2_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation1 1) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation1_GrantAction_2_0
		(=>(not (set.member (tuple 4 26 20) (ASSOC 1))) (= obligation1_GrantAction_2_0 (set.singleton(tuple 4 26 20))))

		(=>(not (not (set.member (tuple 4 26 20) (ASSOC 1)))) (= obligation1_GrantAction_2_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 2) (ASSIGN 1)))
(assert (= (ASSIGN* 2) (ASSIGN* 1)))
(assert (= (ASSOC 2) 
	(set.union (ASSOC 1)  obligation1_GrantAction_2_0)
))



(declare-fun obligation2_GrantAction_2_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation2 1) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation2_GrantAction_2_0
		(=>(not (set.member (tuple 23 27 20) (ASSOC 1))) (= obligation2_GrantAction_2_0 (set.singleton(tuple 23 27 20))))

		(=>(not (not (set.member (tuple 23 27 20) (ASSOC 1)))) (= obligation2_GrantAction_2_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 2) (ASSIGN 1)))
(assert (= (ASSIGN* 2) (ASSIGN* 1)))
(assert (= (ASSOC 2) 
	(set.union (ASSOC 1)  obligation2_GrantAction_2_0)
))



(declare-fun obligation3_GrantAction_2_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation3 1) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation3_GrantAction_2_0
		(=>(not (set.member (tuple 19 28 20) (ASSOC 1))) (= obligation3_GrantAction_2_0 (set.singleton(tuple 19 28 20))))

		(=>(not (not (set.member (tuple 19 28 20) (ASSOC 1)))) (= obligation3_GrantAction_2_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 2) (ASSIGN 1)))
(assert (= (ASSIGN* 2) (ASSIGN* 1)))
(assert (= (ASSOC 2) 
	(set.union (ASSOC 1)  obligation3_GrantAction_2_0)
))



(declare-fun obligation4_GrantAction_2_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation4 1) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation4_GrantAction_2_0
		(=>(not (set.member (tuple 14 35 20) (ASSOC 1))) (= obligation4_GrantAction_2_0 (set.singleton(tuple 14 35 20))))

		(=>(not (not (set.member (tuple 14 35 20) (ASSOC 1)))) (= obligation4_GrantAction_2_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 2) (ASSIGN 1)))
(assert (= (ASSIGN* 2) (ASSIGN* 1)))
(assert (= (ASSOC 2) 
	(set.union (ASSOC 1)  obligation4_GrantAction_2_0)
))



(declare-fun obligation5_GrantAction_2_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation5 1) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation5_GrantAction_2_0
		(=>(not (set.member (tuple 2 30 20) (ASSOC 1))) (= obligation5_GrantAction_2_0 (set.singleton(tuple 2 30 20))))

		(=>(not (not (set.member (tuple 2 30 20) (ASSOC 1)))) (= obligation5_GrantAction_2_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 2) (ASSIGN 1)))
(assert (= (ASSIGN* 2) (ASSIGN* 1)))
(assert (= (ASSOC 2) 
	(set.union (ASSOC 1)  obligation5_GrantAction_2_0)
))



(declare-fun obligation6_GrantAction_2_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation6 1) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation6_GrantAction_2_0
		(=>(not (set.member (tuple 8 31 20) (ASSOC 1))) (= obligation6_GrantAction_2_0 (set.singleton(tuple 8 31 20))))

		(=>(not (not (set.member (tuple 8 31 20) (ASSOC 1)))) (= obligation6_GrantAction_2_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 2) (ASSIGN 1)))
(assert (= (ASSIGN* 2) (ASSIGN* 1)))
(assert (= (ASSOC 2) 
	(set.union (ASSOC 1)  obligation6_GrantAction_2_0)
))



(declare-fun obligation7_GrantAction_2_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation7 1) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation7_GrantAction_2_0
		(=>(not (set.member (tuple 10 32 20) (ASSOC 1))) (= obligation7_GrantAction_2_0 (set.singleton(tuple 10 32 20))))

		(=>(not (not (set.member (tuple 10 32 20) (ASSOC 1)))) (= obligation7_GrantAction_2_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 2) (ASSIGN 1)))
(assert (= (ASSIGN* 2) (ASSIGN* 1)))
(assert (= (ASSOC 2) 
	(set.union (ASSOC 1)  obligation7_GrantAction_2_0)
))



(declare-fun obligation8_GrantAction_2_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation8 1) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation8_GrantAction_2_0
		(=>(not (set.member (tuple 11 33 20) (ASSOC 1))) (= obligation8_GrantAction_2_0 (set.singleton(tuple 11 33 20))))

		(=>(not (not (set.member (tuple 11 33 20) (ASSOC 1)))) (= obligation8_GrantAction_2_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 2) (ASSIGN 1)))
(assert (= (ASSIGN* 2) (ASSIGN* 1)))
(assert (= (ASSOC 2) 
	(set.union (ASSOC 1)  obligation8_GrantAction_2_0)
))



(declare-fun obligation9_GrantAction_2_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation9 1) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation9_GrantAction_2_0
		(=>(not (set.member (tuple 13 34 20) (ASSOC 1))) (= obligation9_GrantAction_2_0 (set.singleton(tuple 13 34 20))))

		(=>(not (not (set.member (tuple 13 34 20) (ASSOC 1)))) (= obligation9_GrantAction_2_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 2) (ASSIGN 1)))
(assert (= (ASSIGN* 2) (ASSIGN* 1)))
(assert (= (ASSOC 2) 
	(set.union (ASSOC 1)  obligation9_GrantAction_2_0)
))



(declare-fun obligation10_GrantAction_2_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation10 1) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation10_GrantAction_2_0
		(=>(not (set.member (tuple 13 35 20) (ASSOC 1))) (= obligation10_GrantAction_2_0 (set.singleton(tuple 13 35 20))))

		(=>(not (not (set.member (tuple 13 35 20) (ASSOC 1)))) (= obligation10_GrantAction_2_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 2) (ASSIGN 1)))
(assert (= (ASSIGN* 2) (ASSIGN* 1)))
(assert (= (ASSOC 2) 
	(set.union (ASSOC 1)  obligation10_GrantAction_2_0)
))



; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 2) (ASSIGN* 1))
(or 
(= (obligation7 1) true)(= (obligation6 1) true)(= (obligation9 1) true)(= (obligation8 1) true)(= (obligation3 1) true)(= (obligation2 1) true)(= (obligation5 1) true)(= (obligation4 1) true)(= (obligation1 1) true)(= (obligation10 1) true)(= (obligation0 1) true))))
(assert (=> (distinct (ASSIGN 2) (ASSIGN 1))
(or (= (obligation7 1) true)(= (obligation6 1) true)(= (obligation9 1) true)(= (obligation8 1) true)(= (obligation3 1) true)(= (obligation2 1) true)(= (obligation5 1) true)(= (obligation4 1) true)(= (obligation1 1) true)(= (obligation10 1) true)(= (obligation0 1) true))))
(assert (=> (distinct (ASSOC 2) (ASSOC 1))
(or 
(= (obligation7 1) true)(= (obligation6 1) true)(= (obligation9 1) true)(= (obligation8 1) true)(= (obligation3 1) true)(= (obligation2 1) true)(= (obligation5 1) true)(= (obligation4 1) true)(= (obligation1 1) true)(= (obligation10 1) true)(= (obligation0 1) true))))


; 5.4 Exactly one naive
; AT LEAST ONE
(assert (or(= (obligation7 1) true)(= (obligation6 1) true)(= (obligation9 1) true)(= (obligation8 1) true)(= (obligation3 1) true)(= (obligation2 1) true)(= (obligation5 1) true)(= (obligation4 1) true)(= (obligation1 1) true)(= (obligation10 1) true)(= (obligation0 1) true)))


;--------------------------------------------------------------------------------------------------------------------
;STEP3

; 5.1 a->PRE
(declare-fun obligation0U_2 () Int)
(declare-fun obligation0UA_2 () Int)
(declare-fun obligation0AT_2 () Int)
(declare-fun obligation0UO_2 () Int)
(declare-fun obligation0ar_2 () Int)
(declare-fun obligation0S_2 () Int)
(declare-fun obligation0T_2 () Int)
(assert (>= obligation0U_2 0))
(assert (>= obligation0UA_2 0))
(assert (>= obligation0AT_2 0))
(assert (>= obligation0UO_2 0))
(assert (or (= obligation0ar_2 24)
))
(assert (= obligation0S_2 18))
(assert (= obligation0T_2 20))
(assert (=> (= (obligation0 2) true) (and
 (set.member (tuple  obligation0U_2 obligation0S_2) (ASSIGN* 2))
 (set.member (tuple  obligation0U_2 obligation0UA_2) (ASSIGN* 2))
 (set.member (tuple obligation0UA_2 obligation0ar_2 obligation0AT_2) (ASSOC 2))
 (set.member (tuple  obligation0UO_2 obligation0T_2) (ASSIGN* 2))
 (set.member (tuple  obligation0UO_2 obligation0AT_2) (ASSIGN* 2))
 (set.member (tuple  obligation0U_2 obligation0U_2) USERS)
 (distinct obligation0S_2 obligation0U_2)
)))


(declare-fun obligation1U_2 () Int)
(declare-fun obligation1UA_2 () Int)
(declare-fun obligation1AT_2 () Int)
(declare-fun obligation1UO_2 () Int)
(declare-fun obligation1ar_2 () Int)
(declare-fun obligation1S_2 () Int)
(declare-fun obligation1T_2 () Int)
(assert (>= obligation1U_2 0))
(assert (>= obligation1UA_2 0))
(assert (>= obligation1AT_2 0))
(assert (>= obligation1UO_2 0))
(assert (or (= obligation1ar_2 32)
))
(assert (= obligation1S_2 16))
(assert (= obligation1T_2 20))
(assert (=> (= (obligation1 2) true) (and
 (set.member (tuple  obligation1U_2 obligation1S_2) (ASSIGN* 2))
 (set.member (tuple  obligation1U_2 obligation1UA_2) (ASSIGN* 2))
 (set.member (tuple obligation1UA_2 obligation1ar_2 obligation1AT_2) (ASSOC 2))
 (set.member (tuple  obligation1UO_2 obligation1T_2) (ASSIGN* 2))
 (set.member (tuple  obligation1UO_2 obligation1AT_2) (ASSIGN* 2))
 (set.member (tuple  obligation1U_2 obligation1U_2) USERS)
 (distinct obligation1S_2 obligation1U_2)
)))


(declare-fun obligation2U_2 () Int)
(declare-fun obligation2UA_2 () Int)
(declare-fun obligation2AT_2 () Int)
(declare-fun obligation2UO_2 () Int)
(declare-fun obligation2ar_2 () Int)
(declare-fun obligation2S_2 () Int)
(declare-fun obligation2T_2 () Int)
(assert (>= obligation2U_2 0))
(assert (>= obligation2UA_2 0))
(assert (>= obligation2AT_2 0))
(assert (>= obligation2UO_2 0))
(assert (or (= obligation2ar_2 26)
))
(assert (= obligation2S_2 4))
(assert (= obligation2T_2 20))
(assert (=> (= (obligation2 2) true) (and
 (set.member (tuple  obligation2U_2 obligation2S_2) (ASSIGN* 2))
 (set.member (tuple  obligation2U_2 obligation2UA_2) (ASSIGN* 2))
 (set.member (tuple obligation2UA_2 obligation2ar_2 obligation2AT_2) (ASSOC 2))
 (set.member (tuple  obligation2UO_2 obligation2T_2) (ASSIGN* 2))
 (set.member (tuple  obligation2UO_2 obligation2AT_2) (ASSIGN* 2))
 (set.member (tuple  obligation2U_2 obligation2U_2) USERS)
 (distinct obligation2S_2 obligation2U_2)
)))


(declare-fun obligation3U_2 () Int)
(declare-fun obligation3UA_2 () Int)
(declare-fun obligation3AT_2 () Int)
(declare-fun obligation3UO_2 () Int)
(declare-fun obligation3ar_2 () Int)
(declare-fun obligation3S_2 () Int)
(declare-fun obligation3T_2 () Int)
(assert (>= obligation3U_2 0))
(assert (>= obligation3UA_2 0))
(assert (>= obligation3AT_2 0))
(assert (>= obligation3UO_2 0))
(assert (or (= obligation3ar_2 27)
))
(assert (= obligation3S_2 23))
(assert (= obligation3T_2 20))
(assert (=> (= (obligation3 2) true) (and
 (set.member (tuple  obligation3U_2 obligation3S_2) (ASSIGN* 2))
 (set.member (tuple  obligation3U_2 obligation3UA_2) (ASSIGN* 2))
 (set.member (tuple obligation3UA_2 obligation3ar_2 obligation3AT_2) (ASSOC 2))
 (set.member (tuple  obligation3UO_2 obligation3T_2) (ASSIGN* 2))
 (set.member (tuple  obligation3UO_2 obligation3AT_2) (ASSIGN* 2))
 (set.member (tuple  obligation3U_2 obligation3U_2) USERS)
 (distinct obligation3S_2 obligation3U_2)
)))


(declare-fun obligation4U_2 () Int)
(declare-fun obligation4UA_2 () Int)
(declare-fun obligation4AT_2 () Int)
(declare-fun obligation4UO_2 () Int)
(declare-fun obligation4ar_2 () Int)
(declare-fun obligation4S_2 () Int)
(declare-fun obligation4T_2 () Int)
(assert (>= obligation4U_2 0))
(assert (>= obligation4UA_2 0))
(assert (>= obligation4AT_2 0))
(assert (>= obligation4UO_2 0))
(assert (or (= obligation4ar_2 28)
))
(assert (= obligation4S_2 19))
(assert (= obligation4T_2 20))
(assert (=> (= (obligation4 2) true) (and
 (set.member (tuple  obligation4U_2 obligation4S_2) (ASSIGN* 2))
 (set.member (tuple  obligation4U_2 obligation4UA_2) (ASSIGN* 2))
 (set.member (tuple obligation4UA_2 obligation4ar_2 obligation4AT_2) (ASSOC 2))
 (set.member (tuple  obligation4UO_2 obligation4T_2) (ASSIGN* 2))
 (set.member (tuple  obligation4UO_2 obligation4AT_2) (ASSIGN* 2))
 (set.member (tuple  obligation4U_2 obligation4U_2) USERS)
 (distinct obligation4S_2 obligation4U_2)
)))


(declare-fun obligation5U_2 () Int)
(declare-fun obligation5UA_2 () Int)
(declare-fun obligation5AT_2 () Int)
(declare-fun obligation5UO_2 () Int)
(declare-fun obligation5ar_2 () Int)
(declare-fun obligation5S_2 () Int)
(declare-fun obligation5T_2 () Int)
(assert (>= obligation5U_2 0))
(assert (>= obligation5UA_2 0))
(assert (>= obligation5AT_2 0))
(assert (>= obligation5UO_2 0))
(assert (or (= obligation5ar_2 35)
))
(assert (= obligation5S_2 14))
(assert (= obligation5T_2 20))
(assert (=> (= (obligation5 2) true) (and
 (set.member (tuple  obligation5U_2 obligation5S_2) (ASSIGN* 2))
 (set.member (tuple  obligation5U_2 obligation5UA_2) (ASSIGN* 2))
 (set.member (tuple obligation5UA_2 obligation5ar_2 obligation5AT_2) (ASSOC 2))
 (set.member (tuple  obligation5UO_2 obligation5T_2) (ASSIGN* 2))
 (set.member (tuple  obligation5UO_2 obligation5AT_2) (ASSIGN* 2))
 (set.member (tuple  obligation5U_2 obligation5U_2) USERS)
 (distinct obligation5S_2 obligation5U_2)
)))


(declare-fun obligation6U_2 () Int)
(declare-fun obligation6UA_2 () Int)
(declare-fun obligation6AT_2 () Int)
(declare-fun obligation6UO_2 () Int)
(declare-fun obligation6ar_2 () Int)
(declare-fun obligation6S_2 () Int)
(declare-fun obligation6T_2 () Int)
(assert (>= obligation6U_2 0))
(assert (>= obligation6UA_2 0))
(assert (>= obligation6AT_2 0))
(assert (>= obligation6UO_2 0))
(assert (or (= obligation6ar_2 30)
))
(assert (= obligation6S_2 2))
(assert (= obligation6T_2 20))
(assert (=> (= (obligation6 2) true) (and
 (set.member (tuple  obligation6U_2 obligation6S_2) (ASSIGN* 2))
 (set.member (tuple  obligation6U_2 obligation6UA_2) (ASSIGN* 2))
 (set.member (tuple obligation6UA_2 obligation6ar_2 obligation6AT_2) (ASSOC 2))
 (set.member (tuple  obligation6UO_2 obligation6T_2) (ASSIGN* 2))
 (set.member (tuple  obligation6UO_2 obligation6AT_2) (ASSIGN* 2))
 (set.member (tuple  obligation6U_2 obligation6U_2) USERS)
 (distinct obligation6S_2 obligation6U_2)
)))


(declare-fun obligation7U_2 () Int)
(declare-fun obligation7UA_2 () Int)
(declare-fun obligation7AT_2 () Int)
(declare-fun obligation7UO_2 () Int)
(declare-fun obligation7ar_2 () Int)
(declare-fun obligation7S_2 () Int)
(declare-fun obligation7T_2 () Int)
(assert (>= obligation7U_2 0))
(assert (>= obligation7UA_2 0))
(assert (>= obligation7AT_2 0))
(assert (>= obligation7UO_2 0))
(assert (or (= obligation7ar_2 31)
))
(assert (= obligation7S_2 8))
(assert (= obligation7T_2 20))
(assert (=> (= (obligation7 2) true) (and
 (set.member (tuple  obligation7U_2 obligation7S_2) (ASSIGN* 2))
 (set.member (tuple  obligation7U_2 obligation7UA_2) (ASSIGN* 2))
 (set.member (tuple obligation7UA_2 obligation7ar_2 obligation7AT_2) (ASSOC 2))
 (set.member (tuple  obligation7UO_2 obligation7T_2) (ASSIGN* 2))
 (set.member (tuple  obligation7UO_2 obligation7AT_2) (ASSIGN* 2))
 (set.member (tuple  obligation7U_2 obligation7U_2) USERS)
 (distinct obligation7S_2 obligation7U_2)
)))


(declare-fun obligation8U_2 () Int)
(declare-fun obligation8UA_2 () Int)
(declare-fun obligation8AT_2 () Int)
(declare-fun obligation8UO_2 () Int)
(declare-fun obligation8ar_2 () Int)
(declare-fun obligation8S_2 () Int)
(declare-fun obligation8T_2 () Int)
(assert (>= obligation8U_2 0))
(assert (>= obligation8UA_2 0))
(assert (>= obligation8AT_2 0))
(assert (>= obligation8UO_2 0))
(assert (or (= obligation8ar_2 32)
))
(assert (= obligation8S_2 10))
(assert (= obligation8T_2 20))
(assert (=> (= (obligation8 2) true) (and
 (set.member (tuple  obligation8U_2 obligation8S_2) (ASSIGN* 2))
 (set.member (tuple  obligation8U_2 obligation8UA_2) (ASSIGN* 2))
 (set.member (tuple obligation8UA_2 obligation8ar_2 obligation8AT_2) (ASSOC 2))
 (set.member (tuple  obligation8UO_2 obligation8T_2) (ASSIGN* 2))
 (set.member (tuple  obligation8UO_2 obligation8AT_2) (ASSIGN* 2))
 (set.member (tuple  obligation8U_2 obligation8U_2) USERS)
 (distinct obligation8S_2 obligation8U_2)
)))


(declare-fun obligation9U_2 () Int)
(declare-fun obligation9UA_2 () Int)
(declare-fun obligation9AT_2 () Int)
(declare-fun obligation9UO_2 () Int)
(declare-fun obligation9ar_2 () Int)
(declare-fun obligation9S_2 () Int)
(declare-fun obligation9T_2 () Int)
(assert (>= obligation9U_2 0))
(assert (>= obligation9UA_2 0))
(assert (>= obligation9AT_2 0))
(assert (>= obligation9UO_2 0))
(assert (or (= obligation9ar_2 33)
))
(assert (= obligation9S_2 11))
(assert (= obligation9T_2 20))
(assert (=> (= (obligation9 2) true) (and
 (set.member (tuple  obligation9U_2 obligation9S_2) (ASSIGN* 2))
 (set.member (tuple  obligation9U_2 obligation9UA_2) (ASSIGN* 2))
 (set.member (tuple obligation9UA_2 obligation9ar_2 obligation9AT_2) (ASSOC 2))
 (set.member (tuple  obligation9UO_2 obligation9T_2) (ASSIGN* 2))
 (set.member (tuple  obligation9UO_2 obligation9AT_2) (ASSIGN* 2))
 (set.member (tuple  obligation9U_2 obligation9U_2) USERS)
 (distinct obligation9S_2 obligation9U_2)
)))


(declare-fun obligation10U_2 () Int)
(declare-fun obligation10UA_2 () Int)
(declare-fun obligation10AT_2 () Int)
(declare-fun obligation10UO_2 () Int)
(declare-fun obligation10ar_2 () Int)
(declare-fun obligation10S_2 () Int)
(declare-fun obligation10T_2 () Int)
(assert (>= obligation10U_2 0))
(assert (>= obligation10UA_2 0))
(assert (>= obligation10AT_2 0))
(assert (>= obligation10UO_2 0))
(assert (or (= obligation10ar_2 34)
))
(assert (= obligation10S_2 13))
(assert (= obligation10T_2 20))
(assert (=> (= (obligation10 2) true) (and
 (set.member (tuple  obligation10U_2 obligation10S_2) (ASSIGN* 2))
 (set.member (tuple  obligation10U_2 obligation10UA_2) (ASSIGN* 2))
 (set.member (tuple obligation10UA_2 obligation10ar_2 obligation10AT_2) (ASSOC 2))
 (set.member (tuple  obligation10UO_2 obligation10T_2) (ASSIGN* 2))
 (set.member (tuple  obligation10UO_2 obligation10AT_2) (ASSIGN* 2))
 (set.member (tuple  obligation10U_2 obligation10U_2) USERS)
 (distinct obligation10S_2 obligation10U_2)
)))




; 5.2 a->Eff

(declare-fun obligation0_GrantAction_3_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation0 2) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation0_GrantAction_3_0
		(=>(not (set.member (tuple 16 32 20) (ASSOC 2))) (= obligation0_GrantAction_3_0 (set.singleton(tuple 16 32 20))))

		(=>(not (not (set.member (tuple 16 32 20) (ASSOC 2)))) (= obligation0_GrantAction_3_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 3) (ASSIGN 2)))
(assert (= (ASSIGN* 3) (ASSIGN* 2)))
(assert (= (ASSOC 3) 
	(set.union (ASSOC 2)  obligation0_GrantAction_3_0)
))



(declare-fun obligation1_GrantAction_3_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation1 2) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation1_GrantAction_3_0
		(=>(not (set.member (tuple 4 26 20) (ASSOC 2))) (= obligation1_GrantAction_3_0 (set.singleton(tuple 4 26 20))))

		(=>(not (not (set.member (tuple 4 26 20) (ASSOC 2)))) (= obligation1_GrantAction_3_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 3) (ASSIGN 2)))
(assert (= (ASSIGN* 3) (ASSIGN* 2)))
(assert (= (ASSOC 3) 
	(set.union (ASSOC 2)  obligation1_GrantAction_3_0)
))



(declare-fun obligation2_GrantAction_3_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation2 2) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation2_GrantAction_3_0
		(=>(not (set.member (tuple 23 27 20) (ASSOC 2))) (= obligation2_GrantAction_3_0 (set.singleton(tuple 23 27 20))))

		(=>(not (not (set.member (tuple 23 27 20) (ASSOC 2)))) (= obligation2_GrantAction_3_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 3) (ASSIGN 2)))
(assert (= (ASSIGN* 3) (ASSIGN* 2)))
(assert (= (ASSOC 3) 
	(set.union (ASSOC 2)  obligation2_GrantAction_3_0)
))



(declare-fun obligation3_GrantAction_3_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation3 2) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation3_GrantAction_3_0
		(=>(not (set.member (tuple 19 28 20) (ASSOC 2))) (= obligation3_GrantAction_3_0 (set.singleton(tuple 19 28 20))))

		(=>(not (not (set.member (tuple 19 28 20) (ASSOC 2)))) (= obligation3_GrantAction_3_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 3) (ASSIGN 2)))
(assert (= (ASSIGN* 3) (ASSIGN* 2)))
(assert (= (ASSOC 3) 
	(set.union (ASSOC 2)  obligation3_GrantAction_3_0)
))



(declare-fun obligation4_GrantAction_3_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation4 2) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation4_GrantAction_3_0
		(=>(not (set.member (tuple 14 35 20) (ASSOC 2))) (= obligation4_GrantAction_3_0 (set.singleton(tuple 14 35 20))))

		(=>(not (not (set.member (tuple 14 35 20) (ASSOC 2)))) (= obligation4_GrantAction_3_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 3) (ASSIGN 2)))
(assert (= (ASSIGN* 3) (ASSIGN* 2)))
(assert (= (ASSOC 3) 
	(set.union (ASSOC 2)  obligation4_GrantAction_3_0)
))



(declare-fun obligation5_GrantAction_3_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation5 2) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation5_GrantAction_3_0
		(=>(not (set.member (tuple 2 30 20) (ASSOC 2))) (= obligation5_GrantAction_3_0 (set.singleton(tuple 2 30 20))))

		(=>(not (not (set.member (tuple 2 30 20) (ASSOC 2)))) (= obligation5_GrantAction_3_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 3) (ASSIGN 2)))
(assert (= (ASSIGN* 3) (ASSIGN* 2)))
(assert (= (ASSOC 3) 
	(set.union (ASSOC 2)  obligation5_GrantAction_3_0)
))



(declare-fun obligation6_GrantAction_3_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation6 2) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation6_GrantAction_3_0
		(=>(not (set.member (tuple 8 31 20) (ASSOC 2))) (= obligation6_GrantAction_3_0 (set.singleton(tuple 8 31 20))))

		(=>(not (not (set.member (tuple 8 31 20) (ASSOC 2)))) (= obligation6_GrantAction_3_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 3) (ASSIGN 2)))
(assert (= (ASSIGN* 3) (ASSIGN* 2)))
(assert (= (ASSOC 3) 
	(set.union (ASSOC 2)  obligation6_GrantAction_3_0)
))



(declare-fun obligation7_GrantAction_3_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation7 2) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation7_GrantAction_3_0
		(=>(not (set.member (tuple 10 32 20) (ASSOC 2))) (= obligation7_GrantAction_3_0 (set.singleton(tuple 10 32 20))))

		(=>(not (not (set.member (tuple 10 32 20) (ASSOC 2)))) (= obligation7_GrantAction_3_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 3) (ASSIGN 2)))
(assert (= (ASSIGN* 3) (ASSIGN* 2)))
(assert (= (ASSOC 3) 
	(set.union (ASSOC 2)  obligation7_GrantAction_3_0)
))



(declare-fun obligation8_GrantAction_3_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation8 2) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation8_GrantAction_3_0
		(=>(not (set.member (tuple 11 33 20) (ASSOC 2))) (= obligation8_GrantAction_3_0 (set.singleton(tuple 11 33 20))))

		(=>(not (not (set.member (tuple 11 33 20) (ASSOC 2)))) (= obligation8_GrantAction_3_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 3) (ASSIGN 2)))
(assert (= (ASSIGN* 3) (ASSIGN* 2)))
(assert (= (ASSOC 3) 
	(set.union (ASSOC 2)  obligation8_GrantAction_3_0)
))



(declare-fun obligation9_GrantAction_3_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation9 2) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation9_GrantAction_3_0
		(=>(not (set.member (tuple 13 34 20) (ASSOC 2))) (= obligation9_GrantAction_3_0 (set.singleton(tuple 13 34 20))))

		(=>(not (not (set.member (tuple 13 34 20) (ASSOC 2)))) (= obligation9_GrantAction_3_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 3) (ASSIGN 2)))
(assert (= (ASSIGN* 3) (ASSIGN* 2)))
(assert (= (ASSOC 3) 
	(set.union (ASSOC 2)  obligation9_GrantAction_3_0)
))



(declare-fun obligation10_GrantAction_3_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation10 2) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation10_GrantAction_3_0
		(=>(not (set.member (tuple 13 35 20) (ASSOC 2))) (= obligation10_GrantAction_3_0 (set.singleton(tuple 13 35 20))))

		(=>(not (not (set.member (tuple 13 35 20) (ASSOC 2)))) (= obligation10_GrantAction_3_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 3) (ASSIGN 2)))
(assert (= (ASSIGN* 3) (ASSIGN* 2)))
(assert (= (ASSOC 3) 
	(set.union (ASSOC 2)  obligation10_GrantAction_3_0)
))



; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 3) (ASSIGN* 2))
(or 
(= (obligation7 2) true)(= (obligation6 2) true)(= (obligation9 2) true)(= (obligation8 2) true)(= (obligation3 2) true)(= (obligation2 2) true)(= (obligation5 2) true)(= (obligation4 2) true)(= (obligation1 2) true)(= (obligation10 2) true)(= (obligation0 2) true))))
(assert (=> (distinct (ASSIGN 3) (ASSIGN 2))
(or (= (obligation7 2) true)(= (obligation6 2) true)(= (obligation9 2) true)(= (obligation8 2) true)(= (obligation3 2) true)(= (obligation2 2) true)(= (obligation5 2) true)(= (obligation4 2) true)(= (obligation1 2) true)(= (obligation10 2) true)(= (obligation0 2) true))))
(assert (=> (distinct (ASSOC 3) (ASSOC 2))
(or 
(= (obligation7 2) true)(= (obligation6 2) true)(= (obligation9 2) true)(= (obligation8 2) true)(= (obligation3 2) true)(= (obligation2 2) true)(= (obligation5 2) true)(= (obligation4 2) true)(= (obligation1 2) true)(= (obligation10 2) true)(= (obligation0 2) true))))


; 5.4 Exactly one naive
; AT LEAST ONE
(assert (or(= (obligation7 2) true)(= (obligation6 2) true)(= (obligation9 2) true)(= (obligation8 2) true)(= (obligation3 2) true)(= (obligation2 2) true)(= (obligation5 2) true)(= (obligation4 2) true)(= (obligation1 2) true)(= (obligation10 2) true)(= (obligation0 2) true)))


;--------------------------------------------------------------------------------------------------------------------
;STEP4

; 5.1 a->PRE
(declare-fun obligation0U_3 () Int)
(declare-fun obligation0UA_3 () Int)
(declare-fun obligation0AT_3 () Int)
(declare-fun obligation0UO_3 () Int)
(declare-fun obligation0ar_3 () Int)
(declare-fun obligation0S_3 () Int)
(declare-fun obligation0T_3 () Int)
(assert (>= obligation0U_3 0))
(assert (>= obligation0UA_3 0))
(assert (>= obligation0AT_3 0))
(assert (>= obligation0UO_3 0))
(assert (or (= obligation0ar_3 24)
))
(assert (= obligation0S_3 18))
(assert (= obligation0T_3 20))
(assert (=> (= (obligation0 3) true) (and
 (set.member (tuple  obligation0U_3 obligation0S_3) (ASSIGN* 3))
 (set.member (tuple  obligation0U_3 obligation0UA_3) (ASSIGN* 3))
 (set.member (tuple obligation0UA_3 obligation0ar_3 obligation0AT_3) (ASSOC 3))
 (set.member (tuple  obligation0UO_3 obligation0T_3) (ASSIGN* 3))
 (set.member (tuple  obligation0UO_3 obligation0AT_3) (ASSIGN* 3))
 (set.member (tuple  obligation0U_3 obligation0U_3) USERS)
 (distinct obligation0S_3 obligation0U_3)
)))


(declare-fun obligation1U_3 () Int)
(declare-fun obligation1UA_3 () Int)
(declare-fun obligation1AT_3 () Int)
(declare-fun obligation1UO_3 () Int)
(declare-fun obligation1ar_3 () Int)
(declare-fun obligation1S_3 () Int)
(declare-fun obligation1T_3 () Int)
(assert (>= obligation1U_3 0))
(assert (>= obligation1UA_3 0))
(assert (>= obligation1AT_3 0))
(assert (>= obligation1UO_3 0))
(assert (or (= obligation1ar_3 32)
))
(assert (= obligation1S_3 16))
(assert (= obligation1T_3 20))
(assert (=> (= (obligation1 3) true) (and
 (set.member (tuple  obligation1U_3 obligation1S_3) (ASSIGN* 3))
 (set.member (tuple  obligation1U_3 obligation1UA_3) (ASSIGN* 3))
 (set.member (tuple obligation1UA_3 obligation1ar_3 obligation1AT_3) (ASSOC 3))
 (set.member (tuple  obligation1UO_3 obligation1T_3) (ASSIGN* 3))
 (set.member (tuple  obligation1UO_3 obligation1AT_3) (ASSIGN* 3))
 (set.member (tuple  obligation1U_3 obligation1U_3) USERS)
 (distinct obligation1S_3 obligation1U_3)
)))


(declare-fun obligation2U_3 () Int)
(declare-fun obligation2UA_3 () Int)
(declare-fun obligation2AT_3 () Int)
(declare-fun obligation2UO_3 () Int)
(declare-fun obligation2ar_3 () Int)
(declare-fun obligation2S_3 () Int)
(declare-fun obligation2T_3 () Int)
(assert (>= obligation2U_3 0))
(assert (>= obligation2UA_3 0))
(assert (>= obligation2AT_3 0))
(assert (>= obligation2UO_3 0))
(assert (or (= obligation2ar_3 26)
))
(assert (= obligation2S_3 4))
(assert (= obligation2T_3 20))
(assert (=> (= (obligation2 3) true) (and
 (set.member (tuple  obligation2U_3 obligation2S_3) (ASSIGN* 3))
 (set.member (tuple  obligation2U_3 obligation2UA_3) (ASSIGN* 3))
 (set.member (tuple obligation2UA_3 obligation2ar_3 obligation2AT_3) (ASSOC 3))
 (set.member (tuple  obligation2UO_3 obligation2T_3) (ASSIGN* 3))
 (set.member (tuple  obligation2UO_3 obligation2AT_3) (ASSIGN* 3))
 (set.member (tuple  obligation2U_3 obligation2U_3) USERS)
 (distinct obligation2S_3 obligation2U_3)
)))


(declare-fun obligation3U_3 () Int)
(declare-fun obligation3UA_3 () Int)
(declare-fun obligation3AT_3 () Int)
(declare-fun obligation3UO_3 () Int)
(declare-fun obligation3ar_3 () Int)
(declare-fun obligation3S_3 () Int)
(declare-fun obligation3T_3 () Int)
(assert (>= obligation3U_3 0))
(assert (>= obligation3UA_3 0))
(assert (>= obligation3AT_3 0))
(assert (>= obligation3UO_3 0))
(assert (or (= obligation3ar_3 27)
))
(assert (= obligation3S_3 23))
(assert (= obligation3T_3 20))
(assert (=> (= (obligation3 3) true) (and
 (set.member (tuple  obligation3U_3 obligation3S_3) (ASSIGN* 3))
 (set.member (tuple  obligation3U_3 obligation3UA_3) (ASSIGN* 3))
 (set.member (tuple obligation3UA_3 obligation3ar_3 obligation3AT_3) (ASSOC 3))
 (set.member (tuple  obligation3UO_3 obligation3T_3) (ASSIGN* 3))
 (set.member (tuple  obligation3UO_3 obligation3AT_3) (ASSIGN* 3))
 (set.member (tuple  obligation3U_3 obligation3U_3) USERS)
 (distinct obligation3S_3 obligation3U_3)
)))


(declare-fun obligation4U_3 () Int)
(declare-fun obligation4UA_3 () Int)
(declare-fun obligation4AT_3 () Int)
(declare-fun obligation4UO_3 () Int)
(declare-fun obligation4ar_3 () Int)
(declare-fun obligation4S_3 () Int)
(declare-fun obligation4T_3 () Int)
(assert (>= obligation4U_3 0))
(assert (>= obligation4UA_3 0))
(assert (>= obligation4AT_3 0))
(assert (>= obligation4UO_3 0))
(assert (or (= obligation4ar_3 28)
))
(assert (= obligation4S_3 19))
(assert (= obligation4T_3 20))
(assert (=> (= (obligation4 3) true) (and
 (set.member (tuple  obligation4U_3 obligation4S_3) (ASSIGN* 3))
 (set.member (tuple  obligation4U_3 obligation4UA_3) (ASSIGN* 3))
 (set.member (tuple obligation4UA_3 obligation4ar_3 obligation4AT_3) (ASSOC 3))
 (set.member (tuple  obligation4UO_3 obligation4T_3) (ASSIGN* 3))
 (set.member (tuple  obligation4UO_3 obligation4AT_3) (ASSIGN* 3))
 (set.member (tuple  obligation4U_3 obligation4U_3) USERS)
 (distinct obligation4S_3 obligation4U_3)
)))


(declare-fun obligation5U_3 () Int)
(declare-fun obligation5UA_3 () Int)
(declare-fun obligation5AT_3 () Int)
(declare-fun obligation5UO_3 () Int)
(declare-fun obligation5ar_3 () Int)
(declare-fun obligation5S_3 () Int)
(declare-fun obligation5T_3 () Int)
(assert (>= obligation5U_3 0))
(assert (>= obligation5UA_3 0))
(assert (>= obligation5AT_3 0))
(assert (>= obligation5UO_3 0))
(assert (or (= obligation5ar_3 35)
))
(assert (= obligation5S_3 14))
(assert (= obligation5T_3 20))
(assert (=> (= (obligation5 3) true) (and
 (set.member (tuple  obligation5U_3 obligation5S_3) (ASSIGN* 3))
 (set.member (tuple  obligation5U_3 obligation5UA_3) (ASSIGN* 3))
 (set.member (tuple obligation5UA_3 obligation5ar_3 obligation5AT_3) (ASSOC 3))
 (set.member (tuple  obligation5UO_3 obligation5T_3) (ASSIGN* 3))
 (set.member (tuple  obligation5UO_3 obligation5AT_3) (ASSIGN* 3))
 (set.member (tuple  obligation5U_3 obligation5U_3) USERS)
 (distinct obligation5S_3 obligation5U_3)
)))


(declare-fun obligation6U_3 () Int)
(declare-fun obligation6UA_3 () Int)
(declare-fun obligation6AT_3 () Int)
(declare-fun obligation6UO_3 () Int)
(declare-fun obligation6ar_3 () Int)
(declare-fun obligation6S_3 () Int)
(declare-fun obligation6T_3 () Int)
(assert (>= obligation6U_3 0))
(assert (>= obligation6UA_3 0))
(assert (>= obligation6AT_3 0))
(assert (>= obligation6UO_3 0))
(assert (or (= obligation6ar_3 30)
))
(assert (= obligation6S_3 2))
(assert (= obligation6T_3 20))
(assert (=> (= (obligation6 3) true) (and
 (set.member (tuple  obligation6U_3 obligation6S_3) (ASSIGN* 3))
 (set.member (tuple  obligation6U_3 obligation6UA_3) (ASSIGN* 3))
 (set.member (tuple obligation6UA_3 obligation6ar_3 obligation6AT_3) (ASSOC 3))
 (set.member (tuple  obligation6UO_3 obligation6T_3) (ASSIGN* 3))
 (set.member (tuple  obligation6UO_3 obligation6AT_3) (ASSIGN* 3))
 (set.member (tuple  obligation6U_3 obligation6U_3) USERS)
 (distinct obligation6S_3 obligation6U_3)
)))


(declare-fun obligation7U_3 () Int)
(declare-fun obligation7UA_3 () Int)
(declare-fun obligation7AT_3 () Int)
(declare-fun obligation7UO_3 () Int)
(declare-fun obligation7ar_3 () Int)
(declare-fun obligation7S_3 () Int)
(declare-fun obligation7T_3 () Int)
(assert (>= obligation7U_3 0))
(assert (>= obligation7UA_3 0))
(assert (>= obligation7AT_3 0))
(assert (>= obligation7UO_3 0))
(assert (or (= obligation7ar_3 31)
))
(assert (= obligation7S_3 8))
(assert (= obligation7T_3 20))
(assert (=> (= (obligation7 3) true) (and
 (set.member (tuple  obligation7U_3 obligation7S_3) (ASSIGN* 3))
 (set.member (tuple  obligation7U_3 obligation7UA_3) (ASSIGN* 3))
 (set.member (tuple obligation7UA_3 obligation7ar_3 obligation7AT_3) (ASSOC 3))
 (set.member (tuple  obligation7UO_3 obligation7T_3) (ASSIGN* 3))
 (set.member (tuple  obligation7UO_3 obligation7AT_3) (ASSIGN* 3))
 (set.member (tuple  obligation7U_3 obligation7U_3) USERS)
 (distinct obligation7S_3 obligation7U_3)
)))


(declare-fun obligation8U_3 () Int)
(declare-fun obligation8UA_3 () Int)
(declare-fun obligation8AT_3 () Int)
(declare-fun obligation8UO_3 () Int)
(declare-fun obligation8ar_3 () Int)
(declare-fun obligation8S_3 () Int)
(declare-fun obligation8T_3 () Int)
(assert (>= obligation8U_3 0))
(assert (>= obligation8UA_3 0))
(assert (>= obligation8AT_3 0))
(assert (>= obligation8UO_3 0))
(assert (or (= obligation8ar_3 32)
))
(assert (= obligation8S_3 10))
(assert (= obligation8T_3 20))
(assert (=> (= (obligation8 3) true) (and
 (set.member (tuple  obligation8U_3 obligation8S_3) (ASSIGN* 3))
 (set.member (tuple  obligation8U_3 obligation8UA_3) (ASSIGN* 3))
 (set.member (tuple obligation8UA_3 obligation8ar_3 obligation8AT_3) (ASSOC 3))
 (set.member (tuple  obligation8UO_3 obligation8T_3) (ASSIGN* 3))
 (set.member (tuple  obligation8UO_3 obligation8AT_3) (ASSIGN* 3))
 (set.member (tuple  obligation8U_3 obligation8U_3) USERS)
 (distinct obligation8S_3 obligation8U_3)
)))


(declare-fun obligation9U_3 () Int)
(declare-fun obligation9UA_3 () Int)
(declare-fun obligation9AT_3 () Int)
(declare-fun obligation9UO_3 () Int)
(declare-fun obligation9ar_3 () Int)
(declare-fun obligation9S_3 () Int)
(declare-fun obligation9T_3 () Int)
(assert (>= obligation9U_3 0))
(assert (>= obligation9UA_3 0))
(assert (>= obligation9AT_3 0))
(assert (>= obligation9UO_3 0))
(assert (or (= obligation9ar_3 33)
))
(assert (= obligation9S_3 11))
(assert (= obligation9T_3 20))
(assert (=> (= (obligation9 3) true) (and
 (set.member (tuple  obligation9U_3 obligation9S_3) (ASSIGN* 3))
 (set.member (tuple  obligation9U_3 obligation9UA_3) (ASSIGN* 3))
 (set.member (tuple obligation9UA_3 obligation9ar_3 obligation9AT_3) (ASSOC 3))
 (set.member (tuple  obligation9UO_3 obligation9T_3) (ASSIGN* 3))
 (set.member (tuple  obligation9UO_3 obligation9AT_3) (ASSIGN* 3))
 (set.member (tuple  obligation9U_3 obligation9U_3) USERS)
 (distinct obligation9S_3 obligation9U_3)
)))


(declare-fun obligation10U_3 () Int)
(declare-fun obligation10UA_3 () Int)
(declare-fun obligation10AT_3 () Int)
(declare-fun obligation10UO_3 () Int)
(declare-fun obligation10ar_3 () Int)
(declare-fun obligation10S_3 () Int)
(declare-fun obligation10T_3 () Int)
(assert (>= obligation10U_3 0))
(assert (>= obligation10UA_3 0))
(assert (>= obligation10AT_3 0))
(assert (>= obligation10UO_3 0))
(assert (or (= obligation10ar_3 34)
))
(assert (= obligation10S_3 13))
(assert (= obligation10T_3 20))
(assert (=> (= (obligation10 3) true) (and
 (set.member (tuple  obligation10U_3 obligation10S_3) (ASSIGN* 3))
 (set.member (tuple  obligation10U_3 obligation10UA_3) (ASSIGN* 3))
 (set.member (tuple obligation10UA_3 obligation10ar_3 obligation10AT_3) (ASSOC 3))
 (set.member (tuple  obligation10UO_3 obligation10T_3) (ASSIGN* 3))
 (set.member (tuple  obligation10UO_3 obligation10AT_3) (ASSIGN* 3))
 (set.member (tuple  obligation10U_3 obligation10U_3) USERS)
 (distinct obligation10S_3 obligation10U_3)
)))




; 5.2 a->Eff

(declare-fun obligation0_GrantAction_4_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation0 3) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation0_GrantAction_4_0
		(=>(not (set.member (tuple 16 32 20) (ASSOC 3))) (= obligation0_GrantAction_4_0 (set.singleton(tuple 16 32 20))))

		(=>(not (not (set.member (tuple 16 32 20) (ASSOC 3)))) (= obligation0_GrantAction_4_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 4) (ASSIGN 3)))
(assert (= (ASSIGN* 4) (ASSIGN* 3)))
(assert (= (ASSOC 4) 
	(set.union (ASSOC 3)  obligation0_GrantAction_4_0)
))



(declare-fun obligation1_GrantAction_4_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation1 3) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation1_GrantAction_4_0
		(=>(not (set.member (tuple 4 26 20) (ASSOC 3))) (= obligation1_GrantAction_4_0 (set.singleton(tuple 4 26 20))))

		(=>(not (not (set.member (tuple 4 26 20) (ASSOC 3)))) (= obligation1_GrantAction_4_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 4) (ASSIGN 3)))
(assert (= (ASSIGN* 4) (ASSIGN* 3)))
(assert (= (ASSOC 4) 
	(set.union (ASSOC 3)  obligation1_GrantAction_4_0)
))



(declare-fun obligation2_GrantAction_4_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation2 3) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation2_GrantAction_4_0
		(=>(not (set.member (tuple 23 27 20) (ASSOC 3))) (= obligation2_GrantAction_4_0 (set.singleton(tuple 23 27 20))))

		(=>(not (not (set.member (tuple 23 27 20) (ASSOC 3)))) (= obligation2_GrantAction_4_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 4) (ASSIGN 3)))
(assert (= (ASSIGN* 4) (ASSIGN* 3)))
(assert (= (ASSOC 4) 
	(set.union (ASSOC 3)  obligation2_GrantAction_4_0)
))



(declare-fun obligation3_GrantAction_4_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation3 3) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation3_GrantAction_4_0
		(=>(not (set.member (tuple 19 28 20) (ASSOC 3))) (= obligation3_GrantAction_4_0 (set.singleton(tuple 19 28 20))))

		(=>(not (not (set.member (tuple 19 28 20) (ASSOC 3)))) (= obligation3_GrantAction_4_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 4) (ASSIGN 3)))
(assert (= (ASSIGN* 4) (ASSIGN* 3)))
(assert (= (ASSOC 4) 
	(set.union (ASSOC 3)  obligation3_GrantAction_4_0)
))



(declare-fun obligation4_GrantAction_4_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation4 3) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation4_GrantAction_4_0
		(=>(not (set.member (tuple 14 35 20) (ASSOC 3))) (= obligation4_GrantAction_4_0 (set.singleton(tuple 14 35 20))))

		(=>(not (not (set.member (tuple 14 35 20) (ASSOC 3)))) (= obligation4_GrantAction_4_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 4) (ASSIGN 3)))
(assert (= (ASSIGN* 4) (ASSIGN* 3)))
(assert (= (ASSOC 4) 
	(set.union (ASSOC 3)  obligation4_GrantAction_4_0)
))



(declare-fun obligation5_GrantAction_4_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation5 3) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation5_GrantAction_4_0
		(=>(not (set.member (tuple 2 30 20) (ASSOC 3))) (= obligation5_GrantAction_4_0 (set.singleton(tuple 2 30 20))))

		(=>(not (not (set.member (tuple 2 30 20) (ASSOC 3)))) (= obligation5_GrantAction_4_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 4) (ASSIGN 3)))
(assert (= (ASSIGN* 4) (ASSIGN* 3)))
(assert (= (ASSOC 4) 
	(set.union (ASSOC 3)  obligation5_GrantAction_4_0)
))



(declare-fun obligation6_GrantAction_4_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation6 3) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation6_GrantAction_4_0
		(=>(not (set.member (tuple 8 31 20) (ASSOC 3))) (= obligation6_GrantAction_4_0 (set.singleton(tuple 8 31 20))))

		(=>(not (not (set.member (tuple 8 31 20) (ASSOC 3)))) (= obligation6_GrantAction_4_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 4) (ASSIGN 3)))
(assert (= (ASSIGN* 4) (ASSIGN* 3)))
(assert (= (ASSOC 4) 
	(set.union (ASSOC 3)  obligation6_GrantAction_4_0)
))



(declare-fun obligation7_GrantAction_4_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation7 3) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation7_GrantAction_4_0
		(=>(not (set.member (tuple 10 32 20) (ASSOC 3))) (= obligation7_GrantAction_4_0 (set.singleton(tuple 10 32 20))))

		(=>(not (not (set.member (tuple 10 32 20) (ASSOC 3)))) (= obligation7_GrantAction_4_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 4) (ASSIGN 3)))
(assert (= (ASSIGN* 4) (ASSIGN* 3)))
(assert (= (ASSOC 4) 
	(set.union (ASSOC 3)  obligation7_GrantAction_4_0)
))



(declare-fun obligation8_GrantAction_4_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation8 3) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation8_GrantAction_4_0
		(=>(not (set.member (tuple 11 33 20) (ASSOC 3))) (= obligation8_GrantAction_4_0 (set.singleton(tuple 11 33 20))))

		(=>(not (not (set.member (tuple 11 33 20) (ASSOC 3)))) (= obligation8_GrantAction_4_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 4) (ASSIGN 3)))
(assert (= (ASSIGN* 4) (ASSIGN* 3)))
(assert (= (ASSOC 4) 
	(set.union (ASSOC 3)  obligation8_GrantAction_4_0)
))



(declare-fun obligation9_GrantAction_4_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation9 3) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation9_GrantAction_4_0
		(=>(not (set.member (tuple 13 34 20) (ASSOC 3))) (= obligation9_GrantAction_4_0 (set.singleton(tuple 13 34 20))))

		(=>(not (not (set.member (tuple 13 34 20) (ASSOC 3)))) (= obligation9_GrantAction_4_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 4) (ASSIGN 3)))
(assert (= (ASSIGN* 4) (ASSIGN* 3)))
(assert (= (ASSOC 4) 
	(set.union (ASSOC 3)  obligation9_GrantAction_4_0)
))



(declare-fun obligation10_GrantAction_4_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation10 3) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation10_GrantAction_4_0
		(=>(not (set.member (tuple 13 35 20) (ASSOC 3))) (= obligation10_GrantAction_4_0 (set.singleton(tuple 13 35 20))))

		(=>(not (not (set.member (tuple 13 35 20) (ASSOC 3)))) (= obligation10_GrantAction_4_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 4) (ASSIGN 3)))
(assert (= (ASSIGN* 4) (ASSIGN* 3)))
(assert (= (ASSOC 4) 
	(set.union (ASSOC 3)  obligation10_GrantAction_4_0)
))



; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 4) (ASSIGN* 3))
(or 
(= (obligation7 3) true)(= (obligation6 3) true)(= (obligation9 3) true)(= (obligation8 3) true)(= (obligation3 3) true)(= (obligation2 3) true)(= (obligation5 3) true)(= (obligation4 3) true)(= (obligation1 3) true)(= (obligation10 3) true)(= (obligation0 3) true))))
(assert (=> (distinct (ASSIGN 4) (ASSIGN 3))
(or (= (obligation7 3) true)(= (obligation6 3) true)(= (obligation9 3) true)(= (obligation8 3) true)(= (obligation3 3) true)(= (obligation2 3) true)(= (obligation5 3) true)(= (obligation4 3) true)(= (obligation1 3) true)(= (obligation10 3) true)(= (obligation0 3) true))))
(assert (=> (distinct (ASSOC 4) (ASSOC 3))
(or 
(= (obligation7 3) true)(= (obligation6 3) true)(= (obligation9 3) true)(= (obligation8 3) true)(= (obligation3 3) true)(= (obligation2 3) true)(= (obligation5 3) true)(= (obligation4 3) true)(= (obligation1 3) true)(= (obligation10 3) true)(= (obligation0 3) true))))


; 5.4 Exactly one naive
; AT LEAST ONE
(assert (or(= (obligation7 3) true)(= (obligation6 3) true)(= (obligation9 3) true)(= (obligation8 3) true)(= (obligation3 3) true)(= (obligation2 3) true)(= (obligation5 3) true)(= (obligation4 3) true)(= (obligation1 3) true)(= (obligation10 3) true)(= (obligation0 3) true)))


;--------------------------------------------------------------------------------------------------------------------
;STEP5

; 5.1 a->PRE
(declare-fun obligation0U_4 () Int)
(declare-fun obligation0UA_4 () Int)
(declare-fun obligation0AT_4 () Int)
(declare-fun obligation0UO_4 () Int)
(declare-fun obligation0ar_4 () Int)
(declare-fun obligation0S_4 () Int)
(declare-fun obligation0T_4 () Int)
(assert (>= obligation0U_4 0))
(assert (>= obligation0UA_4 0))
(assert (>= obligation0AT_4 0))
(assert (>= obligation0UO_4 0))
(assert (or (= obligation0ar_4 24)
))
(assert (= obligation0S_4 18))
(assert (= obligation0T_4 20))
(assert (=> (= (obligation0 4) true) (and
 (set.member (tuple  obligation0U_4 obligation0S_4) (ASSIGN* 4))
 (set.member (tuple  obligation0U_4 obligation0UA_4) (ASSIGN* 4))
 (set.member (tuple obligation0UA_4 obligation0ar_4 obligation0AT_4) (ASSOC 4))
 (set.member (tuple  obligation0UO_4 obligation0T_4) (ASSIGN* 4))
 (set.member (tuple  obligation0UO_4 obligation0AT_4) (ASSIGN* 4))
 (set.member (tuple  obligation0U_4 obligation0U_4) USERS)
 (distinct obligation0S_4 obligation0U_4)
)))


(declare-fun obligation1U_4 () Int)
(declare-fun obligation1UA_4 () Int)
(declare-fun obligation1AT_4 () Int)
(declare-fun obligation1UO_4 () Int)
(declare-fun obligation1ar_4 () Int)
(declare-fun obligation1S_4 () Int)
(declare-fun obligation1T_4 () Int)
(assert (>= obligation1U_4 0))
(assert (>= obligation1UA_4 0))
(assert (>= obligation1AT_4 0))
(assert (>= obligation1UO_4 0))
(assert (or (= obligation1ar_4 32)
))
(assert (= obligation1S_4 16))
(assert (= obligation1T_4 20))
(assert (=> (= (obligation1 4) true) (and
 (set.member (tuple  obligation1U_4 obligation1S_4) (ASSIGN* 4))
 (set.member (tuple  obligation1U_4 obligation1UA_4) (ASSIGN* 4))
 (set.member (tuple obligation1UA_4 obligation1ar_4 obligation1AT_4) (ASSOC 4))
 (set.member (tuple  obligation1UO_4 obligation1T_4) (ASSIGN* 4))
 (set.member (tuple  obligation1UO_4 obligation1AT_4) (ASSIGN* 4))
 (set.member (tuple  obligation1U_4 obligation1U_4) USERS)
 (distinct obligation1S_4 obligation1U_4)
)))


(declare-fun obligation2U_4 () Int)
(declare-fun obligation2UA_4 () Int)
(declare-fun obligation2AT_4 () Int)
(declare-fun obligation2UO_4 () Int)
(declare-fun obligation2ar_4 () Int)
(declare-fun obligation2S_4 () Int)
(declare-fun obligation2T_4 () Int)
(assert (>= obligation2U_4 0))
(assert (>= obligation2UA_4 0))
(assert (>= obligation2AT_4 0))
(assert (>= obligation2UO_4 0))
(assert (or (= obligation2ar_4 26)
))
(assert (= obligation2S_4 4))
(assert (= obligation2T_4 20))
(assert (=> (= (obligation2 4) true) (and
 (set.member (tuple  obligation2U_4 obligation2S_4) (ASSIGN* 4))
 (set.member (tuple  obligation2U_4 obligation2UA_4) (ASSIGN* 4))
 (set.member (tuple obligation2UA_4 obligation2ar_4 obligation2AT_4) (ASSOC 4))
 (set.member (tuple  obligation2UO_4 obligation2T_4) (ASSIGN* 4))
 (set.member (tuple  obligation2UO_4 obligation2AT_4) (ASSIGN* 4))
 (set.member (tuple  obligation2U_4 obligation2U_4) USERS)
 (distinct obligation2S_4 obligation2U_4)
)))


(declare-fun obligation3U_4 () Int)
(declare-fun obligation3UA_4 () Int)
(declare-fun obligation3AT_4 () Int)
(declare-fun obligation3UO_4 () Int)
(declare-fun obligation3ar_4 () Int)
(declare-fun obligation3S_4 () Int)
(declare-fun obligation3T_4 () Int)
(assert (>= obligation3U_4 0))
(assert (>= obligation3UA_4 0))
(assert (>= obligation3AT_4 0))
(assert (>= obligation3UO_4 0))
(assert (or (= obligation3ar_4 27)
))
(assert (= obligation3S_4 23))
(assert (= obligation3T_4 20))
(assert (=> (= (obligation3 4) true) (and
 (set.member (tuple  obligation3U_4 obligation3S_4) (ASSIGN* 4))
 (set.member (tuple  obligation3U_4 obligation3UA_4) (ASSIGN* 4))
 (set.member (tuple obligation3UA_4 obligation3ar_4 obligation3AT_4) (ASSOC 4))
 (set.member (tuple  obligation3UO_4 obligation3T_4) (ASSIGN* 4))
 (set.member (tuple  obligation3UO_4 obligation3AT_4) (ASSIGN* 4))
 (set.member (tuple  obligation3U_4 obligation3U_4) USERS)
 (distinct obligation3S_4 obligation3U_4)
)))


(declare-fun obligation4U_4 () Int)
(declare-fun obligation4UA_4 () Int)
(declare-fun obligation4AT_4 () Int)
(declare-fun obligation4UO_4 () Int)
(declare-fun obligation4ar_4 () Int)
(declare-fun obligation4S_4 () Int)
(declare-fun obligation4T_4 () Int)
(assert (>= obligation4U_4 0))
(assert (>= obligation4UA_4 0))
(assert (>= obligation4AT_4 0))
(assert (>= obligation4UO_4 0))
(assert (or (= obligation4ar_4 28)
))
(assert (= obligation4S_4 19))
(assert (= obligation4T_4 20))
(assert (=> (= (obligation4 4) true) (and
 (set.member (tuple  obligation4U_4 obligation4S_4) (ASSIGN* 4))
 (set.member (tuple  obligation4U_4 obligation4UA_4) (ASSIGN* 4))
 (set.member (tuple obligation4UA_4 obligation4ar_4 obligation4AT_4) (ASSOC 4))
 (set.member (tuple  obligation4UO_4 obligation4T_4) (ASSIGN* 4))
 (set.member (tuple  obligation4UO_4 obligation4AT_4) (ASSIGN* 4))
 (set.member (tuple  obligation4U_4 obligation4U_4) USERS)
 (distinct obligation4S_4 obligation4U_4)
)))


(declare-fun obligation5U_4 () Int)
(declare-fun obligation5UA_4 () Int)
(declare-fun obligation5AT_4 () Int)
(declare-fun obligation5UO_4 () Int)
(declare-fun obligation5ar_4 () Int)
(declare-fun obligation5S_4 () Int)
(declare-fun obligation5T_4 () Int)
(assert (>= obligation5U_4 0))
(assert (>= obligation5UA_4 0))
(assert (>= obligation5AT_4 0))
(assert (>= obligation5UO_4 0))
(assert (or (= obligation5ar_4 35)
))
(assert (= obligation5S_4 14))
(assert (= obligation5T_4 20))
(assert (=> (= (obligation5 4) true) (and
 (set.member (tuple  obligation5U_4 obligation5S_4) (ASSIGN* 4))
 (set.member (tuple  obligation5U_4 obligation5UA_4) (ASSIGN* 4))
 (set.member (tuple obligation5UA_4 obligation5ar_4 obligation5AT_4) (ASSOC 4))
 (set.member (tuple  obligation5UO_4 obligation5T_4) (ASSIGN* 4))
 (set.member (tuple  obligation5UO_4 obligation5AT_4) (ASSIGN* 4))
 (set.member (tuple  obligation5U_4 obligation5U_4) USERS)
 (distinct obligation5S_4 obligation5U_4)
)))


(declare-fun obligation6U_4 () Int)
(declare-fun obligation6UA_4 () Int)
(declare-fun obligation6AT_4 () Int)
(declare-fun obligation6UO_4 () Int)
(declare-fun obligation6ar_4 () Int)
(declare-fun obligation6S_4 () Int)
(declare-fun obligation6T_4 () Int)
(assert (>= obligation6U_4 0))
(assert (>= obligation6UA_4 0))
(assert (>= obligation6AT_4 0))
(assert (>= obligation6UO_4 0))
(assert (or (= obligation6ar_4 30)
))
(assert (= obligation6S_4 2))
(assert (= obligation6T_4 20))
(assert (=> (= (obligation6 4) true) (and
 (set.member (tuple  obligation6U_4 obligation6S_4) (ASSIGN* 4))
 (set.member (tuple  obligation6U_4 obligation6UA_4) (ASSIGN* 4))
 (set.member (tuple obligation6UA_4 obligation6ar_4 obligation6AT_4) (ASSOC 4))
 (set.member (tuple  obligation6UO_4 obligation6T_4) (ASSIGN* 4))
 (set.member (tuple  obligation6UO_4 obligation6AT_4) (ASSIGN* 4))
 (set.member (tuple  obligation6U_4 obligation6U_4) USERS)
 (distinct obligation6S_4 obligation6U_4)
)))


(declare-fun obligation7U_4 () Int)
(declare-fun obligation7UA_4 () Int)
(declare-fun obligation7AT_4 () Int)
(declare-fun obligation7UO_4 () Int)
(declare-fun obligation7ar_4 () Int)
(declare-fun obligation7S_4 () Int)
(declare-fun obligation7T_4 () Int)
(assert (>= obligation7U_4 0))
(assert (>= obligation7UA_4 0))
(assert (>= obligation7AT_4 0))
(assert (>= obligation7UO_4 0))
(assert (or (= obligation7ar_4 31)
))
(assert (= obligation7S_4 8))
(assert (= obligation7T_4 20))
(assert (=> (= (obligation7 4) true) (and
 (set.member (tuple  obligation7U_4 obligation7S_4) (ASSIGN* 4))
 (set.member (tuple  obligation7U_4 obligation7UA_4) (ASSIGN* 4))
 (set.member (tuple obligation7UA_4 obligation7ar_4 obligation7AT_4) (ASSOC 4))
 (set.member (tuple  obligation7UO_4 obligation7T_4) (ASSIGN* 4))
 (set.member (tuple  obligation7UO_4 obligation7AT_4) (ASSIGN* 4))
 (set.member (tuple  obligation7U_4 obligation7U_4) USERS)
 (distinct obligation7S_4 obligation7U_4)
)))


(declare-fun obligation8U_4 () Int)
(declare-fun obligation8UA_4 () Int)
(declare-fun obligation8AT_4 () Int)
(declare-fun obligation8UO_4 () Int)
(declare-fun obligation8ar_4 () Int)
(declare-fun obligation8S_4 () Int)
(declare-fun obligation8T_4 () Int)
(assert (>= obligation8U_4 0))
(assert (>= obligation8UA_4 0))
(assert (>= obligation8AT_4 0))
(assert (>= obligation8UO_4 0))
(assert (or (= obligation8ar_4 32)
))
(assert (= obligation8S_4 10))
(assert (= obligation8T_4 20))
(assert (=> (= (obligation8 4) true) (and
 (set.member (tuple  obligation8U_4 obligation8S_4) (ASSIGN* 4))
 (set.member (tuple  obligation8U_4 obligation8UA_4) (ASSIGN* 4))
 (set.member (tuple obligation8UA_4 obligation8ar_4 obligation8AT_4) (ASSOC 4))
 (set.member (tuple  obligation8UO_4 obligation8T_4) (ASSIGN* 4))
 (set.member (tuple  obligation8UO_4 obligation8AT_4) (ASSIGN* 4))
 (set.member (tuple  obligation8U_4 obligation8U_4) USERS)
 (distinct obligation8S_4 obligation8U_4)
)))


(declare-fun obligation9U_4 () Int)
(declare-fun obligation9UA_4 () Int)
(declare-fun obligation9AT_4 () Int)
(declare-fun obligation9UO_4 () Int)
(declare-fun obligation9ar_4 () Int)
(declare-fun obligation9S_4 () Int)
(declare-fun obligation9T_4 () Int)
(assert (>= obligation9U_4 0))
(assert (>= obligation9UA_4 0))
(assert (>= obligation9AT_4 0))
(assert (>= obligation9UO_4 0))
(assert (or (= obligation9ar_4 33)
))
(assert (= obligation9S_4 11))
(assert (= obligation9T_4 20))
(assert (=> (= (obligation9 4) true) (and
 (set.member (tuple  obligation9U_4 obligation9S_4) (ASSIGN* 4))
 (set.member (tuple  obligation9U_4 obligation9UA_4) (ASSIGN* 4))
 (set.member (tuple obligation9UA_4 obligation9ar_4 obligation9AT_4) (ASSOC 4))
 (set.member (tuple  obligation9UO_4 obligation9T_4) (ASSIGN* 4))
 (set.member (tuple  obligation9UO_4 obligation9AT_4) (ASSIGN* 4))
 (set.member (tuple  obligation9U_4 obligation9U_4) USERS)
 (distinct obligation9S_4 obligation9U_4)
)))


(declare-fun obligation10U_4 () Int)
(declare-fun obligation10UA_4 () Int)
(declare-fun obligation10AT_4 () Int)
(declare-fun obligation10UO_4 () Int)
(declare-fun obligation10ar_4 () Int)
(declare-fun obligation10S_4 () Int)
(declare-fun obligation10T_4 () Int)
(assert (>= obligation10U_4 0))
(assert (>= obligation10UA_4 0))
(assert (>= obligation10AT_4 0))
(assert (>= obligation10UO_4 0))
(assert (or (= obligation10ar_4 34)
))
(assert (= obligation10S_4 13))
(assert (= obligation10T_4 20))
(assert (=> (= (obligation10 4) true) (and
 (set.member (tuple  obligation10U_4 obligation10S_4) (ASSIGN* 4))
 (set.member (tuple  obligation10U_4 obligation10UA_4) (ASSIGN* 4))
 (set.member (tuple obligation10UA_4 obligation10ar_4 obligation10AT_4) (ASSOC 4))
 (set.member (tuple  obligation10UO_4 obligation10T_4) (ASSIGN* 4))
 (set.member (tuple  obligation10UO_4 obligation10AT_4) (ASSIGN* 4))
 (set.member (tuple  obligation10U_4 obligation10U_4) USERS)
 (distinct obligation10S_4 obligation10U_4)
)))




; 5.2 a->Eff

(declare-fun obligation0_GrantAction_5_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation0 4) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation0_GrantAction_5_0
		(=>(not (set.member (tuple 16 32 20) (ASSOC 4))) (= obligation0_GrantAction_5_0 (set.singleton(tuple 16 32 20))))

		(=>(not (not (set.member (tuple 16 32 20) (ASSOC 4)))) (= obligation0_GrantAction_5_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 5) (ASSIGN 4)))
(assert (= (ASSIGN* 5) (ASSIGN* 4)))
(assert (= (ASSOC 5) 
	(set.union (ASSOC 4)  obligation0_GrantAction_5_0)
))



(declare-fun obligation1_GrantAction_5_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation1 4) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation1_GrantAction_5_0
		(=>(not (set.member (tuple 4 26 20) (ASSOC 4))) (= obligation1_GrantAction_5_0 (set.singleton(tuple 4 26 20))))

		(=>(not (not (set.member (tuple 4 26 20) (ASSOC 4)))) (= obligation1_GrantAction_5_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 5) (ASSIGN 4)))
(assert (= (ASSIGN* 5) (ASSIGN* 4)))
(assert (= (ASSOC 5) 
	(set.union (ASSOC 4)  obligation1_GrantAction_5_0)
))



(declare-fun obligation2_GrantAction_5_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation2 4) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation2_GrantAction_5_0
		(=>(not (set.member (tuple 23 27 20) (ASSOC 4))) (= obligation2_GrantAction_5_0 (set.singleton(tuple 23 27 20))))

		(=>(not (not (set.member (tuple 23 27 20) (ASSOC 4)))) (= obligation2_GrantAction_5_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 5) (ASSIGN 4)))
(assert (= (ASSIGN* 5) (ASSIGN* 4)))
(assert (= (ASSOC 5) 
	(set.union (ASSOC 4)  obligation2_GrantAction_5_0)
))



(declare-fun obligation3_GrantAction_5_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation3 4) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation3_GrantAction_5_0
		(=>(not (set.member (tuple 19 28 20) (ASSOC 4))) (= obligation3_GrantAction_5_0 (set.singleton(tuple 19 28 20))))

		(=>(not (not (set.member (tuple 19 28 20) (ASSOC 4)))) (= obligation3_GrantAction_5_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 5) (ASSIGN 4)))
(assert (= (ASSIGN* 5) (ASSIGN* 4)))
(assert (= (ASSOC 5) 
	(set.union (ASSOC 4)  obligation3_GrantAction_5_0)
))



(declare-fun obligation4_GrantAction_5_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation4 4) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation4_GrantAction_5_0
		(=>(not (set.member (tuple 14 35 20) (ASSOC 4))) (= obligation4_GrantAction_5_0 (set.singleton(tuple 14 35 20))))

		(=>(not (not (set.member (tuple 14 35 20) (ASSOC 4)))) (= obligation4_GrantAction_5_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 5) (ASSIGN 4)))
(assert (= (ASSIGN* 5) (ASSIGN* 4)))
(assert (= (ASSOC 5) 
	(set.union (ASSOC 4)  obligation4_GrantAction_5_0)
))



(declare-fun obligation5_GrantAction_5_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation5 4) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation5_GrantAction_5_0
		(=>(not (set.member (tuple 2 30 20) (ASSOC 4))) (= obligation5_GrantAction_5_0 (set.singleton(tuple 2 30 20))))

		(=>(not (not (set.member (tuple 2 30 20) (ASSOC 4)))) (= obligation5_GrantAction_5_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 5) (ASSIGN 4)))
(assert (= (ASSIGN* 5) (ASSIGN* 4)))
(assert (= (ASSOC 5) 
	(set.union (ASSOC 4)  obligation5_GrantAction_5_0)
))



(declare-fun obligation6_GrantAction_5_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation6 4) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation6_GrantAction_5_0
		(=>(not (set.member (tuple 8 31 20) (ASSOC 4))) (= obligation6_GrantAction_5_0 (set.singleton(tuple 8 31 20))))

		(=>(not (not (set.member (tuple 8 31 20) (ASSOC 4)))) (= obligation6_GrantAction_5_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 5) (ASSIGN 4)))
(assert (= (ASSIGN* 5) (ASSIGN* 4)))
(assert (= (ASSOC 5) 
	(set.union (ASSOC 4)  obligation6_GrantAction_5_0)
))



(declare-fun obligation7_GrantAction_5_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation7 4) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation7_GrantAction_5_0
		(=>(not (set.member (tuple 10 32 20) (ASSOC 4))) (= obligation7_GrantAction_5_0 (set.singleton(tuple 10 32 20))))

		(=>(not (not (set.member (tuple 10 32 20) (ASSOC 4)))) (= obligation7_GrantAction_5_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 5) (ASSIGN 4)))
(assert (= (ASSIGN* 5) (ASSIGN* 4)))
(assert (= (ASSOC 5) 
	(set.union (ASSOC 4)  obligation7_GrantAction_5_0)
))



(declare-fun obligation8_GrantAction_5_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation8 4) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation8_GrantAction_5_0
		(=>(not (set.member (tuple 11 33 20) (ASSOC 4))) (= obligation8_GrantAction_5_0 (set.singleton(tuple 11 33 20))))

		(=>(not (not (set.member (tuple 11 33 20) (ASSOC 4)))) (= obligation8_GrantAction_5_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 5) (ASSIGN 4)))
(assert (= (ASSIGN* 5) (ASSIGN* 4)))
(assert (= (ASSOC 5) 
	(set.union (ASSOC 4)  obligation8_GrantAction_5_0)
))



(declare-fun obligation9_GrantAction_5_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation9 4) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation9_GrantAction_5_0
		(=>(not (set.member (tuple 13 34 20) (ASSOC 4))) (= obligation9_GrantAction_5_0 (set.singleton(tuple 13 34 20))))

		(=>(not (not (set.member (tuple 13 34 20) (ASSOC 4)))) (= obligation9_GrantAction_5_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 5) (ASSIGN 4)))
(assert (= (ASSIGN* 5) (ASSIGN* 4)))
(assert (= (ASSOC 5) 
	(set.union (ASSOC 4)  obligation9_GrantAction_5_0)
))



(declare-fun obligation10_GrantAction_5_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation10 4) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation10_GrantAction_5_0
		(=>(not (set.member (tuple 13 35 20) (ASSOC 4))) (= obligation10_GrantAction_5_0 (set.singleton(tuple 13 35 20))))

		(=>(not (not (set.member (tuple 13 35 20) (ASSOC 4)))) (= obligation10_GrantAction_5_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 5) (ASSIGN 4)))
(assert (= (ASSIGN* 5) (ASSIGN* 4)))
(assert (= (ASSOC 5) 
	(set.union (ASSOC 4)  obligation10_GrantAction_5_0)
))



; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 5) (ASSIGN* 4))
(or 
(= (obligation7 4) true)(= (obligation6 4) true)(= (obligation9 4) true)(= (obligation8 4) true)(= (obligation3 4) true)(= (obligation2 4) true)(= (obligation5 4) true)(= (obligation4 4) true)(= (obligation1 4) true)(= (obligation10 4) true)(= (obligation0 4) true))))
(assert (=> (distinct (ASSIGN 5) (ASSIGN 4))
(or (= (obligation7 4) true)(= (obligation6 4) true)(= (obligation9 4) true)(= (obligation8 4) true)(= (obligation3 4) true)(= (obligation2 4) true)(= (obligation5 4) true)(= (obligation4 4) true)(= (obligation1 4) true)(= (obligation10 4) true)(= (obligation0 4) true))))
(assert (=> (distinct (ASSOC 5) (ASSOC 4))
(or 
(= (obligation7 4) true)(= (obligation6 4) true)(= (obligation9 4) true)(= (obligation8 4) true)(= (obligation3 4) true)(= (obligation2 4) true)(= (obligation5 4) true)(= (obligation4 4) true)(= (obligation1 4) true)(= (obligation10 4) true)(= (obligation0 4) true))))


; 5.4 Exactly one naive
; AT LEAST ONE
(assert (or(= (obligation7 4) true)(= (obligation6 4) true)(= (obligation9 4) true)(= (obligation8 4) true)(= (obligation3 4) true)(= (obligation2 4) true)(= (obligation5 4) true)(= (obligation4 4) true)(= (obligation1 4) true)(= (obligation10 4) true)(= (obligation0 4) true)))


;--------------------------------------------------------------------------------------------------------------------
;STEP6

; 5.1 a->PRE
(declare-fun obligation0U_5 () Int)
(declare-fun obligation0UA_5 () Int)
(declare-fun obligation0AT_5 () Int)
(declare-fun obligation0UO_5 () Int)
(declare-fun obligation0ar_5 () Int)
(declare-fun obligation0S_5 () Int)
(declare-fun obligation0T_5 () Int)
(assert (>= obligation0U_5 0))
(assert (>= obligation0UA_5 0))
(assert (>= obligation0AT_5 0))
(assert (>= obligation0UO_5 0))
(assert (or (= obligation0ar_5 24)
))
(assert (= obligation0S_5 18))
(assert (= obligation0T_5 20))
(assert (=> (= (obligation0 5) true) (and
 (set.member (tuple  obligation0U_5 obligation0S_5) (ASSIGN* 5))
 (set.member (tuple  obligation0U_5 obligation0UA_5) (ASSIGN* 5))
 (set.member (tuple obligation0UA_5 obligation0ar_5 obligation0AT_5) (ASSOC 5))
 (set.member (tuple  obligation0UO_5 obligation0T_5) (ASSIGN* 5))
 (set.member (tuple  obligation0UO_5 obligation0AT_5) (ASSIGN* 5))
 (set.member (tuple  obligation0U_5 obligation0U_5) USERS)
 (distinct obligation0S_5 obligation0U_5)
)))


(declare-fun obligation1U_5 () Int)
(declare-fun obligation1UA_5 () Int)
(declare-fun obligation1AT_5 () Int)
(declare-fun obligation1UO_5 () Int)
(declare-fun obligation1ar_5 () Int)
(declare-fun obligation1S_5 () Int)
(declare-fun obligation1T_5 () Int)
(assert (>= obligation1U_5 0))
(assert (>= obligation1UA_5 0))
(assert (>= obligation1AT_5 0))
(assert (>= obligation1UO_5 0))
(assert (or (= obligation1ar_5 32)
))
(assert (= obligation1S_5 16))
(assert (= obligation1T_5 20))
(assert (=> (= (obligation1 5) true) (and
 (set.member (tuple  obligation1U_5 obligation1S_5) (ASSIGN* 5))
 (set.member (tuple  obligation1U_5 obligation1UA_5) (ASSIGN* 5))
 (set.member (tuple obligation1UA_5 obligation1ar_5 obligation1AT_5) (ASSOC 5))
 (set.member (tuple  obligation1UO_5 obligation1T_5) (ASSIGN* 5))
 (set.member (tuple  obligation1UO_5 obligation1AT_5) (ASSIGN* 5))
 (set.member (tuple  obligation1U_5 obligation1U_5) USERS)
 (distinct obligation1S_5 obligation1U_5)
)))


(declare-fun obligation2U_5 () Int)
(declare-fun obligation2UA_5 () Int)
(declare-fun obligation2AT_5 () Int)
(declare-fun obligation2UO_5 () Int)
(declare-fun obligation2ar_5 () Int)
(declare-fun obligation2S_5 () Int)
(declare-fun obligation2T_5 () Int)
(assert (>= obligation2U_5 0))
(assert (>= obligation2UA_5 0))
(assert (>= obligation2AT_5 0))
(assert (>= obligation2UO_5 0))
(assert (or (= obligation2ar_5 26)
))
(assert (= obligation2S_5 4))
(assert (= obligation2T_5 20))
(assert (=> (= (obligation2 5) true) (and
 (set.member (tuple  obligation2U_5 obligation2S_5) (ASSIGN* 5))
 (set.member (tuple  obligation2U_5 obligation2UA_5) (ASSIGN* 5))
 (set.member (tuple obligation2UA_5 obligation2ar_5 obligation2AT_5) (ASSOC 5))
 (set.member (tuple  obligation2UO_5 obligation2T_5) (ASSIGN* 5))
 (set.member (tuple  obligation2UO_5 obligation2AT_5) (ASSIGN* 5))
 (set.member (tuple  obligation2U_5 obligation2U_5) USERS)
 (distinct obligation2S_5 obligation2U_5)
)))


(declare-fun obligation3U_5 () Int)
(declare-fun obligation3UA_5 () Int)
(declare-fun obligation3AT_5 () Int)
(declare-fun obligation3UO_5 () Int)
(declare-fun obligation3ar_5 () Int)
(declare-fun obligation3S_5 () Int)
(declare-fun obligation3T_5 () Int)
(assert (>= obligation3U_5 0))
(assert (>= obligation3UA_5 0))
(assert (>= obligation3AT_5 0))
(assert (>= obligation3UO_5 0))
(assert (or (= obligation3ar_5 27)
))
(assert (= obligation3S_5 23))
(assert (= obligation3T_5 20))
(assert (=> (= (obligation3 5) true) (and
 (set.member (tuple  obligation3U_5 obligation3S_5) (ASSIGN* 5))
 (set.member (tuple  obligation3U_5 obligation3UA_5) (ASSIGN* 5))
 (set.member (tuple obligation3UA_5 obligation3ar_5 obligation3AT_5) (ASSOC 5))
 (set.member (tuple  obligation3UO_5 obligation3T_5) (ASSIGN* 5))
 (set.member (tuple  obligation3UO_5 obligation3AT_5) (ASSIGN* 5))
 (set.member (tuple  obligation3U_5 obligation3U_5) USERS)
 (distinct obligation3S_5 obligation3U_5)
)))


(declare-fun obligation4U_5 () Int)
(declare-fun obligation4UA_5 () Int)
(declare-fun obligation4AT_5 () Int)
(declare-fun obligation4UO_5 () Int)
(declare-fun obligation4ar_5 () Int)
(declare-fun obligation4S_5 () Int)
(declare-fun obligation4T_5 () Int)
(assert (>= obligation4U_5 0))
(assert (>= obligation4UA_5 0))
(assert (>= obligation4AT_5 0))
(assert (>= obligation4UO_5 0))
(assert (or (= obligation4ar_5 28)
))
(assert (= obligation4S_5 19))
(assert (= obligation4T_5 20))
(assert (=> (= (obligation4 5) true) (and
 (set.member (tuple  obligation4U_5 obligation4S_5) (ASSIGN* 5))
 (set.member (tuple  obligation4U_5 obligation4UA_5) (ASSIGN* 5))
 (set.member (tuple obligation4UA_5 obligation4ar_5 obligation4AT_5) (ASSOC 5))
 (set.member (tuple  obligation4UO_5 obligation4T_5) (ASSIGN* 5))
 (set.member (tuple  obligation4UO_5 obligation4AT_5) (ASSIGN* 5))
 (set.member (tuple  obligation4U_5 obligation4U_5) USERS)
 (distinct obligation4S_5 obligation4U_5)
)))


(declare-fun obligation5U_5 () Int)
(declare-fun obligation5UA_5 () Int)
(declare-fun obligation5AT_5 () Int)
(declare-fun obligation5UO_5 () Int)
(declare-fun obligation5ar_5 () Int)
(declare-fun obligation5S_5 () Int)
(declare-fun obligation5T_5 () Int)
(assert (>= obligation5U_5 0))
(assert (>= obligation5UA_5 0))
(assert (>= obligation5AT_5 0))
(assert (>= obligation5UO_5 0))
(assert (or (= obligation5ar_5 35)
))
(assert (= obligation5S_5 14))
(assert (= obligation5T_5 20))
(assert (=> (= (obligation5 5) true) (and
 (set.member (tuple  obligation5U_5 obligation5S_5) (ASSIGN* 5))
 (set.member (tuple  obligation5U_5 obligation5UA_5) (ASSIGN* 5))
 (set.member (tuple obligation5UA_5 obligation5ar_5 obligation5AT_5) (ASSOC 5))
 (set.member (tuple  obligation5UO_5 obligation5T_5) (ASSIGN* 5))
 (set.member (tuple  obligation5UO_5 obligation5AT_5) (ASSIGN* 5))
 (set.member (tuple  obligation5U_5 obligation5U_5) USERS)
 (distinct obligation5S_5 obligation5U_5)
)))


(declare-fun obligation6U_5 () Int)
(declare-fun obligation6UA_5 () Int)
(declare-fun obligation6AT_5 () Int)
(declare-fun obligation6UO_5 () Int)
(declare-fun obligation6ar_5 () Int)
(declare-fun obligation6S_5 () Int)
(declare-fun obligation6T_5 () Int)
(assert (>= obligation6U_5 0))
(assert (>= obligation6UA_5 0))
(assert (>= obligation6AT_5 0))
(assert (>= obligation6UO_5 0))
(assert (or (= obligation6ar_5 30)
))
(assert (= obligation6S_5 2))
(assert (= obligation6T_5 20))
(assert (=> (= (obligation6 5) true) (and
 (set.member (tuple  obligation6U_5 obligation6S_5) (ASSIGN* 5))
 (set.member (tuple  obligation6U_5 obligation6UA_5) (ASSIGN* 5))
 (set.member (tuple obligation6UA_5 obligation6ar_5 obligation6AT_5) (ASSOC 5))
 (set.member (tuple  obligation6UO_5 obligation6T_5) (ASSIGN* 5))
 (set.member (tuple  obligation6UO_5 obligation6AT_5) (ASSIGN* 5))
 (set.member (tuple  obligation6U_5 obligation6U_5) USERS)
 (distinct obligation6S_5 obligation6U_5)
)))


(declare-fun obligation7U_5 () Int)
(declare-fun obligation7UA_5 () Int)
(declare-fun obligation7AT_5 () Int)
(declare-fun obligation7UO_5 () Int)
(declare-fun obligation7ar_5 () Int)
(declare-fun obligation7S_5 () Int)
(declare-fun obligation7T_5 () Int)
(assert (>= obligation7U_5 0))
(assert (>= obligation7UA_5 0))
(assert (>= obligation7AT_5 0))
(assert (>= obligation7UO_5 0))
(assert (or (= obligation7ar_5 31)
))
(assert (= obligation7S_5 8))
(assert (= obligation7T_5 20))
(assert (=> (= (obligation7 5) true) (and
 (set.member (tuple  obligation7U_5 obligation7S_5) (ASSIGN* 5))
 (set.member (tuple  obligation7U_5 obligation7UA_5) (ASSIGN* 5))
 (set.member (tuple obligation7UA_5 obligation7ar_5 obligation7AT_5) (ASSOC 5))
 (set.member (tuple  obligation7UO_5 obligation7T_5) (ASSIGN* 5))
 (set.member (tuple  obligation7UO_5 obligation7AT_5) (ASSIGN* 5))
 (set.member (tuple  obligation7U_5 obligation7U_5) USERS)
 (distinct obligation7S_5 obligation7U_5)
)))


(declare-fun obligation8U_5 () Int)
(declare-fun obligation8UA_5 () Int)
(declare-fun obligation8AT_5 () Int)
(declare-fun obligation8UO_5 () Int)
(declare-fun obligation8ar_5 () Int)
(declare-fun obligation8S_5 () Int)
(declare-fun obligation8T_5 () Int)
(assert (>= obligation8U_5 0))
(assert (>= obligation8UA_5 0))
(assert (>= obligation8AT_5 0))
(assert (>= obligation8UO_5 0))
(assert (or (= obligation8ar_5 32)
))
(assert (= obligation8S_5 10))
(assert (= obligation8T_5 20))
(assert (=> (= (obligation8 5) true) (and
 (set.member (tuple  obligation8U_5 obligation8S_5) (ASSIGN* 5))
 (set.member (tuple  obligation8U_5 obligation8UA_5) (ASSIGN* 5))
 (set.member (tuple obligation8UA_5 obligation8ar_5 obligation8AT_5) (ASSOC 5))
 (set.member (tuple  obligation8UO_5 obligation8T_5) (ASSIGN* 5))
 (set.member (tuple  obligation8UO_5 obligation8AT_5) (ASSIGN* 5))
 (set.member (tuple  obligation8U_5 obligation8U_5) USERS)
 (distinct obligation8S_5 obligation8U_5)
)))


(declare-fun obligation9U_5 () Int)
(declare-fun obligation9UA_5 () Int)
(declare-fun obligation9AT_5 () Int)
(declare-fun obligation9UO_5 () Int)
(declare-fun obligation9ar_5 () Int)
(declare-fun obligation9S_5 () Int)
(declare-fun obligation9T_5 () Int)
(assert (>= obligation9U_5 0))
(assert (>= obligation9UA_5 0))
(assert (>= obligation9AT_5 0))
(assert (>= obligation9UO_5 0))
(assert (or (= obligation9ar_5 33)
))
(assert (= obligation9S_5 11))
(assert (= obligation9T_5 20))
(assert (=> (= (obligation9 5) true) (and
 (set.member (tuple  obligation9U_5 obligation9S_5) (ASSIGN* 5))
 (set.member (tuple  obligation9U_5 obligation9UA_5) (ASSIGN* 5))
 (set.member (tuple obligation9UA_5 obligation9ar_5 obligation9AT_5) (ASSOC 5))
 (set.member (tuple  obligation9UO_5 obligation9T_5) (ASSIGN* 5))
 (set.member (tuple  obligation9UO_5 obligation9AT_5) (ASSIGN* 5))
 (set.member (tuple  obligation9U_5 obligation9U_5) USERS)
 (distinct obligation9S_5 obligation9U_5)
)))


(declare-fun obligation10U_5 () Int)
(declare-fun obligation10UA_5 () Int)
(declare-fun obligation10AT_5 () Int)
(declare-fun obligation10UO_5 () Int)
(declare-fun obligation10ar_5 () Int)
(declare-fun obligation10S_5 () Int)
(declare-fun obligation10T_5 () Int)
(assert (>= obligation10U_5 0))
(assert (>= obligation10UA_5 0))
(assert (>= obligation10AT_5 0))
(assert (>= obligation10UO_5 0))
(assert (or (= obligation10ar_5 34)
))
(assert (= obligation10S_5 13))
(assert (= obligation10T_5 20))
(assert (=> (= (obligation10 5) true) (and
 (set.member (tuple  obligation10U_5 obligation10S_5) (ASSIGN* 5))
 (set.member (tuple  obligation10U_5 obligation10UA_5) (ASSIGN* 5))
 (set.member (tuple obligation10UA_5 obligation10ar_5 obligation10AT_5) (ASSOC 5))
 (set.member (tuple  obligation10UO_5 obligation10T_5) (ASSIGN* 5))
 (set.member (tuple  obligation10UO_5 obligation10AT_5) (ASSIGN* 5))
 (set.member (tuple  obligation10U_5 obligation10U_5) USERS)
 (distinct obligation10S_5 obligation10U_5)
)))




; 5.2 a->Eff

(declare-fun obligation0_GrantAction_6_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation0 5) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation0_GrantAction_6_0
		(=>(not (set.member (tuple 16 32 20) (ASSOC 5))) (= obligation0_GrantAction_6_0 (set.singleton(tuple 16 32 20))))

		(=>(not (not (set.member (tuple 16 32 20) (ASSOC 5)))) (= obligation0_GrantAction_6_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 6) (ASSIGN 5)))
(assert (= (ASSIGN* 6) (ASSIGN* 5)))
(assert (= (ASSOC 6) 
	(set.union (ASSOC 5)  obligation0_GrantAction_6_0)
))



(declare-fun obligation1_GrantAction_6_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation1 5) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation1_GrantAction_6_0
		(=>(not (set.member (tuple 4 26 20) (ASSOC 5))) (= obligation1_GrantAction_6_0 (set.singleton(tuple 4 26 20))))

		(=>(not (not (set.member (tuple 4 26 20) (ASSOC 5)))) (= obligation1_GrantAction_6_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 6) (ASSIGN 5)))
(assert (= (ASSIGN* 6) (ASSIGN* 5)))
(assert (= (ASSOC 6) 
	(set.union (ASSOC 5)  obligation1_GrantAction_6_0)
))



(declare-fun obligation2_GrantAction_6_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation2 5) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation2_GrantAction_6_0
		(=>(not (set.member (tuple 23 27 20) (ASSOC 5))) (= obligation2_GrantAction_6_0 (set.singleton(tuple 23 27 20))))

		(=>(not (not (set.member (tuple 23 27 20) (ASSOC 5)))) (= obligation2_GrantAction_6_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 6) (ASSIGN 5)))
(assert (= (ASSIGN* 6) (ASSIGN* 5)))
(assert (= (ASSOC 6) 
	(set.union (ASSOC 5)  obligation2_GrantAction_6_0)
))



(declare-fun obligation3_GrantAction_6_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation3 5) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation3_GrantAction_6_0
		(=>(not (set.member (tuple 19 28 20) (ASSOC 5))) (= obligation3_GrantAction_6_0 (set.singleton(tuple 19 28 20))))

		(=>(not (not (set.member (tuple 19 28 20) (ASSOC 5)))) (= obligation3_GrantAction_6_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 6) (ASSIGN 5)))
(assert (= (ASSIGN* 6) (ASSIGN* 5)))
(assert (= (ASSOC 6) 
	(set.union (ASSOC 5)  obligation3_GrantAction_6_0)
))



(declare-fun obligation4_GrantAction_6_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation4 5) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation4_GrantAction_6_0
		(=>(not (set.member (tuple 14 35 20) (ASSOC 5))) (= obligation4_GrantAction_6_0 (set.singleton(tuple 14 35 20))))

		(=>(not (not (set.member (tuple 14 35 20) (ASSOC 5)))) (= obligation4_GrantAction_6_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 6) (ASSIGN 5)))
(assert (= (ASSIGN* 6) (ASSIGN* 5)))
(assert (= (ASSOC 6) 
	(set.union (ASSOC 5)  obligation4_GrantAction_6_0)
))



(declare-fun obligation5_GrantAction_6_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation5 5) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation5_GrantAction_6_0
		(=>(not (set.member (tuple 2 30 20) (ASSOC 5))) (= obligation5_GrantAction_6_0 (set.singleton(tuple 2 30 20))))

		(=>(not (not (set.member (tuple 2 30 20) (ASSOC 5)))) (= obligation5_GrantAction_6_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 6) (ASSIGN 5)))
(assert (= (ASSIGN* 6) (ASSIGN* 5)))
(assert (= (ASSOC 6) 
	(set.union (ASSOC 5)  obligation5_GrantAction_6_0)
))



(declare-fun obligation6_GrantAction_6_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation6 5) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation6_GrantAction_6_0
		(=>(not (set.member (tuple 8 31 20) (ASSOC 5))) (= obligation6_GrantAction_6_0 (set.singleton(tuple 8 31 20))))

		(=>(not (not (set.member (tuple 8 31 20) (ASSOC 5)))) (= obligation6_GrantAction_6_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 6) (ASSIGN 5)))
(assert (= (ASSIGN* 6) (ASSIGN* 5)))
(assert (= (ASSOC 6) 
	(set.union (ASSOC 5)  obligation6_GrantAction_6_0)
))



(declare-fun obligation7_GrantAction_6_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation7 5) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation7_GrantAction_6_0
		(=>(not (set.member (tuple 10 32 20) (ASSOC 5))) (= obligation7_GrantAction_6_0 (set.singleton(tuple 10 32 20))))

		(=>(not (not (set.member (tuple 10 32 20) (ASSOC 5)))) (= obligation7_GrantAction_6_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 6) (ASSIGN 5)))
(assert (= (ASSIGN* 6) (ASSIGN* 5)))
(assert (= (ASSOC 6) 
	(set.union (ASSOC 5)  obligation7_GrantAction_6_0)
))



(declare-fun obligation8_GrantAction_6_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation8 5) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation8_GrantAction_6_0
		(=>(not (set.member (tuple 11 33 20) (ASSOC 5))) (= obligation8_GrantAction_6_0 (set.singleton(tuple 11 33 20))))

		(=>(not (not (set.member (tuple 11 33 20) (ASSOC 5)))) (= obligation8_GrantAction_6_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 6) (ASSIGN 5)))
(assert (= (ASSIGN* 6) (ASSIGN* 5)))
(assert (= (ASSOC 6) 
	(set.union (ASSOC 5)  obligation8_GrantAction_6_0)
))



(declare-fun obligation9_GrantAction_6_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation9 5) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation9_GrantAction_6_0
		(=>(not (set.member (tuple 13 34 20) (ASSOC 5))) (= obligation9_GrantAction_6_0 (set.singleton(tuple 13 34 20))))

		(=>(not (not (set.member (tuple 13 34 20) (ASSOC 5)))) (= obligation9_GrantAction_6_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 6) (ASSIGN 5)))
(assert (= (ASSIGN* 6) (ASSIGN* 5)))
(assert (= (ASSOC 6) 
	(set.union (ASSOC 5)  obligation9_GrantAction_6_0)
))



(declare-fun obligation10_GrantAction_6_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation10 5) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation10_GrantAction_6_0
		(=>(not (set.member (tuple 13 35 20) (ASSOC 5))) (= obligation10_GrantAction_6_0 (set.singleton(tuple 13 35 20))))

		(=>(not (not (set.member (tuple 13 35 20) (ASSOC 5)))) (= obligation10_GrantAction_6_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 6) (ASSIGN 5)))
(assert (= (ASSIGN* 6) (ASSIGN* 5)))
(assert (= (ASSOC 6) 
	(set.union (ASSOC 5)  obligation10_GrantAction_6_0)
))



; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 6) (ASSIGN* 5))
(or 
(= (obligation7 5) true)(= (obligation6 5) true)(= (obligation9 5) true)(= (obligation8 5) true)(= (obligation3 5) true)(= (obligation2 5) true)(= (obligation5 5) true)(= (obligation4 5) true)(= (obligation1 5) true)(= (obligation10 5) true)(= (obligation0 5) true))))
(assert (=> (distinct (ASSIGN 6) (ASSIGN 5))
(or (= (obligation7 5) true)(= (obligation6 5) true)(= (obligation9 5) true)(= (obligation8 5) true)(= (obligation3 5) true)(= (obligation2 5) true)(= (obligation5 5) true)(= (obligation4 5) true)(= (obligation1 5) true)(= (obligation10 5) true)(= (obligation0 5) true))))
(assert (=> (distinct (ASSOC 6) (ASSOC 5))
(or 
(= (obligation7 5) true)(= (obligation6 5) true)(= (obligation9 5) true)(= (obligation8 5) true)(= (obligation3 5) true)(= (obligation2 5) true)(= (obligation5 5) true)(= (obligation4 5) true)(= (obligation1 5) true)(= (obligation10 5) true)(= (obligation0 5) true))))


; 5.4 Exactly one naive
; AT LEAST ONE
(assert (or(= (obligation7 5) true)(= (obligation6 5) true)(= (obligation9 5) true)(= (obligation8 5) true)(= (obligation3 5) true)(= (obligation2 5) true)(= (obligation5 5) true)(= (obligation4 5) true)(= (obligation1 5) true)(= (obligation10 5) true)(= (obligation0 5) true)))


;--------------------------------------------------------------------------------------------------------------------
;STEP7

; 5.1 a->PRE
(declare-fun obligation0U_6 () Int)
(declare-fun obligation0UA_6 () Int)
(declare-fun obligation0AT_6 () Int)
(declare-fun obligation0UO_6 () Int)
(declare-fun obligation0ar_6 () Int)
(declare-fun obligation0S_6 () Int)
(declare-fun obligation0T_6 () Int)
(assert (>= obligation0U_6 0))
(assert (>= obligation0UA_6 0))
(assert (>= obligation0AT_6 0))
(assert (>= obligation0UO_6 0))
(assert (or (= obligation0ar_6 24)
))
(assert (= obligation0S_6 18))
(assert (= obligation0T_6 20))
(assert (=> (= (obligation0 6) true) (and
 (set.member (tuple  obligation0U_6 obligation0S_6) (ASSIGN* 6))
 (set.member (tuple  obligation0U_6 obligation0UA_6) (ASSIGN* 6))
 (set.member (tuple obligation0UA_6 obligation0ar_6 obligation0AT_6) (ASSOC 6))
 (set.member (tuple  obligation0UO_6 obligation0T_6) (ASSIGN* 6))
 (set.member (tuple  obligation0UO_6 obligation0AT_6) (ASSIGN* 6))
 (set.member (tuple  obligation0U_6 obligation0U_6) USERS)
 (distinct obligation0S_6 obligation0U_6)
)))


(declare-fun obligation1U_6 () Int)
(declare-fun obligation1UA_6 () Int)
(declare-fun obligation1AT_6 () Int)
(declare-fun obligation1UO_6 () Int)
(declare-fun obligation1ar_6 () Int)
(declare-fun obligation1S_6 () Int)
(declare-fun obligation1T_6 () Int)
(assert (>= obligation1U_6 0))
(assert (>= obligation1UA_6 0))
(assert (>= obligation1AT_6 0))
(assert (>= obligation1UO_6 0))
(assert (or (= obligation1ar_6 32)
))
(assert (= obligation1S_6 16))
(assert (= obligation1T_6 20))
(assert (=> (= (obligation1 6) true) (and
 (set.member (tuple  obligation1U_6 obligation1S_6) (ASSIGN* 6))
 (set.member (tuple  obligation1U_6 obligation1UA_6) (ASSIGN* 6))
 (set.member (tuple obligation1UA_6 obligation1ar_6 obligation1AT_6) (ASSOC 6))
 (set.member (tuple  obligation1UO_6 obligation1T_6) (ASSIGN* 6))
 (set.member (tuple  obligation1UO_6 obligation1AT_6) (ASSIGN* 6))
 (set.member (tuple  obligation1U_6 obligation1U_6) USERS)
 (distinct obligation1S_6 obligation1U_6)
)))


(declare-fun obligation2U_6 () Int)
(declare-fun obligation2UA_6 () Int)
(declare-fun obligation2AT_6 () Int)
(declare-fun obligation2UO_6 () Int)
(declare-fun obligation2ar_6 () Int)
(declare-fun obligation2S_6 () Int)
(declare-fun obligation2T_6 () Int)
(assert (>= obligation2U_6 0))
(assert (>= obligation2UA_6 0))
(assert (>= obligation2AT_6 0))
(assert (>= obligation2UO_6 0))
(assert (or (= obligation2ar_6 26)
))
(assert (= obligation2S_6 4))
(assert (= obligation2T_6 20))
(assert (=> (= (obligation2 6) true) (and
 (set.member (tuple  obligation2U_6 obligation2S_6) (ASSIGN* 6))
 (set.member (tuple  obligation2U_6 obligation2UA_6) (ASSIGN* 6))
 (set.member (tuple obligation2UA_6 obligation2ar_6 obligation2AT_6) (ASSOC 6))
 (set.member (tuple  obligation2UO_6 obligation2T_6) (ASSIGN* 6))
 (set.member (tuple  obligation2UO_6 obligation2AT_6) (ASSIGN* 6))
 (set.member (tuple  obligation2U_6 obligation2U_6) USERS)
 (distinct obligation2S_6 obligation2U_6)
)))


(declare-fun obligation3U_6 () Int)
(declare-fun obligation3UA_6 () Int)
(declare-fun obligation3AT_6 () Int)
(declare-fun obligation3UO_6 () Int)
(declare-fun obligation3ar_6 () Int)
(declare-fun obligation3S_6 () Int)
(declare-fun obligation3T_6 () Int)
(assert (>= obligation3U_6 0))
(assert (>= obligation3UA_6 0))
(assert (>= obligation3AT_6 0))
(assert (>= obligation3UO_6 0))
(assert (or (= obligation3ar_6 27)
))
(assert (= obligation3S_6 23))
(assert (= obligation3T_6 20))
(assert (=> (= (obligation3 6) true) (and
 (set.member (tuple  obligation3U_6 obligation3S_6) (ASSIGN* 6))
 (set.member (tuple  obligation3U_6 obligation3UA_6) (ASSIGN* 6))
 (set.member (tuple obligation3UA_6 obligation3ar_6 obligation3AT_6) (ASSOC 6))
 (set.member (tuple  obligation3UO_6 obligation3T_6) (ASSIGN* 6))
 (set.member (tuple  obligation3UO_6 obligation3AT_6) (ASSIGN* 6))
 (set.member (tuple  obligation3U_6 obligation3U_6) USERS)
 (distinct obligation3S_6 obligation3U_6)
)))


(declare-fun obligation4U_6 () Int)
(declare-fun obligation4UA_6 () Int)
(declare-fun obligation4AT_6 () Int)
(declare-fun obligation4UO_6 () Int)
(declare-fun obligation4ar_6 () Int)
(declare-fun obligation4S_6 () Int)
(declare-fun obligation4T_6 () Int)
(assert (>= obligation4U_6 0))
(assert (>= obligation4UA_6 0))
(assert (>= obligation4AT_6 0))
(assert (>= obligation4UO_6 0))
(assert (or (= obligation4ar_6 28)
))
(assert (= obligation4S_6 19))
(assert (= obligation4T_6 20))
(assert (=> (= (obligation4 6) true) (and
 (set.member (tuple  obligation4U_6 obligation4S_6) (ASSIGN* 6))
 (set.member (tuple  obligation4U_6 obligation4UA_6) (ASSIGN* 6))
 (set.member (tuple obligation4UA_6 obligation4ar_6 obligation4AT_6) (ASSOC 6))
 (set.member (tuple  obligation4UO_6 obligation4T_6) (ASSIGN* 6))
 (set.member (tuple  obligation4UO_6 obligation4AT_6) (ASSIGN* 6))
 (set.member (tuple  obligation4U_6 obligation4U_6) USERS)
 (distinct obligation4S_6 obligation4U_6)
)))


(declare-fun obligation5U_6 () Int)
(declare-fun obligation5UA_6 () Int)
(declare-fun obligation5AT_6 () Int)
(declare-fun obligation5UO_6 () Int)
(declare-fun obligation5ar_6 () Int)
(declare-fun obligation5S_6 () Int)
(declare-fun obligation5T_6 () Int)
(assert (>= obligation5U_6 0))
(assert (>= obligation5UA_6 0))
(assert (>= obligation5AT_6 0))
(assert (>= obligation5UO_6 0))
(assert (or (= obligation5ar_6 35)
))
(assert (= obligation5S_6 14))
(assert (= obligation5T_6 20))
(assert (=> (= (obligation5 6) true) (and
 (set.member (tuple  obligation5U_6 obligation5S_6) (ASSIGN* 6))
 (set.member (tuple  obligation5U_6 obligation5UA_6) (ASSIGN* 6))
 (set.member (tuple obligation5UA_6 obligation5ar_6 obligation5AT_6) (ASSOC 6))
 (set.member (tuple  obligation5UO_6 obligation5T_6) (ASSIGN* 6))
 (set.member (tuple  obligation5UO_6 obligation5AT_6) (ASSIGN* 6))
 (set.member (tuple  obligation5U_6 obligation5U_6) USERS)
 (distinct obligation5S_6 obligation5U_6)
)))


(declare-fun obligation6U_6 () Int)
(declare-fun obligation6UA_6 () Int)
(declare-fun obligation6AT_6 () Int)
(declare-fun obligation6UO_6 () Int)
(declare-fun obligation6ar_6 () Int)
(declare-fun obligation6S_6 () Int)
(declare-fun obligation6T_6 () Int)
(assert (>= obligation6U_6 0))
(assert (>= obligation6UA_6 0))
(assert (>= obligation6AT_6 0))
(assert (>= obligation6UO_6 0))
(assert (or (= obligation6ar_6 30)
))
(assert (= obligation6S_6 2))
(assert (= obligation6T_6 20))
(assert (=> (= (obligation6 6) true) (and
 (set.member (tuple  obligation6U_6 obligation6S_6) (ASSIGN* 6))
 (set.member (tuple  obligation6U_6 obligation6UA_6) (ASSIGN* 6))
 (set.member (tuple obligation6UA_6 obligation6ar_6 obligation6AT_6) (ASSOC 6))
 (set.member (tuple  obligation6UO_6 obligation6T_6) (ASSIGN* 6))
 (set.member (tuple  obligation6UO_6 obligation6AT_6) (ASSIGN* 6))
 (set.member (tuple  obligation6U_6 obligation6U_6) USERS)
 (distinct obligation6S_6 obligation6U_6)
)))


(declare-fun obligation7U_6 () Int)
(declare-fun obligation7UA_6 () Int)
(declare-fun obligation7AT_6 () Int)
(declare-fun obligation7UO_6 () Int)
(declare-fun obligation7ar_6 () Int)
(declare-fun obligation7S_6 () Int)
(declare-fun obligation7T_6 () Int)
(assert (>= obligation7U_6 0))
(assert (>= obligation7UA_6 0))
(assert (>= obligation7AT_6 0))
(assert (>= obligation7UO_6 0))
(assert (or (= obligation7ar_6 31)
))
(assert (= obligation7S_6 8))
(assert (= obligation7T_6 20))
(assert (=> (= (obligation7 6) true) (and
 (set.member (tuple  obligation7U_6 obligation7S_6) (ASSIGN* 6))
 (set.member (tuple  obligation7U_6 obligation7UA_6) (ASSIGN* 6))
 (set.member (tuple obligation7UA_6 obligation7ar_6 obligation7AT_6) (ASSOC 6))
 (set.member (tuple  obligation7UO_6 obligation7T_6) (ASSIGN* 6))
 (set.member (tuple  obligation7UO_6 obligation7AT_6) (ASSIGN* 6))
 (set.member (tuple  obligation7U_6 obligation7U_6) USERS)
 (distinct obligation7S_6 obligation7U_6)
)))


(declare-fun obligation8U_6 () Int)
(declare-fun obligation8UA_6 () Int)
(declare-fun obligation8AT_6 () Int)
(declare-fun obligation8UO_6 () Int)
(declare-fun obligation8ar_6 () Int)
(declare-fun obligation8S_6 () Int)
(declare-fun obligation8T_6 () Int)
(assert (>= obligation8U_6 0))
(assert (>= obligation8UA_6 0))
(assert (>= obligation8AT_6 0))
(assert (>= obligation8UO_6 0))
(assert (or (= obligation8ar_6 32)
))
(assert (= obligation8S_6 10))
(assert (= obligation8T_6 20))
(assert (=> (= (obligation8 6) true) (and
 (set.member (tuple  obligation8U_6 obligation8S_6) (ASSIGN* 6))
 (set.member (tuple  obligation8U_6 obligation8UA_6) (ASSIGN* 6))
 (set.member (tuple obligation8UA_6 obligation8ar_6 obligation8AT_6) (ASSOC 6))
 (set.member (tuple  obligation8UO_6 obligation8T_6) (ASSIGN* 6))
 (set.member (tuple  obligation8UO_6 obligation8AT_6) (ASSIGN* 6))
 (set.member (tuple  obligation8U_6 obligation8U_6) USERS)
 (distinct obligation8S_6 obligation8U_6)
)))


(declare-fun obligation9U_6 () Int)
(declare-fun obligation9UA_6 () Int)
(declare-fun obligation9AT_6 () Int)
(declare-fun obligation9UO_6 () Int)
(declare-fun obligation9ar_6 () Int)
(declare-fun obligation9S_6 () Int)
(declare-fun obligation9T_6 () Int)
(assert (>= obligation9U_6 0))
(assert (>= obligation9UA_6 0))
(assert (>= obligation9AT_6 0))
(assert (>= obligation9UO_6 0))
(assert (or (= obligation9ar_6 33)
))
(assert (= obligation9S_6 11))
(assert (= obligation9T_6 20))
(assert (=> (= (obligation9 6) true) (and
 (set.member (tuple  obligation9U_6 obligation9S_6) (ASSIGN* 6))
 (set.member (tuple  obligation9U_6 obligation9UA_6) (ASSIGN* 6))
 (set.member (tuple obligation9UA_6 obligation9ar_6 obligation9AT_6) (ASSOC 6))
 (set.member (tuple  obligation9UO_6 obligation9T_6) (ASSIGN* 6))
 (set.member (tuple  obligation9UO_6 obligation9AT_6) (ASSIGN* 6))
 (set.member (tuple  obligation9U_6 obligation9U_6) USERS)
 (distinct obligation9S_6 obligation9U_6)
)))


(declare-fun obligation10U_6 () Int)
(declare-fun obligation10UA_6 () Int)
(declare-fun obligation10AT_6 () Int)
(declare-fun obligation10UO_6 () Int)
(declare-fun obligation10ar_6 () Int)
(declare-fun obligation10S_6 () Int)
(declare-fun obligation10T_6 () Int)
(assert (>= obligation10U_6 0))
(assert (>= obligation10UA_6 0))
(assert (>= obligation10AT_6 0))
(assert (>= obligation10UO_6 0))
(assert (or (= obligation10ar_6 34)
))
(assert (= obligation10S_6 13))
(assert (= obligation10T_6 20))
(assert (=> (= (obligation10 6) true) (and
 (set.member (tuple  obligation10U_6 obligation10S_6) (ASSIGN* 6))
 (set.member (tuple  obligation10U_6 obligation10UA_6) (ASSIGN* 6))
 (set.member (tuple obligation10UA_6 obligation10ar_6 obligation10AT_6) (ASSOC 6))
 (set.member (tuple  obligation10UO_6 obligation10T_6) (ASSIGN* 6))
 (set.member (tuple  obligation10UO_6 obligation10AT_6) (ASSIGN* 6))
 (set.member (tuple  obligation10U_6 obligation10U_6) USERS)
 (distinct obligation10S_6 obligation10U_6)
)))




; 5.2 a->Eff

(declare-fun obligation0_GrantAction_7_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation0 6) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation0_GrantAction_7_0
		(=>(not (set.member (tuple 16 32 20) (ASSOC 6))) (= obligation0_GrantAction_7_0 (set.singleton(tuple 16 32 20))))

		(=>(not (not (set.member (tuple 16 32 20) (ASSOC 6)))) (= obligation0_GrantAction_7_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 7) (ASSIGN 6)))
(assert (= (ASSIGN* 7) (ASSIGN* 6)))
(assert (= (ASSOC 7) 
	(set.union (ASSOC 6)  obligation0_GrantAction_7_0)
))



(declare-fun obligation1_GrantAction_7_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation1 6) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation1_GrantAction_7_0
		(=>(not (set.member (tuple 4 26 20) (ASSOC 6))) (= obligation1_GrantAction_7_0 (set.singleton(tuple 4 26 20))))

		(=>(not (not (set.member (tuple 4 26 20) (ASSOC 6)))) (= obligation1_GrantAction_7_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 7) (ASSIGN 6)))
(assert (= (ASSIGN* 7) (ASSIGN* 6)))
(assert (= (ASSOC 7) 
	(set.union (ASSOC 6)  obligation1_GrantAction_7_0)
))



(declare-fun obligation2_GrantAction_7_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation2 6) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation2_GrantAction_7_0
		(=>(not (set.member (tuple 23 27 20) (ASSOC 6))) (= obligation2_GrantAction_7_0 (set.singleton(tuple 23 27 20))))

		(=>(not (not (set.member (tuple 23 27 20) (ASSOC 6)))) (= obligation2_GrantAction_7_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 7) (ASSIGN 6)))
(assert (= (ASSIGN* 7) (ASSIGN* 6)))
(assert (= (ASSOC 7) 
	(set.union (ASSOC 6)  obligation2_GrantAction_7_0)
))



(declare-fun obligation3_GrantAction_7_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation3 6) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation3_GrantAction_7_0
		(=>(not (set.member (tuple 19 28 20) (ASSOC 6))) (= obligation3_GrantAction_7_0 (set.singleton(tuple 19 28 20))))

		(=>(not (not (set.member (tuple 19 28 20) (ASSOC 6)))) (= obligation3_GrantAction_7_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 7) (ASSIGN 6)))
(assert (= (ASSIGN* 7) (ASSIGN* 6)))
(assert (= (ASSOC 7) 
	(set.union (ASSOC 6)  obligation3_GrantAction_7_0)
))



(declare-fun obligation4_GrantAction_7_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation4 6) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation4_GrantAction_7_0
		(=>(not (set.member (tuple 14 35 20) (ASSOC 6))) (= obligation4_GrantAction_7_0 (set.singleton(tuple 14 35 20))))

		(=>(not (not (set.member (tuple 14 35 20) (ASSOC 6)))) (= obligation4_GrantAction_7_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 7) (ASSIGN 6)))
(assert (= (ASSIGN* 7) (ASSIGN* 6)))
(assert (= (ASSOC 7) 
	(set.union (ASSOC 6)  obligation4_GrantAction_7_0)
))



(declare-fun obligation5_GrantAction_7_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation5 6) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation5_GrantAction_7_0
		(=>(not (set.member (tuple 2 30 20) (ASSOC 6))) (= obligation5_GrantAction_7_0 (set.singleton(tuple 2 30 20))))

		(=>(not (not (set.member (tuple 2 30 20) (ASSOC 6)))) (= obligation5_GrantAction_7_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 7) (ASSIGN 6)))
(assert (= (ASSIGN* 7) (ASSIGN* 6)))
(assert (= (ASSOC 7) 
	(set.union (ASSOC 6)  obligation5_GrantAction_7_0)
))



(declare-fun obligation6_GrantAction_7_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation6 6) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation6_GrantAction_7_0
		(=>(not (set.member (tuple 8 31 20) (ASSOC 6))) (= obligation6_GrantAction_7_0 (set.singleton(tuple 8 31 20))))

		(=>(not (not (set.member (tuple 8 31 20) (ASSOC 6)))) (= obligation6_GrantAction_7_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 7) (ASSIGN 6)))
(assert (= (ASSIGN* 7) (ASSIGN* 6)))
(assert (= (ASSOC 7) 
	(set.union (ASSOC 6)  obligation6_GrantAction_7_0)
))



(declare-fun obligation7_GrantAction_7_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation7 6) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation7_GrantAction_7_0
		(=>(not (set.member (tuple 10 32 20) (ASSOC 6))) (= obligation7_GrantAction_7_0 (set.singleton(tuple 10 32 20))))

		(=>(not (not (set.member (tuple 10 32 20) (ASSOC 6)))) (= obligation7_GrantAction_7_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 7) (ASSIGN 6)))
(assert (= (ASSIGN* 7) (ASSIGN* 6)))
(assert (= (ASSOC 7) 
	(set.union (ASSOC 6)  obligation7_GrantAction_7_0)
))



(declare-fun obligation8_GrantAction_7_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation8 6) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation8_GrantAction_7_0
		(=>(not (set.member (tuple 11 33 20) (ASSOC 6))) (= obligation8_GrantAction_7_0 (set.singleton(tuple 11 33 20))))

		(=>(not (not (set.member (tuple 11 33 20) (ASSOC 6)))) (= obligation8_GrantAction_7_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 7) (ASSIGN 6)))
(assert (= (ASSIGN* 7) (ASSIGN* 6)))
(assert (= (ASSOC 7) 
	(set.union (ASSOC 6)  obligation8_GrantAction_7_0)
))



(declare-fun obligation9_GrantAction_7_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation9 6) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation9_GrantAction_7_0
		(=>(not (set.member (tuple 13 34 20) (ASSOC 6))) (= obligation9_GrantAction_7_0 (set.singleton(tuple 13 34 20))))

		(=>(not (not (set.member (tuple 13 34 20) (ASSOC 6)))) (= obligation9_GrantAction_7_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 7) (ASSIGN 6)))
(assert (= (ASSIGN* 7) (ASSIGN* 6)))
(assert (= (ASSOC 7) 
	(set.union (ASSOC 6)  obligation9_GrantAction_7_0)
))



(declare-fun obligation10_GrantAction_7_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation10 6) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation10_GrantAction_7_0
		(=>(not (set.member (tuple 13 35 20) (ASSOC 6))) (= obligation10_GrantAction_7_0 (set.singleton(tuple 13 35 20))))

		(=>(not (not (set.member (tuple 13 35 20) (ASSOC 6)))) (= obligation10_GrantAction_7_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 7) (ASSIGN 6)))
(assert (= (ASSIGN* 7) (ASSIGN* 6)))
(assert (= (ASSOC 7) 
	(set.union (ASSOC 6)  obligation10_GrantAction_7_0)
))



; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 7) (ASSIGN* 6))
(or 
(= (obligation7 6) true)(= (obligation6 6) true)(= (obligation9 6) true)(= (obligation8 6) true)(= (obligation3 6) true)(= (obligation2 6) true)(= (obligation5 6) true)(= (obligation4 6) true)(= (obligation1 6) true)(= (obligation10 6) true)(= (obligation0 6) true))))
(assert (=> (distinct (ASSIGN 7) (ASSIGN 6))
(or (= (obligation7 6) true)(= (obligation6 6) true)(= (obligation9 6) true)(= (obligation8 6) true)(= (obligation3 6) true)(= (obligation2 6) true)(= (obligation5 6) true)(= (obligation4 6) true)(= (obligation1 6) true)(= (obligation10 6) true)(= (obligation0 6) true))))
(assert (=> (distinct (ASSOC 7) (ASSOC 6))
(or 
(= (obligation7 6) true)(= (obligation6 6) true)(= (obligation9 6) true)(= (obligation8 6) true)(= (obligation3 6) true)(= (obligation2 6) true)(= (obligation5 6) true)(= (obligation4 6) true)(= (obligation1 6) true)(= (obligation10 6) true)(= (obligation0 6) true))))


; 5.4 Exactly one naive
; AT LEAST ONE
(assert (or(= (obligation7 6) true)(= (obligation6 6) true)(= (obligation9 6) true)(= (obligation8 6) true)(= (obligation3 6) true)(= (obligation2 6) true)(= (obligation5 6) true)(= (obligation4 6) true)(= (obligation1 6) true)(= (obligation10 6) true)(= (obligation0 6) true)))


;--------------------------------------------------------------------------------------------------------------------
;STEP8

; 5.1 a->PRE
(declare-fun obligation0U_7 () Int)
(declare-fun obligation0UA_7 () Int)
(declare-fun obligation0AT_7 () Int)
(declare-fun obligation0UO_7 () Int)
(declare-fun obligation0ar_7 () Int)
(declare-fun obligation0S_7 () Int)
(declare-fun obligation0T_7 () Int)
(assert (>= obligation0U_7 0))
(assert (>= obligation0UA_7 0))
(assert (>= obligation0AT_7 0))
(assert (>= obligation0UO_7 0))
(assert (or (= obligation0ar_7 24)
))
(assert (= obligation0S_7 18))
(assert (= obligation0T_7 20))
(assert (=> (= (obligation0 7) true) (and
 (set.member (tuple  obligation0U_7 obligation0S_7) (ASSIGN* 7))
 (set.member (tuple  obligation0U_7 obligation0UA_7) (ASSIGN* 7))
 (set.member (tuple obligation0UA_7 obligation0ar_7 obligation0AT_7) (ASSOC 7))
 (set.member (tuple  obligation0UO_7 obligation0T_7) (ASSIGN* 7))
 (set.member (tuple  obligation0UO_7 obligation0AT_7) (ASSIGN* 7))
 (set.member (tuple  obligation0U_7 obligation0U_7) USERS)
 (distinct obligation0S_7 obligation0U_7)
)))


(declare-fun obligation1U_7 () Int)
(declare-fun obligation1UA_7 () Int)
(declare-fun obligation1AT_7 () Int)
(declare-fun obligation1UO_7 () Int)
(declare-fun obligation1ar_7 () Int)
(declare-fun obligation1S_7 () Int)
(declare-fun obligation1T_7 () Int)
(assert (>= obligation1U_7 0))
(assert (>= obligation1UA_7 0))
(assert (>= obligation1AT_7 0))
(assert (>= obligation1UO_7 0))
(assert (or (= obligation1ar_7 32)
))
(assert (= obligation1S_7 16))
(assert (= obligation1T_7 20))
(assert (=> (= (obligation1 7) true) (and
 (set.member (tuple  obligation1U_7 obligation1S_7) (ASSIGN* 7))
 (set.member (tuple  obligation1U_7 obligation1UA_7) (ASSIGN* 7))
 (set.member (tuple obligation1UA_7 obligation1ar_7 obligation1AT_7) (ASSOC 7))
 (set.member (tuple  obligation1UO_7 obligation1T_7) (ASSIGN* 7))
 (set.member (tuple  obligation1UO_7 obligation1AT_7) (ASSIGN* 7))
 (set.member (tuple  obligation1U_7 obligation1U_7) USERS)
 (distinct obligation1S_7 obligation1U_7)
)))


(declare-fun obligation2U_7 () Int)
(declare-fun obligation2UA_7 () Int)
(declare-fun obligation2AT_7 () Int)
(declare-fun obligation2UO_7 () Int)
(declare-fun obligation2ar_7 () Int)
(declare-fun obligation2S_7 () Int)
(declare-fun obligation2T_7 () Int)
(assert (>= obligation2U_7 0))
(assert (>= obligation2UA_7 0))
(assert (>= obligation2AT_7 0))
(assert (>= obligation2UO_7 0))
(assert (or (= obligation2ar_7 26)
))
(assert (= obligation2S_7 4))
(assert (= obligation2T_7 20))
(assert (=> (= (obligation2 7) true) (and
 (set.member (tuple  obligation2U_7 obligation2S_7) (ASSIGN* 7))
 (set.member (tuple  obligation2U_7 obligation2UA_7) (ASSIGN* 7))
 (set.member (tuple obligation2UA_7 obligation2ar_7 obligation2AT_7) (ASSOC 7))
 (set.member (tuple  obligation2UO_7 obligation2T_7) (ASSIGN* 7))
 (set.member (tuple  obligation2UO_7 obligation2AT_7) (ASSIGN* 7))
 (set.member (tuple  obligation2U_7 obligation2U_7) USERS)
 (distinct obligation2S_7 obligation2U_7)
)))


(declare-fun obligation3U_7 () Int)
(declare-fun obligation3UA_7 () Int)
(declare-fun obligation3AT_7 () Int)
(declare-fun obligation3UO_7 () Int)
(declare-fun obligation3ar_7 () Int)
(declare-fun obligation3S_7 () Int)
(declare-fun obligation3T_7 () Int)
(assert (>= obligation3U_7 0))
(assert (>= obligation3UA_7 0))
(assert (>= obligation3AT_7 0))
(assert (>= obligation3UO_7 0))
(assert (or (= obligation3ar_7 27)
))
(assert (= obligation3S_7 23))
(assert (= obligation3T_7 20))
(assert (=> (= (obligation3 7) true) (and
 (set.member (tuple  obligation3U_7 obligation3S_7) (ASSIGN* 7))
 (set.member (tuple  obligation3U_7 obligation3UA_7) (ASSIGN* 7))
 (set.member (tuple obligation3UA_7 obligation3ar_7 obligation3AT_7) (ASSOC 7))
 (set.member (tuple  obligation3UO_7 obligation3T_7) (ASSIGN* 7))
 (set.member (tuple  obligation3UO_7 obligation3AT_7) (ASSIGN* 7))
 (set.member (tuple  obligation3U_7 obligation3U_7) USERS)
 (distinct obligation3S_7 obligation3U_7)
)))


(declare-fun obligation4U_7 () Int)
(declare-fun obligation4UA_7 () Int)
(declare-fun obligation4AT_7 () Int)
(declare-fun obligation4UO_7 () Int)
(declare-fun obligation4ar_7 () Int)
(declare-fun obligation4S_7 () Int)
(declare-fun obligation4T_7 () Int)
(assert (>= obligation4U_7 0))
(assert (>= obligation4UA_7 0))
(assert (>= obligation4AT_7 0))
(assert (>= obligation4UO_7 0))
(assert (or (= obligation4ar_7 28)
))
(assert (= obligation4S_7 19))
(assert (= obligation4T_7 20))
(assert (=> (= (obligation4 7) true) (and
 (set.member (tuple  obligation4U_7 obligation4S_7) (ASSIGN* 7))
 (set.member (tuple  obligation4U_7 obligation4UA_7) (ASSIGN* 7))
 (set.member (tuple obligation4UA_7 obligation4ar_7 obligation4AT_7) (ASSOC 7))
 (set.member (tuple  obligation4UO_7 obligation4T_7) (ASSIGN* 7))
 (set.member (tuple  obligation4UO_7 obligation4AT_7) (ASSIGN* 7))
 (set.member (tuple  obligation4U_7 obligation4U_7) USERS)
 (distinct obligation4S_7 obligation4U_7)
)))


(declare-fun obligation5U_7 () Int)
(declare-fun obligation5UA_7 () Int)
(declare-fun obligation5AT_7 () Int)
(declare-fun obligation5UO_7 () Int)
(declare-fun obligation5ar_7 () Int)
(declare-fun obligation5S_7 () Int)
(declare-fun obligation5T_7 () Int)
(assert (>= obligation5U_7 0))
(assert (>= obligation5UA_7 0))
(assert (>= obligation5AT_7 0))
(assert (>= obligation5UO_7 0))
(assert (or (= obligation5ar_7 35)
))
(assert (= obligation5S_7 14))
(assert (= obligation5T_7 20))
(assert (=> (= (obligation5 7) true) (and
 (set.member (tuple  obligation5U_7 obligation5S_7) (ASSIGN* 7))
 (set.member (tuple  obligation5U_7 obligation5UA_7) (ASSIGN* 7))
 (set.member (tuple obligation5UA_7 obligation5ar_7 obligation5AT_7) (ASSOC 7))
 (set.member (tuple  obligation5UO_7 obligation5T_7) (ASSIGN* 7))
 (set.member (tuple  obligation5UO_7 obligation5AT_7) (ASSIGN* 7))
 (set.member (tuple  obligation5U_7 obligation5U_7) USERS)
 (distinct obligation5S_7 obligation5U_7)
)))


(declare-fun obligation6U_7 () Int)
(declare-fun obligation6UA_7 () Int)
(declare-fun obligation6AT_7 () Int)
(declare-fun obligation6UO_7 () Int)
(declare-fun obligation6ar_7 () Int)
(declare-fun obligation6S_7 () Int)
(declare-fun obligation6T_7 () Int)
(assert (>= obligation6U_7 0))
(assert (>= obligation6UA_7 0))
(assert (>= obligation6AT_7 0))
(assert (>= obligation6UO_7 0))
(assert (or (= obligation6ar_7 30)
))
(assert (= obligation6S_7 2))
(assert (= obligation6T_7 20))
(assert (=> (= (obligation6 7) true) (and
 (set.member (tuple  obligation6U_7 obligation6S_7) (ASSIGN* 7))
 (set.member (tuple  obligation6U_7 obligation6UA_7) (ASSIGN* 7))
 (set.member (tuple obligation6UA_7 obligation6ar_7 obligation6AT_7) (ASSOC 7))
 (set.member (tuple  obligation6UO_7 obligation6T_7) (ASSIGN* 7))
 (set.member (tuple  obligation6UO_7 obligation6AT_7) (ASSIGN* 7))
 (set.member (tuple  obligation6U_7 obligation6U_7) USERS)
 (distinct obligation6S_7 obligation6U_7)
)))


(declare-fun obligation7U_7 () Int)
(declare-fun obligation7UA_7 () Int)
(declare-fun obligation7AT_7 () Int)
(declare-fun obligation7UO_7 () Int)
(declare-fun obligation7ar_7 () Int)
(declare-fun obligation7S_7 () Int)
(declare-fun obligation7T_7 () Int)
(assert (>= obligation7U_7 0))
(assert (>= obligation7UA_7 0))
(assert (>= obligation7AT_7 0))
(assert (>= obligation7UO_7 0))
(assert (or (= obligation7ar_7 31)
))
(assert (= obligation7S_7 8))
(assert (= obligation7T_7 20))
(assert (=> (= (obligation7 7) true) (and
 (set.member (tuple  obligation7U_7 obligation7S_7) (ASSIGN* 7))
 (set.member (tuple  obligation7U_7 obligation7UA_7) (ASSIGN* 7))
 (set.member (tuple obligation7UA_7 obligation7ar_7 obligation7AT_7) (ASSOC 7))
 (set.member (tuple  obligation7UO_7 obligation7T_7) (ASSIGN* 7))
 (set.member (tuple  obligation7UO_7 obligation7AT_7) (ASSIGN* 7))
 (set.member (tuple  obligation7U_7 obligation7U_7) USERS)
 (distinct obligation7S_7 obligation7U_7)
)))


(declare-fun obligation8U_7 () Int)
(declare-fun obligation8UA_7 () Int)
(declare-fun obligation8AT_7 () Int)
(declare-fun obligation8UO_7 () Int)
(declare-fun obligation8ar_7 () Int)
(declare-fun obligation8S_7 () Int)
(declare-fun obligation8T_7 () Int)
(assert (>= obligation8U_7 0))
(assert (>= obligation8UA_7 0))
(assert (>= obligation8AT_7 0))
(assert (>= obligation8UO_7 0))
(assert (or (= obligation8ar_7 32)
))
(assert (= obligation8S_7 10))
(assert (= obligation8T_7 20))
(assert (=> (= (obligation8 7) true) (and
 (set.member (tuple  obligation8U_7 obligation8S_7) (ASSIGN* 7))
 (set.member (tuple  obligation8U_7 obligation8UA_7) (ASSIGN* 7))
 (set.member (tuple obligation8UA_7 obligation8ar_7 obligation8AT_7) (ASSOC 7))
 (set.member (tuple  obligation8UO_7 obligation8T_7) (ASSIGN* 7))
 (set.member (tuple  obligation8UO_7 obligation8AT_7) (ASSIGN* 7))
 (set.member (tuple  obligation8U_7 obligation8U_7) USERS)
 (distinct obligation8S_7 obligation8U_7)
)))


(declare-fun obligation9U_7 () Int)
(declare-fun obligation9UA_7 () Int)
(declare-fun obligation9AT_7 () Int)
(declare-fun obligation9UO_7 () Int)
(declare-fun obligation9ar_7 () Int)
(declare-fun obligation9S_7 () Int)
(declare-fun obligation9T_7 () Int)
(assert (>= obligation9U_7 0))
(assert (>= obligation9UA_7 0))
(assert (>= obligation9AT_7 0))
(assert (>= obligation9UO_7 0))
(assert (or (= obligation9ar_7 33)
))
(assert (= obligation9S_7 11))
(assert (= obligation9T_7 20))
(assert (=> (= (obligation9 7) true) (and
 (set.member (tuple  obligation9U_7 obligation9S_7) (ASSIGN* 7))
 (set.member (tuple  obligation9U_7 obligation9UA_7) (ASSIGN* 7))
 (set.member (tuple obligation9UA_7 obligation9ar_7 obligation9AT_7) (ASSOC 7))
 (set.member (tuple  obligation9UO_7 obligation9T_7) (ASSIGN* 7))
 (set.member (tuple  obligation9UO_7 obligation9AT_7) (ASSIGN* 7))
 (set.member (tuple  obligation9U_7 obligation9U_7) USERS)
 (distinct obligation9S_7 obligation9U_7)
)))


(declare-fun obligation10U_7 () Int)
(declare-fun obligation10UA_7 () Int)
(declare-fun obligation10AT_7 () Int)
(declare-fun obligation10UO_7 () Int)
(declare-fun obligation10ar_7 () Int)
(declare-fun obligation10S_7 () Int)
(declare-fun obligation10T_7 () Int)
(assert (>= obligation10U_7 0))
(assert (>= obligation10UA_7 0))
(assert (>= obligation10AT_7 0))
(assert (>= obligation10UO_7 0))
(assert (or (= obligation10ar_7 34)
))
(assert (= obligation10S_7 13))
(assert (= obligation10T_7 20))
(assert (=> (= (obligation10 7) true) (and
 (set.member (tuple  obligation10U_7 obligation10S_7) (ASSIGN* 7))
 (set.member (tuple  obligation10U_7 obligation10UA_7) (ASSIGN* 7))
 (set.member (tuple obligation10UA_7 obligation10ar_7 obligation10AT_7) (ASSOC 7))
 (set.member (tuple  obligation10UO_7 obligation10T_7) (ASSIGN* 7))
 (set.member (tuple  obligation10UO_7 obligation10AT_7) (ASSIGN* 7))
 (set.member (tuple  obligation10U_7 obligation10U_7) USERS)
 (distinct obligation10S_7 obligation10U_7)
)))




; 5.2 a->Eff

(declare-fun obligation0_GrantAction_8_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation0 7) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation0_GrantAction_8_0
		(=>(not (set.member (tuple 16 32 20) (ASSOC 7))) (= obligation0_GrantAction_8_0 (set.singleton(tuple 16 32 20))))

		(=>(not (not (set.member (tuple 16 32 20) (ASSOC 7)))) (= obligation0_GrantAction_8_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 8) (ASSIGN 7)))
(assert (= (ASSIGN* 8) (ASSIGN* 7)))
(assert (= (ASSOC 8) 
	(set.union (ASSOC 7)  obligation0_GrantAction_8_0)
))



(declare-fun obligation1_GrantAction_8_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation1 7) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation1_GrantAction_8_0
		(=>(not (set.member (tuple 4 26 20) (ASSOC 7))) (= obligation1_GrantAction_8_0 (set.singleton(tuple 4 26 20))))

		(=>(not (not (set.member (tuple 4 26 20) (ASSOC 7)))) (= obligation1_GrantAction_8_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 8) (ASSIGN 7)))
(assert (= (ASSIGN* 8) (ASSIGN* 7)))
(assert (= (ASSOC 8) 
	(set.union (ASSOC 7)  obligation1_GrantAction_8_0)
))



(declare-fun obligation2_GrantAction_8_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation2 7) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation2_GrantAction_8_0
		(=>(not (set.member (tuple 23 27 20) (ASSOC 7))) (= obligation2_GrantAction_8_0 (set.singleton(tuple 23 27 20))))

		(=>(not (not (set.member (tuple 23 27 20) (ASSOC 7)))) (= obligation2_GrantAction_8_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 8) (ASSIGN 7)))
(assert (= (ASSIGN* 8) (ASSIGN* 7)))
(assert (= (ASSOC 8) 
	(set.union (ASSOC 7)  obligation2_GrantAction_8_0)
))



(declare-fun obligation3_GrantAction_8_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation3 7) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation3_GrantAction_8_0
		(=>(not (set.member (tuple 19 28 20) (ASSOC 7))) (= obligation3_GrantAction_8_0 (set.singleton(tuple 19 28 20))))

		(=>(not (not (set.member (tuple 19 28 20) (ASSOC 7)))) (= obligation3_GrantAction_8_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 8) (ASSIGN 7)))
(assert (= (ASSIGN* 8) (ASSIGN* 7)))
(assert (= (ASSOC 8) 
	(set.union (ASSOC 7)  obligation3_GrantAction_8_0)
))



(declare-fun obligation4_GrantAction_8_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation4 7) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation4_GrantAction_8_0
		(=>(not (set.member (tuple 14 35 20) (ASSOC 7))) (= obligation4_GrantAction_8_0 (set.singleton(tuple 14 35 20))))

		(=>(not (not (set.member (tuple 14 35 20) (ASSOC 7)))) (= obligation4_GrantAction_8_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 8) (ASSIGN 7)))
(assert (= (ASSIGN* 8) (ASSIGN* 7)))
(assert (= (ASSOC 8) 
	(set.union (ASSOC 7)  obligation4_GrantAction_8_0)
))



(declare-fun obligation5_GrantAction_8_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation5 7) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation5_GrantAction_8_0
		(=>(not (set.member (tuple 2 30 20) (ASSOC 7))) (= obligation5_GrantAction_8_0 (set.singleton(tuple 2 30 20))))

		(=>(not (not (set.member (tuple 2 30 20) (ASSOC 7)))) (= obligation5_GrantAction_8_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 8) (ASSIGN 7)))
(assert (= (ASSIGN* 8) (ASSIGN* 7)))
(assert (= (ASSOC 8) 
	(set.union (ASSOC 7)  obligation5_GrantAction_8_0)
))



(declare-fun obligation6_GrantAction_8_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation6 7) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation6_GrantAction_8_0
		(=>(not (set.member (tuple 8 31 20) (ASSOC 7))) (= obligation6_GrantAction_8_0 (set.singleton(tuple 8 31 20))))

		(=>(not (not (set.member (tuple 8 31 20) (ASSOC 7)))) (= obligation6_GrantAction_8_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 8) (ASSIGN 7)))
(assert (= (ASSIGN* 8) (ASSIGN* 7)))
(assert (= (ASSOC 8) 
	(set.union (ASSOC 7)  obligation6_GrantAction_8_0)
))



(declare-fun obligation7_GrantAction_8_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation7 7) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation7_GrantAction_8_0
		(=>(not (set.member (tuple 10 32 20) (ASSOC 7))) (= obligation7_GrantAction_8_0 (set.singleton(tuple 10 32 20))))

		(=>(not (not (set.member (tuple 10 32 20) (ASSOC 7)))) (= obligation7_GrantAction_8_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 8) (ASSIGN 7)))
(assert (= (ASSIGN* 8) (ASSIGN* 7)))
(assert (= (ASSOC 8) 
	(set.union (ASSOC 7)  obligation7_GrantAction_8_0)
))



(declare-fun obligation8_GrantAction_8_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation8 7) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation8_GrantAction_8_0
		(=>(not (set.member (tuple 11 33 20) (ASSOC 7))) (= obligation8_GrantAction_8_0 (set.singleton(tuple 11 33 20))))

		(=>(not (not (set.member (tuple 11 33 20) (ASSOC 7)))) (= obligation8_GrantAction_8_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 8) (ASSIGN 7)))
(assert (= (ASSIGN* 8) (ASSIGN* 7)))
(assert (= (ASSOC 8) 
	(set.union (ASSOC 7)  obligation8_GrantAction_8_0)
))



(declare-fun obligation9_GrantAction_8_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation9 7) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation9_GrantAction_8_0
		(=>(not (set.member (tuple 13 34 20) (ASSOC 7))) (= obligation9_GrantAction_8_0 (set.singleton(tuple 13 34 20))))

		(=>(not (not (set.member (tuple 13 34 20) (ASSOC 7)))) (= obligation9_GrantAction_8_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 8) (ASSIGN 7)))
(assert (= (ASSIGN* 8) (ASSIGN* 7)))
(assert (= (ASSOC 8) 
	(set.union (ASSOC 7)  obligation9_GrantAction_8_0)
))



(declare-fun obligation10_GrantAction_8_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation10 7) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation10_GrantAction_8_0
		(=>(not (set.member (tuple 13 35 20) (ASSOC 7))) (= obligation10_GrantAction_8_0 (set.singleton(tuple 13 35 20))))

		(=>(not (not (set.member (tuple 13 35 20) (ASSOC 7)))) (= obligation10_GrantAction_8_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 8) (ASSIGN 7)))
(assert (= (ASSIGN* 8) (ASSIGN* 7)))
(assert (= (ASSOC 8) 
	(set.union (ASSOC 7)  obligation10_GrantAction_8_0)
))



; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 8) (ASSIGN* 7))
(or 
(= (obligation7 7) true)(= (obligation6 7) true)(= (obligation9 7) true)(= (obligation8 7) true)(= (obligation3 7) true)(= (obligation2 7) true)(= (obligation5 7) true)(= (obligation4 7) true)(= (obligation1 7) true)(= (obligation10 7) true)(= (obligation0 7) true))))
(assert (=> (distinct (ASSIGN 8) (ASSIGN 7))
(or (= (obligation7 7) true)(= (obligation6 7) true)(= (obligation9 7) true)(= (obligation8 7) true)(= (obligation3 7) true)(= (obligation2 7) true)(= (obligation5 7) true)(= (obligation4 7) true)(= (obligation1 7) true)(= (obligation10 7) true)(= (obligation0 7) true))))
(assert (=> (distinct (ASSOC 8) (ASSOC 7))
(or 
(= (obligation7 7) true)(= (obligation6 7) true)(= (obligation9 7) true)(= (obligation8 7) true)(= (obligation3 7) true)(= (obligation2 7) true)(= (obligation5 7) true)(= (obligation4 7) true)(= (obligation1 7) true)(= (obligation10 7) true)(= (obligation0 7) true))))


; 5.4 Exactly one naive
; AT LEAST ONE
(assert (or(= (obligation7 7) true)(= (obligation6 7) true)(= (obligation9 7) true)(= (obligation8 7) true)(= (obligation3 7) true)(= (obligation2 7) true)(= (obligation5 7) true)(= (obligation4 7) true)(= (obligation1 7) true)(= (obligation10 7) true)(= (obligation0 7) true)))


;--------------------------------------------------------------------------------------------------------------------
;STEP9

; 5.1 a->PRE
(declare-fun obligation0U_8 () Int)
(declare-fun obligation0UA_8 () Int)
(declare-fun obligation0AT_8 () Int)
(declare-fun obligation0UO_8 () Int)
(declare-fun obligation0ar_8 () Int)
(declare-fun obligation0S_8 () Int)
(declare-fun obligation0T_8 () Int)
(assert (>= obligation0U_8 0))
(assert (>= obligation0UA_8 0))
(assert (>= obligation0AT_8 0))
(assert (>= obligation0UO_8 0))
(assert (or (= obligation0ar_8 24)
))
(assert (= obligation0S_8 18))
(assert (= obligation0T_8 20))
(assert (=> (= (obligation0 8) true) (and
 (set.member (tuple  obligation0U_8 obligation0S_8) (ASSIGN* 8))
 (set.member (tuple  obligation0U_8 obligation0UA_8) (ASSIGN* 8))
 (set.member (tuple obligation0UA_8 obligation0ar_8 obligation0AT_8) (ASSOC 8))
 (set.member (tuple  obligation0UO_8 obligation0T_8) (ASSIGN* 8))
 (set.member (tuple  obligation0UO_8 obligation0AT_8) (ASSIGN* 8))
 (set.member (tuple  obligation0U_8 obligation0U_8) USERS)
 (distinct obligation0S_8 obligation0U_8)
)))


(declare-fun obligation1U_8 () Int)
(declare-fun obligation1UA_8 () Int)
(declare-fun obligation1AT_8 () Int)
(declare-fun obligation1UO_8 () Int)
(declare-fun obligation1ar_8 () Int)
(declare-fun obligation1S_8 () Int)
(declare-fun obligation1T_8 () Int)
(assert (>= obligation1U_8 0))
(assert (>= obligation1UA_8 0))
(assert (>= obligation1AT_8 0))
(assert (>= obligation1UO_8 0))
(assert (or (= obligation1ar_8 32)
))
(assert (= obligation1S_8 16))
(assert (= obligation1T_8 20))
(assert (=> (= (obligation1 8) true) (and
 (set.member (tuple  obligation1U_8 obligation1S_8) (ASSIGN* 8))
 (set.member (tuple  obligation1U_8 obligation1UA_8) (ASSIGN* 8))
 (set.member (tuple obligation1UA_8 obligation1ar_8 obligation1AT_8) (ASSOC 8))
 (set.member (tuple  obligation1UO_8 obligation1T_8) (ASSIGN* 8))
 (set.member (tuple  obligation1UO_8 obligation1AT_8) (ASSIGN* 8))
 (set.member (tuple  obligation1U_8 obligation1U_8) USERS)
 (distinct obligation1S_8 obligation1U_8)
)))


(declare-fun obligation2U_8 () Int)
(declare-fun obligation2UA_8 () Int)
(declare-fun obligation2AT_8 () Int)
(declare-fun obligation2UO_8 () Int)
(declare-fun obligation2ar_8 () Int)
(declare-fun obligation2S_8 () Int)
(declare-fun obligation2T_8 () Int)
(assert (>= obligation2U_8 0))
(assert (>= obligation2UA_8 0))
(assert (>= obligation2AT_8 0))
(assert (>= obligation2UO_8 0))
(assert (or (= obligation2ar_8 26)
))
(assert (= obligation2S_8 4))
(assert (= obligation2T_8 20))
(assert (=> (= (obligation2 8) true) (and
 (set.member (tuple  obligation2U_8 obligation2S_8) (ASSIGN* 8))
 (set.member (tuple  obligation2U_8 obligation2UA_8) (ASSIGN* 8))
 (set.member (tuple obligation2UA_8 obligation2ar_8 obligation2AT_8) (ASSOC 8))
 (set.member (tuple  obligation2UO_8 obligation2T_8) (ASSIGN* 8))
 (set.member (tuple  obligation2UO_8 obligation2AT_8) (ASSIGN* 8))
 (set.member (tuple  obligation2U_8 obligation2U_8) USERS)
 (distinct obligation2S_8 obligation2U_8)
)))


(declare-fun obligation3U_8 () Int)
(declare-fun obligation3UA_8 () Int)
(declare-fun obligation3AT_8 () Int)
(declare-fun obligation3UO_8 () Int)
(declare-fun obligation3ar_8 () Int)
(declare-fun obligation3S_8 () Int)
(declare-fun obligation3T_8 () Int)
(assert (>= obligation3U_8 0))
(assert (>= obligation3UA_8 0))
(assert (>= obligation3AT_8 0))
(assert (>= obligation3UO_8 0))
(assert (or (= obligation3ar_8 27)
))
(assert (= obligation3S_8 23))
(assert (= obligation3T_8 20))
(assert (=> (= (obligation3 8) true) (and
 (set.member (tuple  obligation3U_8 obligation3S_8) (ASSIGN* 8))
 (set.member (tuple  obligation3U_8 obligation3UA_8) (ASSIGN* 8))
 (set.member (tuple obligation3UA_8 obligation3ar_8 obligation3AT_8) (ASSOC 8))
 (set.member (tuple  obligation3UO_8 obligation3T_8) (ASSIGN* 8))
 (set.member (tuple  obligation3UO_8 obligation3AT_8) (ASSIGN* 8))
 (set.member (tuple  obligation3U_8 obligation3U_8) USERS)
 (distinct obligation3S_8 obligation3U_8)
)))


(declare-fun obligation4U_8 () Int)
(declare-fun obligation4UA_8 () Int)
(declare-fun obligation4AT_8 () Int)
(declare-fun obligation4UO_8 () Int)
(declare-fun obligation4ar_8 () Int)
(declare-fun obligation4S_8 () Int)
(declare-fun obligation4T_8 () Int)
(assert (>= obligation4U_8 0))
(assert (>= obligation4UA_8 0))
(assert (>= obligation4AT_8 0))
(assert (>= obligation4UO_8 0))
(assert (or (= obligation4ar_8 28)
))
(assert (= obligation4S_8 19))
(assert (= obligation4T_8 20))
(assert (=> (= (obligation4 8) true) (and
 (set.member (tuple  obligation4U_8 obligation4S_8) (ASSIGN* 8))
 (set.member (tuple  obligation4U_8 obligation4UA_8) (ASSIGN* 8))
 (set.member (tuple obligation4UA_8 obligation4ar_8 obligation4AT_8) (ASSOC 8))
 (set.member (tuple  obligation4UO_8 obligation4T_8) (ASSIGN* 8))
 (set.member (tuple  obligation4UO_8 obligation4AT_8) (ASSIGN* 8))
 (set.member (tuple  obligation4U_8 obligation4U_8) USERS)
 (distinct obligation4S_8 obligation4U_8)
)))


(declare-fun obligation5U_8 () Int)
(declare-fun obligation5UA_8 () Int)
(declare-fun obligation5AT_8 () Int)
(declare-fun obligation5UO_8 () Int)
(declare-fun obligation5ar_8 () Int)
(declare-fun obligation5S_8 () Int)
(declare-fun obligation5T_8 () Int)
(assert (>= obligation5U_8 0))
(assert (>= obligation5UA_8 0))
(assert (>= obligation5AT_8 0))
(assert (>= obligation5UO_8 0))
(assert (or (= obligation5ar_8 35)
))
(assert (= obligation5S_8 14))
(assert (= obligation5T_8 20))
(assert (=> (= (obligation5 8) true) (and
 (set.member (tuple  obligation5U_8 obligation5S_8) (ASSIGN* 8))
 (set.member (tuple  obligation5U_8 obligation5UA_8) (ASSIGN* 8))
 (set.member (tuple obligation5UA_8 obligation5ar_8 obligation5AT_8) (ASSOC 8))
 (set.member (tuple  obligation5UO_8 obligation5T_8) (ASSIGN* 8))
 (set.member (tuple  obligation5UO_8 obligation5AT_8) (ASSIGN* 8))
 (set.member (tuple  obligation5U_8 obligation5U_8) USERS)
 (distinct obligation5S_8 obligation5U_8)
)))


(declare-fun obligation6U_8 () Int)
(declare-fun obligation6UA_8 () Int)
(declare-fun obligation6AT_8 () Int)
(declare-fun obligation6UO_8 () Int)
(declare-fun obligation6ar_8 () Int)
(declare-fun obligation6S_8 () Int)
(declare-fun obligation6T_8 () Int)
(assert (>= obligation6U_8 0))
(assert (>= obligation6UA_8 0))
(assert (>= obligation6AT_8 0))
(assert (>= obligation6UO_8 0))
(assert (or (= obligation6ar_8 30)
))
(assert (= obligation6S_8 2))
(assert (= obligation6T_8 20))
(assert (=> (= (obligation6 8) true) (and
 (set.member (tuple  obligation6U_8 obligation6S_8) (ASSIGN* 8))
 (set.member (tuple  obligation6U_8 obligation6UA_8) (ASSIGN* 8))
 (set.member (tuple obligation6UA_8 obligation6ar_8 obligation6AT_8) (ASSOC 8))
 (set.member (tuple  obligation6UO_8 obligation6T_8) (ASSIGN* 8))
 (set.member (tuple  obligation6UO_8 obligation6AT_8) (ASSIGN* 8))
 (set.member (tuple  obligation6U_8 obligation6U_8) USERS)
 (distinct obligation6S_8 obligation6U_8)
)))


(declare-fun obligation7U_8 () Int)
(declare-fun obligation7UA_8 () Int)
(declare-fun obligation7AT_8 () Int)
(declare-fun obligation7UO_8 () Int)
(declare-fun obligation7ar_8 () Int)
(declare-fun obligation7S_8 () Int)
(declare-fun obligation7T_8 () Int)
(assert (>= obligation7U_8 0))
(assert (>= obligation7UA_8 0))
(assert (>= obligation7AT_8 0))
(assert (>= obligation7UO_8 0))
(assert (or (= obligation7ar_8 31)
))
(assert (= obligation7S_8 8))
(assert (= obligation7T_8 20))
(assert (=> (= (obligation7 8) true) (and
 (set.member (tuple  obligation7U_8 obligation7S_8) (ASSIGN* 8))
 (set.member (tuple  obligation7U_8 obligation7UA_8) (ASSIGN* 8))
 (set.member (tuple obligation7UA_8 obligation7ar_8 obligation7AT_8) (ASSOC 8))
 (set.member (tuple  obligation7UO_8 obligation7T_8) (ASSIGN* 8))
 (set.member (tuple  obligation7UO_8 obligation7AT_8) (ASSIGN* 8))
 (set.member (tuple  obligation7U_8 obligation7U_8) USERS)
 (distinct obligation7S_8 obligation7U_8)
)))


(declare-fun obligation8U_8 () Int)
(declare-fun obligation8UA_8 () Int)
(declare-fun obligation8AT_8 () Int)
(declare-fun obligation8UO_8 () Int)
(declare-fun obligation8ar_8 () Int)
(declare-fun obligation8S_8 () Int)
(declare-fun obligation8T_8 () Int)
(assert (>= obligation8U_8 0))
(assert (>= obligation8UA_8 0))
(assert (>= obligation8AT_8 0))
(assert (>= obligation8UO_8 0))
(assert (or (= obligation8ar_8 32)
))
(assert (= obligation8S_8 10))
(assert (= obligation8T_8 20))
(assert (=> (= (obligation8 8) true) (and
 (set.member (tuple  obligation8U_8 obligation8S_8) (ASSIGN* 8))
 (set.member (tuple  obligation8U_8 obligation8UA_8) (ASSIGN* 8))
 (set.member (tuple obligation8UA_8 obligation8ar_8 obligation8AT_8) (ASSOC 8))
 (set.member (tuple  obligation8UO_8 obligation8T_8) (ASSIGN* 8))
 (set.member (tuple  obligation8UO_8 obligation8AT_8) (ASSIGN* 8))
 (set.member (tuple  obligation8U_8 obligation8U_8) USERS)
 (distinct obligation8S_8 obligation8U_8)
)))


(declare-fun obligation9U_8 () Int)
(declare-fun obligation9UA_8 () Int)
(declare-fun obligation9AT_8 () Int)
(declare-fun obligation9UO_8 () Int)
(declare-fun obligation9ar_8 () Int)
(declare-fun obligation9S_8 () Int)
(declare-fun obligation9T_8 () Int)
(assert (>= obligation9U_8 0))
(assert (>= obligation9UA_8 0))
(assert (>= obligation9AT_8 0))
(assert (>= obligation9UO_8 0))
(assert (or (= obligation9ar_8 33)
))
(assert (= obligation9S_8 11))
(assert (= obligation9T_8 20))
(assert (=> (= (obligation9 8) true) (and
 (set.member (tuple  obligation9U_8 obligation9S_8) (ASSIGN* 8))
 (set.member (tuple  obligation9U_8 obligation9UA_8) (ASSIGN* 8))
 (set.member (tuple obligation9UA_8 obligation9ar_8 obligation9AT_8) (ASSOC 8))
 (set.member (tuple  obligation9UO_8 obligation9T_8) (ASSIGN* 8))
 (set.member (tuple  obligation9UO_8 obligation9AT_8) (ASSIGN* 8))
 (set.member (tuple  obligation9U_8 obligation9U_8) USERS)
 (distinct obligation9S_8 obligation9U_8)
)))


(declare-fun obligation10U_8 () Int)
(declare-fun obligation10UA_8 () Int)
(declare-fun obligation10AT_8 () Int)
(declare-fun obligation10UO_8 () Int)
(declare-fun obligation10ar_8 () Int)
(declare-fun obligation10S_8 () Int)
(declare-fun obligation10T_8 () Int)
(assert (>= obligation10U_8 0))
(assert (>= obligation10UA_8 0))
(assert (>= obligation10AT_8 0))
(assert (>= obligation10UO_8 0))
(assert (or (= obligation10ar_8 34)
))
(assert (= obligation10S_8 13))
(assert (= obligation10T_8 20))
(assert (=> (= (obligation10 8) true) (and
 (set.member (tuple  obligation10U_8 obligation10S_8) (ASSIGN* 8))
 (set.member (tuple  obligation10U_8 obligation10UA_8) (ASSIGN* 8))
 (set.member (tuple obligation10UA_8 obligation10ar_8 obligation10AT_8) (ASSOC 8))
 (set.member (tuple  obligation10UO_8 obligation10T_8) (ASSIGN* 8))
 (set.member (tuple  obligation10UO_8 obligation10AT_8) (ASSIGN* 8))
 (set.member (tuple  obligation10U_8 obligation10U_8) USERS)
 (distinct obligation10S_8 obligation10U_8)
)))




; 5.2 a->Eff

(declare-fun obligation0_GrantAction_9_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation0 8) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation0_GrantAction_9_0
		(=>(not (set.member (tuple 16 32 20) (ASSOC 8))) (= obligation0_GrantAction_9_0 (set.singleton(tuple 16 32 20))))

		(=>(not (not (set.member (tuple 16 32 20) (ASSOC 8)))) (= obligation0_GrantAction_9_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 9) (ASSIGN 8)))
(assert (= (ASSIGN* 9) (ASSIGN* 8)))
(assert (= (ASSOC 9) 
	(set.union (ASSOC 8)  obligation0_GrantAction_9_0)
))



(declare-fun obligation1_GrantAction_9_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation1 8) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation1_GrantAction_9_0
		(=>(not (set.member (tuple 4 26 20) (ASSOC 8))) (= obligation1_GrantAction_9_0 (set.singleton(tuple 4 26 20))))

		(=>(not (not (set.member (tuple 4 26 20) (ASSOC 8)))) (= obligation1_GrantAction_9_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 9) (ASSIGN 8)))
(assert (= (ASSIGN* 9) (ASSIGN* 8)))
(assert (= (ASSOC 9) 
	(set.union (ASSOC 8)  obligation1_GrantAction_9_0)
))



(declare-fun obligation2_GrantAction_9_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation2 8) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation2_GrantAction_9_0
		(=>(not (set.member (tuple 23 27 20) (ASSOC 8))) (= obligation2_GrantAction_9_0 (set.singleton(tuple 23 27 20))))

		(=>(not (not (set.member (tuple 23 27 20) (ASSOC 8)))) (= obligation2_GrantAction_9_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 9) (ASSIGN 8)))
(assert (= (ASSIGN* 9) (ASSIGN* 8)))
(assert (= (ASSOC 9) 
	(set.union (ASSOC 8)  obligation2_GrantAction_9_0)
))



(declare-fun obligation3_GrantAction_9_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation3 8) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation3_GrantAction_9_0
		(=>(not (set.member (tuple 19 28 20) (ASSOC 8))) (= obligation3_GrantAction_9_0 (set.singleton(tuple 19 28 20))))

		(=>(not (not (set.member (tuple 19 28 20) (ASSOC 8)))) (= obligation3_GrantAction_9_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 9) (ASSIGN 8)))
(assert (= (ASSIGN* 9) (ASSIGN* 8)))
(assert (= (ASSOC 9) 
	(set.union (ASSOC 8)  obligation3_GrantAction_9_0)
))



(declare-fun obligation4_GrantAction_9_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation4 8) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation4_GrantAction_9_0
		(=>(not (set.member (tuple 14 35 20) (ASSOC 8))) (= obligation4_GrantAction_9_0 (set.singleton(tuple 14 35 20))))

		(=>(not (not (set.member (tuple 14 35 20) (ASSOC 8)))) (= obligation4_GrantAction_9_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 9) (ASSIGN 8)))
(assert (= (ASSIGN* 9) (ASSIGN* 8)))
(assert (= (ASSOC 9) 
	(set.union (ASSOC 8)  obligation4_GrantAction_9_0)
))



(declare-fun obligation5_GrantAction_9_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation5 8) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation5_GrantAction_9_0
		(=>(not (set.member (tuple 2 30 20) (ASSOC 8))) (= obligation5_GrantAction_9_0 (set.singleton(tuple 2 30 20))))

		(=>(not (not (set.member (tuple 2 30 20) (ASSOC 8)))) (= obligation5_GrantAction_9_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 9) (ASSIGN 8)))
(assert (= (ASSIGN* 9) (ASSIGN* 8)))
(assert (= (ASSOC 9) 
	(set.union (ASSOC 8)  obligation5_GrantAction_9_0)
))



(declare-fun obligation6_GrantAction_9_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation6 8) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation6_GrantAction_9_0
		(=>(not (set.member (tuple 8 31 20) (ASSOC 8))) (= obligation6_GrantAction_9_0 (set.singleton(tuple 8 31 20))))

		(=>(not (not (set.member (tuple 8 31 20) (ASSOC 8)))) (= obligation6_GrantAction_9_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 9) (ASSIGN 8)))
(assert (= (ASSIGN* 9) (ASSIGN* 8)))
(assert (= (ASSOC 9) 
	(set.union (ASSOC 8)  obligation6_GrantAction_9_0)
))



(declare-fun obligation7_GrantAction_9_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation7 8) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation7_GrantAction_9_0
		(=>(not (set.member (tuple 10 32 20) (ASSOC 8))) (= obligation7_GrantAction_9_0 (set.singleton(tuple 10 32 20))))

		(=>(not (not (set.member (tuple 10 32 20) (ASSOC 8)))) (= obligation7_GrantAction_9_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 9) (ASSIGN 8)))
(assert (= (ASSIGN* 9) (ASSIGN* 8)))
(assert (= (ASSOC 9) 
	(set.union (ASSOC 8)  obligation7_GrantAction_9_0)
))



(declare-fun obligation8_GrantAction_9_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation8 8) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation8_GrantAction_9_0
		(=>(not (set.member (tuple 11 33 20) (ASSOC 8))) (= obligation8_GrantAction_9_0 (set.singleton(tuple 11 33 20))))

		(=>(not (not (set.member (tuple 11 33 20) (ASSOC 8)))) (= obligation8_GrantAction_9_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 9) (ASSIGN 8)))
(assert (= (ASSIGN* 9) (ASSIGN* 8)))
(assert (= (ASSOC 9) 
	(set.union (ASSOC 8)  obligation8_GrantAction_9_0)
))



(declare-fun obligation9_GrantAction_9_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation9 8) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation9_GrantAction_9_0
		(=>(not (set.member (tuple 13 34 20) (ASSOC 8))) (= obligation9_GrantAction_9_0 (set.singleton(tuple 13 34 20))))

		(=>(not (not (set.member (tuple 13 34 20) (ASSOC 8)))) (= obligation9_GrantAction_9_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 9) (ASSIGN 8)))
(assert (= (ASSIGN* 9) (ASSIGN* 8)))
(assert (= (ASSOC 9) 
	(set.union (ASSOC 8)  obligation9_GrantAction_9_0)
))



(declare-fun obligation10_GrantAction_9_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation10 8) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation10_GrantAction_9_0
		(=>(not (set.member (tuple 13 35 20) (ASSOC 8))) (= obligation10_GrantAction_9_0 (set.singleton(tuple 13 35 20))))

		(=>(not (not (set.member (tuple 13 35 20) (ASSOC 8)))) (= obligation10_GrantAction_9_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 9) (ASSIGN 8)))
(assert (= (ASSIGN* 9) (ASSIGN* 8)))
(assert (= (ASSOC 9) 
	(set.union (ASSOC 8)  obligation10_GrantAction_9_0)
))



; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 9) (ASSIGN* 8))
(or 
(= (obligation7 8) true)(= (obligation6 8) true)(= (obligation9 8) true)(= (obligation8 8) true)(= (obligation3 8) true)(= (obligation2 8) true)(= (obligation5 8) true)(= (obligation4 8) true)(= (obligation1 8) true)(= (obligation10 8) true)(= (obligation0 8) true))))
(assert (=> (distinct (ASSIGN 9) (ASSIGN 8))
(or (= (obligation7 8) true)(= (obligation6 8) true)(= (obligation9 8) true)(= (obligation8 8) true)(= (obligation3 8) true)(= (obligation2 8) true)(= (obligation5 8) true)(= (obligation4 8) true)(= (obligation1 8) true)(= (obligation10 8) true)(= (obligation0 8) true))))
(assert (=> (distinct (ASSOC 9) (ASSOC 8))
(or 
(= (obligation7 8) true)(= (obligation6 8) true)(= (obligation9 8) true)(= (obligation8 8) true)(= (obligation3 8) true)(= (obligation2 8) true)(= (obligation5 8) true)(= (obligation4 8) true)(= (obligation1 8) true)(= (obligation10 8) true)(= (obligation0 8) true))))


; 5.4 Exactly one naive
; AT LEAST ONE
(assert (or(= (obligation7 8) true)(= (obligation6 8) true)(= (obligation9 8) true)(= (obligation8 8) true)(= (obligation3 8) true)(= (obligation2 8) true)(= (obligation5 8) true)(= (obligation4 8) true)(= (obligation1 8) true)(= (obligation10 8) true)(= (obligation0 8) true)))


;--------------------------------------------------------------------------------------------------------------------
;STEP10

; 5.1 a->PRE
(declare-fun obligation0U_9 () Int)
(declare-fun obligation0UA_9 () Int)
(declare-fun obligation0AT_9 () Int)
(declare-fun obligation0UO_9 () Int)
(declare-fun obligation0ar_9 () Int)
(declare-fun obligation0S_9 () Int)
(declare-fun obligation0T_9 () Int)
(assert (>= obligation0U_9 0))
(assert (>= obligation0UA_9 0))
(assert (>= obligation0AT_9 0))
(assert (>= obligation0UO_9 0))
(assert (or (= obligation0ar_9 24)
))
(assert (= obligation0S_9 18))
(assert (= obligation0T_9 20))
(assert (=> (= (obligation0 9) true) (and
 (set.member (tuple  obligation0U_9 obligation0S_9) (ASSIGN* 9))
 (set.member (tuple  obligation0U_9 obligation0UA_9) (ASSIGN* 9))
 (set.member (tuple obligation0UA_9 obligation0ar_9 obligation0AT_9) (ASSOC 9))
 (set.member (tuple  obligation0UO_9 obligation0T_9) (ASSIGN* 9))
 (set.member (tuple  obligation0UO_9 obligation0AT_9) (ASSIGN* 9))
 (set.member (tuple  obligation0U_9 obligation0U_9) USERS)
 (distinct obligation0S_9 obligation0U_9)
)))


(declare-fun obligation1U_9 () Int)
(declare-fun obligation1UA_9 () Int)
(declare-fun obligation1AT_9 () Int)
(declare-fun obligation1UO_9 () Int)
(declare-fun obligation1ar_9 () Int)
(declare-fun obligation1S_9 () Int)
(declare-fun obligation1T_9 () Int)
(assert (>= obligation1U_9 0))
(assert (>= obligation1UA_9 0))
(assert (>= obligation1AT_9 0))
(assert (>= obligation1UO_9 0))
(assert (or (= obligation1ar_9 32)
))
(assert (= obligation1S_9 16))
(assert (= obligation1T_9 20))
(assert (=> (= (obligation1 9) true) (and
 (set.member (tuple  obligation1U_9 obligation1S_9) (ASSIGN* 9))
 (set.member (tuple  obligation1U_9 obligation1UA_9) (ASSIGN* 9))
 (set.member (tuple obligation1UA_9 obligation1ar_9 obligation1AT_9) (ASSOC 9))
 (set.member (tuple  obligation1UO_9 obligation1T_9) (ASSIGN* 9))
 (set.member (tuple  obligation1UO_9 obligation1AT_9) (ASSIGN* 9))
 (set.member (tuple  obligation1U_9 obligation1U_9) USERS)
 (distinct obligation1S_9 obligation1U_9)
)))


(declare-fun obligation2U_9 () Int)
(declare-fun obligation2UA_9 () Int)
(declare-fun obligation2AT_9 () Int)
(declare-fun obligation2UO_9 () Int)
(declare-fun obligation2ar_9 () Int)
(declare-fun obligation2S_9 () Int)
(declare-fun obligation2T_9 () Int)
(assert (>= obligation2U_9 0))
(assert (>= obligation2UA_9 0))
(assert (>= obligation2AT_9 0))
(assert (>= obligation2UO_9 0))
(assert (or (= obligation2ar_9 26)
))
(assert (= obligation2S_9 4))
(assert (= obligation2T_9 20))
(assert (=> (= (obligation2 9) true) (and
 (set.member (tuple  obligation2U_9 obligation2S_9) (ASSIGN* 9))
 (set.member (tuple  obligation2U_9 obligation2UA_9) (ASSIGN* 9))
 (set.member (tuple obligation2UA_9 obligation2ar_9 obligation2AT_9) (ASSOC 9))
 (set.member (tuple  obligation2UO_9 obligation2T_9) (ASSIGN* 9))
 (set.member (tuple  obligation2UO_9 obligation2AT_9) (ASSIGN* 9))
 (set.member (tuple  obligation2U_9 obligation2U_9) USERS)
 (distinct obligation2S_9 obligation2U_9)
)))


(declare-fun obligation3U_9 () Int)
(declare-fun obligation3UA_9 () Int)
(declare-fun obligation3AT_9 () Int)
(declare-fun obligation3UO_9 () Int)
(declare-fun obligation3ar_9 () Int)
(declare-fun obligation3S_9 () Int)
(declare-fun obligation3T_9 () Int)
(assert (>= obligation3U_9 0))
(assert (>= obligation3UA_9 0))
(assert (>= obligation3AT_9 0))
(assert (>= obligation3UO_9 0))
(assert (or (= obligation3ar_9 27)
))
(assert (= obligation3S_9 23))
(assert (= obligation3T_9 20))
(assert (=> (= (obligation3 9) true) (and
 (set.member (tuple  obligation3U_9 obligation3S_9) (ASSIGN* 9))
 (set.member (tuple  obligation3U_9 obligation3UA_9) (ASSIGN* 9))
 (set.member (tuple obligation3UA_9 obligation3ar_9 obligation3AT_9) (ASSOC 9))
 (set.member (tuple  obligation3UO_9 obligation3T_9) (ASSIGN* 9))
 (set.member (tuple  obligation3UO_9 obligation3AT_9) (ASSIGN* 9))
 (set.member (tuple  obligation3U_9 obligation3U_9) USERS)
 (distinct obligation3S_9 obligation3U_9)
)))


(declare-fun obligation4U_9 () Int)
(declare-fun obligation4UA_9 () Int)
(declare-fun obligation4AT_9 () Int)
(declare-fun obligation4UO_9 () Int)
(declare-fun obligation4ar_9 () Int)
(declare-fun obligation4S_9 () Int)
(declare-fun obligation4T_9 () Int)
(assert (>= obligation4U_9 0))
(assert (>= obligation4UA_9 0))
(assert (>= obligation4AT_9 0))
(assert (>= obligation4UO_9 0))
(assert (or (= obligation4ar_9 28)
))
(assert (= obligation4S_9 19))
(assert (= obligation4T_9 20))
(assert (=> (= (obligation4 9) true) (and
 (set.member (tuple  obligation4U_9 obligation4S_9) (ASSIGN* 9))
 (set.member (tuple  obligation4U_9 obligation4UA_9) (ASSIGN* 9))
 (set.member (tuple obligation4UA_9 obligation4ar_9 obligation4AT_9) (ASSOC 9))
 (set.member (tuple  obligation4UO_9 obligation4T_9) (ASSIGN* 9))
 (set.member (tuple  obligation4UO_9 obligation4AT_9) (ASSIGN* 9))
 (set.member (tuple  obligation4U_9 obligation4U_9) USERS)
 (distinct obligation4S_9 obligation4U_9)
)))


(declare-fun obligation5U_9 () Int)
(declare-fun obligation5UA_9 () Int)
(declare-fun obligation5AT_9 () Int)
(declare-fun obligation5UO_9 () Int)
(declare-fun obligation5ar_9 () Int)
(declare-fun obligation5S_9 () Int)
(declare-fun obligation5T_9 () Int)
(assert (>= obligation5U_9 0))
(assert (>= obligation5UA_9 0))
(assert (>= obligation5AT_9 0))
(assert (>= obligation5UO_9 0))
(assert (or (= obligation5ar_9 35)
))
(assert (= obligation5S_9 14))
(assert (= obligation5T_9 20))
(assert (=> (= (obligation5 9) true) (and
 (set.member (tuple  obligation5U_9 obligation5S_9) (ASSIGN* 9))
 (set.member (tuple  obligation5U_9 obligation5UA_9) (ASSIGN* 9))
 (set.member (tuple obligation5UA_9 obligation5ar_9 obligation5AT_9) (ASSOC 9))
 (set.member (tuple  obligation5UO_9 obligation5T_9) (ASSIGN* 9))
 (set.member (tuple  obligation5UO_9 obligation5AT_9) (ASSIGN* 9))
 (set.member (tuple  obligation5U_9 obligation5U_9) USERS)
 (distinct obligation5S_9 obligation5U_9)
)))


(declare-fun obligation6U_9 () Int)
(declare-fun obligation6UA_9 () Int)
(declare-fun obligation6AT_9 () Int)
(declare-fun obligation6UO_9 () Int)
(declare-fun obligation6ar_9 () Int)
(declare-fun obligation6S_9 () Int)
(declare-fun obligation6T_9 () Int)
(assert (>= obligation6U_9 0))
(assert (>= obligation6UA_9 0))
(assert (>= obligation6AT_9 0))
(assert (>= obligation6UO_9 0))
(assert (or (= obligation6ar_9 30)
))
(assert (= obligation6S_9 2))
(assert (= obligation6T_9 20))
(assert (=> (= (obligation6 9) true) (and
 (set.member (tuple  obligation6U_9 obligation6S_9) (ASSIGN* 9))
 (set.member (tuple  obligation6U_9 obligation6UA_9) (ASSIGN* 9))
 (set.member (tuple obligation6UA_9 obligation6ar_9 obligation6AT_9) (ASSOC 9))
 (set.member (tuple  obligation6UO_9 obligation6T_9) (ASSIGN* 9))
 (set.member (tuple  obligation6UO_9 obligation6AT_9) (ASSIGN* 9))
 (set.member (tuple  obligation6U_9 obligation6U_9) USERS)
 (distinct obligation6S_9 obligation6U_9)
)))


(declare-fun obligation7U_9 () Int)
(declare-fun obligation7UA_9 () Int)
(declare-fun obligation7AT_9 () Int)
(declare-fun obligation7UO_9 () Int)
(declare-fun obligation7ar_9 () Int)
(declare-fun obligation7S_9 () Int)
(declare-fun obligation7T_9 () Int)
(assert (>= obligation7U_9 0))
(assert (>= obligation7UA_9 0))
(assert (>= obligation7AT_9 0))
(assert (>= obligation7UO_9 0))
(assert (or (= obligation7ar_9 31)
))
(assert (= obligation7S_9 8))
(assert (= obligation7T_9 20))
(assert (=> (= (obligation7 9) true) (and
 (set.member (tuple  obligation7U_9 obligation7S_9) (ASSIGN* 9))
 (set.member (tuple  obligation7U_9 obligation7UA_9) (ASSIGN* 9))
 (set.member (tuple obligation7UA_9 obligation7ar_9 obligation7AT_9) (ASSOC 9))
 (set.member (tuple  obligation7UO_9 obligation7T_9) (ASSIGN* 9))
 (set.member (tuple  obligation7UO_9 obligation7AT_9) (ASSIGN* 9))
 (set.member (tuple  obligation7U_9 obligation7U_9) USERS)
 (distinct obligation7S_9 obligation7U_9)
)))


(declare-fun obligation8U_9 () Int)
(declare-fun obligation8UA_9 () Int)
(declare-fun obligation8AT_9 () Int)
(declare-fun obligation8UO_9 () Int)
(declare-fun obligation8ar_9 () Int)
(declare-fun obligation8S_9 () Int)
(declare-fun obligation8T_9 () Int)
(assert (>= obligation8U_9 0))
(assert (>= obligation8UA_9 0))
(assert (>= obligation8AT_9 0))
(assert (>= obligation8UO_9 0))
(assert (or (= obligation8ar_9 32)
))
(assert (= obligation8S_9 10))
(assert (= obligation8T_9 20))
(assert (=> (= (obligation8 9) true) (and
 (set.member (tuple  obligation8U_9 obligation8S_9) (ASSIGN* 9))
 (set.member (tuple  obligation8U_9 obligation8UA_9) (ASSIGN* 9))
 (set.member (tuple obligation8UA_9 obligation8ar_9 obligation8AT_9) (ASSOC 9))
 (set.member (tuple  obligation8UO_9 obligation8T_9) (ASSIGN* 9))
 (set.member (tuple  obligation8UO_9 obligation8AT_9) (ASSIGN* 9))
 (set.member (tuple  obligation8U_9 obligation8U_9) USERS)
 (distinct obligation8S_9 obligation8U_9)
)))


(declare-fun obligation9U_9 () Int)
(declare-fun obligation9UA_9 () Int)
(declare-fun obligation9AT_9 () Int)
(declare-fun obligation9UO_9 () Int)
(declare-fun obligation9ar_9 () Int)
(declare-fun obligation9S_9 () Int)
(declare-fun obligation9T_9 () Int)
(assert (>= obligation9U_9 0))
(assert (>= obligation9UA_9 0))
(assert (>= obligation9AT_9 0))
(assert (>= obligation9UO_9 0))
(assert (or (= obligation9ar_9 33)
))
(assert (= obligation9S_9 11))
(assert (= obligation9T_9 20))
(assert (=> (= (obligation9 9) true) (and
 (set.member (tuple  obligation9U_9 obligation9S_9) (ASSIGN* 9))
 (set.member (tuple  obligation9U_9 obligation9UA_9) (ASSIGN* 9))
 (set.member (tuple obligation9UA_9 obligation9ar_9 obligation9AT_9) (ASSOC 9))
 (set.member (tuple  obligation9UO_9 obligation9T_9) (ASSIGN* 9))
 (set.member (tuple  obligation9UO_9 obligation9AT_9) (ASSIGN* 9))
 (set.member (tuple  obligation9U_9 obligation9U_9) USERS)
 (distinct obligation9S_9 obligation9U_9)
)))


(declare-fun obligation10U_9 () Int)
(declare-fun obligation10UA_9 () Int)
(declare-fun obligation10AT_9 () Int)
(declare-fun obligation10UO_9 () Int)
(declare-fun obligation10ar_9 () Int)
(declare-fun obligation10S_9 () Int)
(declare-fun obligation10T_9 () Int)
(assert (>= obligation10U_9 0))
(assert (>= obligation10UA_9 0))
(assert (>= obligation10AT_9 0))
(assert (>= obligation10UO_9 0))
(assert (or (= obligation10ar_9 34)
))
(assert (= obligation10S_9 13))
(assert (= obligation10T_9 20))
(assert (=> (= (obligation10 9) true) (and
 (set.member (tuple  obligation10U_9 obligation10S_9) (ASSIGN* 9))
 (set.member (tuple  obligation10U_9 obligation10UA_9) (ASSIGN* 9))
 (set.member (tuple obligation10UA_9 obligation10ar_9 obligation10AT_9) (ASSOC 9))
 (set.member (tuple  obligation10UO_9 obligation10T_9) (ASSIGN* 9))
 (set.member (tuple  obligation10UO_9 obligation10AT_9) (ASSIGN* 9))
 (set.member (tuple  obligation10U_9 obligation10U_9) USERS)
 (distinct obligation10S_9 obligation10U_9)
)))




; 5.2 a->Eff

(declare-fun obligation0_GrantAction_10_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation0 9) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation0_GrantAction_10_0
		(=>(not (set.member (tuple 16 32 20) (ASSOC 9))) (= obligation0_GrantAction_10_0 (set.singleton(tuple 16 32 20))))

		(=>(not (not (set.member (tuple 16 32 20) (ASSOC 9)))) (= obligation0_GrantAction_10_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 10) (ASSIGN 9)))
(assert (= (ASSIGN* 10) (ASSIGN* 9)))
(assert (= (ASSOC 10) 
	(set.union (ASSOC 9)  obligation0_GrantAction_10_0)
))



(declare-fun obligation1_GrantAction_10_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation1 9) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation1_GrantAction_10_0
		(=>(not (set.member (tuple 4 26 20) (ASSOC 9))) (= obligation1_GrantAction_10_0 (set.singleton(tuple 4 26 20))))

		(=>(not (not (set.member (tuple 4 26 20) (ASSOC 9)))) (= obligation1_GrantAction_10_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 10) (ASSIGN 9)))
(assert (= (ASSIGN* 10) (ASSIGN* 9)))
(assert (= (ASSOC 10) 
	(set.union (ASSOC 9)  obligation1_GrantAction_10_0)
))



(declare-fun obligation2_GrantAction_10_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation2 9) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation2_GrantAction_10_0
		(=>(not (set.member (tuple 23 27 20) (ASSOC 9))) (= obligation2_GrantAction_10_0 (set.singleton(tuple 23 27 20))))

		(=>(not (not (set.member (tuple 23 27 20) (ASSOC 9)))) (= obligation2_GrantAction_10_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 10) (ASSIGN 9)))
(assert (= (ASSIGN* 10) (ASSIGN* 9)))
(assert (= (ASSOC 10) 
	(set.union (ASSOC 9)  obligation2_GrantAction_10_0)
))



(declare-fun obligation3_GrantAction_10_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation3 9) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation3_GrantAction_10_0
		(=>(not (set.member (tuple 19 28 20) (ASSOC 9))) (= obligation3_GrantAction_10_0 (set.singleton(tuple 19 28 20))))

		(=>(not (not (set.member (tuple 19 28 20) (ASSOC 9)))) (= obligation3_GrantAction_10_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 10) (ASSIGN 9)))
(assert (= (ASSIGN* 10) (ASSIGN* 9)))
(assert (= (ASSOC 10) 
	(set.union (ASSOC 9)  obligation3_GrantAction_10_0)
))



(declare-fun obligation4_GrantAction_10_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation4 9) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation4_GrantAction_10_0
		(=>(not (set.member (tuple 14 35 20) (ASSOC 9))) (= obligation4_GrantAction_10_0 (set.singleton(tuple 14 35 20))))

		(=>(not (not (set.member (tuple 14 35 20) (ASSOC 9)))) (= obligation4_GrantAction_10_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 10) (ASSIGN 9)))
(assert (= (ASSIGN* 10) (ASSIGN* 9)))
(assert (= (ASSOC 10) 
	(set.union (ASSOC 9)  obligation4_GrantAction_10_0)
))



(declare-fun obligation5_GrantAction_10_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation5 9) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation5_GrantAction_10_0
		(=>(not (set.member (tuple 2 30 20) (ASSOC 9))) (= obligation5_GrantAction_10_0 (set.singleton(tuple 2 30 20))))

		(=>(not (not (set.member (tuple 2 30 20) (ASSOC 9)))) (= obligation5_GrantAction_10_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 10) (ASSIGN 9)))
(assert (= (ASSIGN* 10) (ASSIGN* 9)))
(assert (= (ASSOC 10) 
	(set.union (ASSOC 9)  obligation5_GrantAction_10_0)
))



(declare-fun obligation6_GrantAction_10_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation6 9) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation6_GrantAction_10_0
		(=>(not (set.member (tuple 8 31 20) (ASSOC 9))) (= obligation6_GrantAction_10_0 (set.singleton(tuple 8 31 20))))

		(=>(not (not (set.member (tuple 8 31 20) (ASSOC 9)))) (= obligation6_GrantAction_10_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 10) (ASSIGN 9)))
(assert (= (ASSIGN* 10) (ASSIGN* 9)))
(assert (= (ASSOC 10) 
	(set.union (ASSOC 9)  obligation6_GrantAction_10_0)
))



(declare-fun obligation7_GrantAction_10_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation7 9) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation7_GrantAction_10_0
		(=>(not (set.member (tuple 10 32 20) (ASSOC 9))) (= obligation7_GrantAction_10_0 (set.singleton(tuple 10 32 20))))

		(=>(not (not (set.member (tuple 10 32 20) (ASSOC 9)))) (= obligation7_GrantAction_10_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 10) (ASSIGN 9)))
(assert (= (ASSIGN* 10) (ASSIGN* 9)))
(assert (= (ASSOC 10) 
	(set.union (ASSOC 9)  obligation7_GrantAction_10_0)
))



(declare-fun obligation8_GrantAction_10_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation8 9) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation8_GrantAction_10_0
		(=>(not (set.member (tuple 11 33 20) (ASSOC 9))) (= obligation8_GrantAction_10_0 (set.singleton(tuple 11 33 20))))

		(=>(not (not (set.member (tuple 11 33 20) (ASSOC 9)))) (= obligation8_GrantAction_10_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 10) (ASSIGN 9)))
(assert (= (ASSIGN* 10) (ASSIGN* 9)))
(assert (= (ASSOC 10) 
	(set.union (ASSOC 9)  obligation8_GrantAction_10_0)
))



(declare-fun obligation9_GrantAction_10_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation9 9) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation9_GrantAction_10_0
		(=>(not (set.member (tuple 13 34 20) (ASSOC 9))) (= obligation9_GrantAction_10_0 (set.singleton(tuple 13 34 20))))

		(=>(not (not (set.member (tuple 13 34 20) (ASSOC 9)))) (= obligation9_GrantAction_10_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 10) (ASSIGN 9)))
(assert (= (ASSIGN* 10) (ASSIGN* 9)))
(assert (= (ASSOC 10) 
	(set.union (ASSOC 9)  obligation9_GrantAction_10_0)
))



(declare-fun obligation10_GrantAction_10_0 () (Set (Tuple Int Int Int)))

(assert (=> (= ( obligation10 9) true)
(and

	;INDEPENDENT ACTIONS
	(and

		;ACTION: obligation10_GrantAction_10_0
		(=>(not (set.member (tuple 13 35 20) (ASSOC 9))) (= obligation10_GrantAction_10_0 (set.singleton(tuple 13 35 20))))

		(=>(not (not (set.member (tuple 13 35 20) (ASSOC 9)))) (= obligation10_GrantAction_10_0 (as set.empty (Set (Tuple Int Int Int)))))

	)
)
)
)

;RELATION TRANSITION ENCODING
(assert (= (ASSIGN 10) (ASSIGN 9)))
(assert (= (ASSIGN* 10) (ASSIGN* 9)))
(assert (= (ASSOC 10) 
	(set.union (ASSOC 9)  obligation10_GrantAction_10_0)
))



; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 10) (ASSIGN* 9))
(or 
(= (obligation7 9) true)(= (obligation6 9) true)(= (obligation9 9) true)(= (obligation8 9) true)(= (obligation3 9) true)(= (obligation2 9) true)(= (obligation5 9) true)(= (obligation4 9) true)(= (obligation1 9) true)(= (obligation10 9) true)(= (obligation0 9) true))))
(assert (=> (distinct (ASSIGN 10) (ASSIGN 9))
(or (= (obligation7 9) true)(= (obligation6 9) true)(= (obligation9 9) true)(= (obligation8 9) true)(= (obligation3 9) true)(= (obligation2 9) true)(= (obligation5 9) true)(= (obligation4 9) true)(= (obligation1 9) true)(= (obligation10 9) true)(= (obligation0 9) true))))
(assert (=> (distinct (ASSOC 10) (ASSOC 9))
(or 
(= (obligation7 9) true)(= (obligation6 9) true)(= (obligation9 9) true)(= (obligation8 9) true)(= (obligation3 9) true)(= (obligation2 9) true)(= (obligation5 9) true)(= (obligation4 9) true)(= (obligation1 9) true)(= (obligation10 9) true)(= (obligation0 9) true))))


; 5.4 Exactly one naive
; AT LEAST ONE
(assert (or(= (obligation7 9) true)(= (obligation6 9) true)(= (obligation9 9) true)(= (obligation8 9) true)(= (obligation3 9) true)(= (obligation2 9) true)(= (obligation5 9) true)(= (obligation4 9) true)(= (obligation1 9) true)(= (obligation10 9) true)(= (obligation0 9) true)))

;PRE PROPERTY

;POST PROPERTY
(declare-fun queryVARu2 () Int)
(declare-fun queryVARar2 () Int)
(declare-fun queryVARat2 () Int)
(assert 
(and (= (obligation9 9) true)
 (= obligation9U_9 queryVARu2 ) (= obligation9ar_9 queryVARar2 ) (= obligation9T_9 queryVARat2 )))
(check-sat)

