(set-logic ALL)
(set-option :produce-models true)
(declare-fun USERS () (Set (Tuple Int Int)))
(assert (= USERS (insert (mkTuple 5 5) 
(mkTuple 13 13) 
(mkTuple 17 17) 
(mkTuple 8 8) 
(mkTuple 3 3) 
(mkTuple 11 11) 
(singleton (mkTuple 1 1)))))
(declare-fun ASSIGN* (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN* 0) (insert (mkTuple 13 16) 
(mkTuple 18 16) 
(mkTuple 13 4) 
(mkTuple 2 16) 
(mkTuple 15 15) 
(mkTuple 2 2) 
(mkTuple 6 16) 
(mkTuple 3 3) 
(mkTuple 17 2) 
(mkTuple 18 18) 
(mkTuple 1 1) 
(mkTuple 11 11) 
(mkTuple 14 14) 
(mkTuple 14 16) 
(mkTuple 1 16) 
(mkTuple 5 12) 
(mkTuple 17 17) 
(mkTuple 8 9) 
(mkTuple 10 16) 
(mkTuple 10 10) 
(mkTuple 5 16) 
(mkTuple 9 16) 
(mkTuple 4 16) 
(mkTuple 13 13) 
(mkTuple 15 16) 
(mkTuple 16 16) 
(mkTuple 11 16) 
(mkTuple 11 14) 
(mkTuple 8 16) 
(mkTuple 12 12) 
(mkTuple 5 5) 
(mkTuple 4 4) 
(mkTuple 3 16) 
(mkTuple 7 7) 
(mkTuple 1 7) 
(mkTuple 3 10) 
(mkTuple 12 16) 
(mkTuple 17 16) 
(mkTuple 6 6) 
(mkTuple 8 8) 
(mkTuple 9 9) 
(singleton (mkTuple 7 16)))))
(declare-fun ASSIGN (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN 0) (insert (mkTuple 18 16) 
(mkTuple 13 4) 
(mkTuple 2 16) 
(mkTuple 15 15) 
(mkTuple 2 2) 
(mkTuple 6 16) 
(mkTuple 3 3) 
(mkTuple 17 2) 
(mkTuple 18 18) 
(mkTuple 11 11) 
(mkTuple 1 1) 
(mkTuple 14 14) 
(mkTuple 14 16) 
(mkTuple 5 12) 
(mkTuple 17 17) 
(mkTuple 8 9) 
(mkTuple 10 16) 
(mkTuple 10 10) 
(mkTuple 9 16) 
(mkTuple 4 16) 
(mkTuple 13 13) 
(mkTuple 15 16) 
(mkTuple 11 14) 
(mkTuple 5 5) 
(mkTuple 12 12) 
(mkTuple 4 4) 
(mkTuple 7 7) 
(mkTuple 12 16) 
(mkTuple 1 7) 
(mkTuple 3 10) 
(mkTuple 6 6) 
(mkTuple 8 8) 
(mkTuple 9 9) 
(singleton (mkTuple 7 16)))))
(declare-fun ASSOC (Int) (Set (Tuple Int Int Int)))

(assert (= (ASSOC 0) (insert(mkTuple 4 20 15) 
(singleton (mkTuple 14 27 15)))))

(declare-fun NODES () (Set (Tuple Int Int)))
(assert (= NODES (insert (mkTuple 1 1) 
(mkTuple 2 2) 
(mkTuple 3 3) 
(mkTuple 4 4) 
(mkTuple 5 5) 
(mkTuple 6 6) 
(mkTuple 7 7) 
(mkTuple 8 8) 
(mkTuple 9 9) 
(mkTuple 10 10) 
(mkTuple 11 11) 
(mkTuple 12 12) 
(mkTuple 13 13) 
(mkTuple 14 14) 
(mkTuple 15 15) 
(mkTuple 16 16) 
(mkTuple 17 17) 
(singleton (mkTuple 18 18))))) 


(declare-fun obligation7 (Int) Bool)
(declare-fun obligation6 (Int) Bool)
(declare-fun obligation3 (Int) Bool)
(declare-fun obligation2 (Int) Bool)
(declare-fun obligation5 (Int) Bool)
(declare-fun obligation4 (Int) Bool)
(declare-fun obligation1 (Int) Bool)
;--------------------------------------------------------------------------------------------------------------------
;STEP1

; 5.1 a->PRE
(declare-fun obligation1U_0 () Int)
(declare-fun obligation1UA_0 () Int)
(declare-fun obligation1AT_0 () Int)
(declare-fun obligation1UO_0 () Int)
(declare-fun obligation1ar_0 () Int)
(declare-fun obligation1S_0 () Int)
(declare-fun obligation1T_0 () Int)
(assert (>= obligation1U_0 0))
(assert (>= obligation1UA_0 0))
(assert (>= obligation1AT_0 0))
(assert (>= obligation1UO_0 0))
(assert (or (= obligation1ar_0 27)
))
(assert (= obligation1S_0 14))
(assert (= obligation1T_0 15))
(assert (=> (= (obligation1 0) true) (and
 (member (mkTuple  obligation1U_0 obligation1S_0) (ASSIGN* 0))
 (member (mkTuple  obligation1U_0 obligation1UA_0) (ASSIGN* 0))
(member (mkTuple obligation1UA_0 obligation1ar_0 obligation1AT_0) (ASSOC 0))
 (member (mkTuple  obligation1UO_0 obligation1T_0) (ASSIGN* 0))
 (member (mkTuple  obligation1UO_0 obligation1AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation1U_0 obligation1U_0) USERS)
)))


(declare-fun obligation2U_0 () Int)
(declare-fun obligation2UA_0 () Int)
(declare-fun obligation2AT_0 () Int)
(declare-fun obligation2UO_0 () Int)
(declare-fun obligation2ar_0 () Int)
(declare-fun obligation2S_0 () Int)
(declare-fun obligation2T_0 () Int)
(assert (>= obligation2U_0 0))
(assert (>= obligation2UA_0 0))
(assert (>= obligation2AT_0 0))
(assert (>= obligation2UO_0 0))
(assert (or (= obligation2ar_0 30)
))
(assert (= obligation2S_0 2))
(assert (= obligation2T_0 15))
(assert (=> (= (obligation2 0) true) (and
 (member (mkTuple  obligation2U_0 obligation2S_0) (ASSIGN* 0))
 (member (mkTuple  obligation2U_0 obligation2UA_0) (ASSIGN* 0))
(member (mkTuple obligation2UA_0 obligation2ar_0 obligation2AT_0) (ASSOC 0))
 (member (mkTuple  obligation2UO_0 obligation2T_0) (ASSIGN* 0))
 (member (mkTuple  obligation2UO_0 obligation2AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation2U_0 obligation2U_0) USERS)
)))


(declare-fun obligation3U_0 () Int)
(declare-fun obligation3UA_0 () Int)
(declare-fun obligation3AT_0 () Int)
(declare-fun obligation3UO_0 () Int)
(declare-fun obligation3ar_0 () Int)
(declare-fun obligation3S_0 () Int)
(declare-fun obligation3T_0 () Int)
(assert (>= obligation3U_0 0))
(assert (>= obligation3UA_0 0))
(assert (>= obligation3AT_0 0))
(assert (>= obligation3UO_0 0))
(assert (or (= obligation3ar_0 30)
))
(assert (= obligation3S_0 7))
(assert (= obligation3T_0 15))
(assert (=> (= (obligation3 0) true) (and
 (member (mkTuple  obligation3U_0 obligation3S_0) (ASSIGN* 0))
 (member (mkTuple  obligation3U_0 obligation3UA_0) (ASSIGN* 0))
(member (mkTuple obligation3UA_0 obligation3ar_0 obligation3AT_0) (ASSOC 0))
 (member (mkTuple  obligation3UO_0 obligation3T_0) (ASSIGN* 0))
 (member (mkTuple  obligation3UO_0 obligation3AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation3U_0 obligation3U_0) USERS)
)))


(declare-fun obligation4U_0 () Int)
(declare-fun obligation4UA_0 () Int)
(declare-fun obligation4AT_0 () Int)
(declare-fun obligation4UO_0 () Int)
(declare-fun obligation4ar_0 () Int)
(declare-fun obligation4S_0 () Int)
(declare-fun obligation4T_0 () Int)
(assert (>= obligation4U_0 0))
(assert (>= obligation4UA_0 0))
(assert (>= obligation4AT_0 0))
(assert (>= obligation4UO_0 0))
(assert (or (= obligation4ar_0 30)
))
(assert (= obligation4S_0 9))
(assert (= obligation4T_0 15))
(assert (=> (= (obligation4 0) true) (and
 (member (mkTuple  obligation4U_0 obligation4S_0) (ASSIGN* 0))
 (member (mkTuple  obligation4U_0 obligation4UA_0) (ASSIGN* 0))
(member (mkTuple obligation4UA_0 obligation4ar_0 obligation4AT_0) (ASSOC 0))
 (member (mkTuple  obligation4UO_0 obligation4T_0) (ASSIGN* 0))
 (member (mkTuple  obligation4UO_0 obligation4AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation4U_0 obligation4U_0) USERS)
)))


(declare-fun obligation5U_0 () Int)
(declare-fun obligation5UA_0 () Int)
(declare-fun obligation5AT_0 () Int)
(declare-fun obligation5UO_0 () Int)
(declare-fun obligation5ar_0 () Int)
(declare-fun obligation5S_0 () Int)
(declare-fun obligation5T_0 () Int)
(assert (>= obligation5U_0 0))
(assert (>= obligation5UA_0 0))
(assert (>= obligation5AT_0 0))
(assert (>= obligation5UO_0 0))
(assert (or (= obligation5ar_0 27)
))
(assert (= obligation5S_0 10))
(assert (= obligation5T_0 15))
(assert (=> (= (obligation5 0) true) (and
 (member (mkTuple  obligation5U_0 obligation5S_0) (ASSIGN* 0))
 (member (mkTuple  obligation5U_0 obligation5UA_0) (ASSIGN* 0))
(member (mkTuple obligation5UA_0 obligation5ar_0 obligation5AT_0) (ASSOC 0))
 (member (mkTuple  obligation5UO_0 obligation5T_0) (ASSIGN* 0))
 (member (mkTuple  obligation5UO_0 obligation5AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation5U_0 obligation5U_0) USERS)
)))


(declare-fun obligation6U_0 () Int)
(declare-fun obligation6UA_0 () Int)
(declare-fun obligation6AT_0 () Int)
(declare-fun obligation6UO_0 () Int)
(declare-fun obligation6ar_0 () Int)
(declare-fun obligation6S_0 () Int)
(declare-fun obligation6T_0 () Int)
(assert (>= obligation6U_0 0))
(assert (>= obligation6UA_0 0))
(assert (>= obligation6AT_0 0))
(assert (>= obligation6UO_0 0))
(assert (or (= obligation6ar_0 28)
))
(assert (= obligation6S_0 12))
(assert (= obligation6T_0 15))
(assert (=> (= (obligation6 0) true) (and
 (member (mkTuple  obligation6U_0 obligation6S_0) (ASSIGN* 0))
 (member (mkTuple  obligation6U_0 obligation6UA_0) (ASSIGN* 0))
(member (mkTuple obligation6UA_0 obligation6ar_0 obligation6AT_0) (ASSOC 0))
 (member (mkTuple  obligation6UO_0 obligation6T_0) (ASSIGN* 0))
 (member (mkTuple  obligation6UO_0 obligation6AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation6U_0 obligation6U_0) USERS)
)))


(declare-fun obligation7U_0 () Int)
(declare-fun obligation7UA_0 () Int)
(declare-fun obligation7AT_0 () Int)
(declare-fun obligation7UO_0 () Int)
(declare-fun obligation7ar_0 () Int)
(declare-fun obligation7S_0 () Int)
(declare-fun obligation7T_0 () Int)
(assert (>= obligation7U_0 0))
(assert (>= obligation7UA_0 0))
(assert (>= obligation7AT_0 0))
(assert (>= obligation7UO_0 0))
(assert (or (= obligation7ar_0 30)
))
(assert (= obligation7S_0 17))
(assert (= obligation7T_0 15))
(assert (=> (= (obligation7 0) true) (and
 (member (mkTuple  obligation7U_0 obligation7S_0) (ASSIGN* 0))
 (member (mkTuple  obligation7U_0 obligation7UA_0) (ASSIGN* 0))
(member (mkTuple obligation7UA_0 obligation7ar_0 obligation7AT_0) (ASSOC 0))
 (member (mkTuple  obligation7UO_0 obligation7T_0) (ASSIGN* 0))
 (member (mkTuple  obligation7UO_0 obligation7AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation7U_0 obligation7U_0) USERS)
)))




; 5.2 a->Eff


(assert (=> (=(obligation1 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation1 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(assert (=> (= (obligation1 0) true)(= (ASSOC 1) (setminus(setminus(union(union(ASSOC 0)(singleton(mkTuple 2 30 15)))(singleton(mkTuple 2 26 15)))(singleton(mkTuple 14 30 15)))(singleton(mkTuple 14 26 15))))))




(assert (=> (=(obligation2 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation2 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(assert (=> (= (obligation2 0) true)(= (ASSOC 1) (setminus(union(ASSOC 0)(singleton(mkTuple 7 30 15)))(singleton(mkTuple 2 30 15))))))




(assert (=> (=(obligation3 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation3 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(assert (=> (= (obligation3 0) true)(= (ASSOC 1) (setminus(union(ASSOC 0)(singleton(mkTuple 9 30 15)))(singleton(mkTuple 7 30 15))))))




(assert (=> (=(obligation4 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation4 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(assert (=> (= (obligation4 0) true)(= (ASSOC 1) (setminus(union(ASSOC 0)(singleton(mkTuple 10 27 15)))(singleton(mkTuple 9 30 15))))))




(assert (=> (=(obligation5 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation5 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(assert (=> (= (obligation5 0) true)(= (ASSOC 1) (setminus(union(ASSOC 0)(singleton(mkTuple 12 28 15)))(singleton(mkTuple 10 27 15))))))




(assert (=> (=(obligation6 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation6 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(assert (=> (= (obligation6 0) true)(= (ASSOC 1) (setminus(union(ASSOC 0)(singleton(mkTuple 17 30 15)))(singleton(mkTuple 12 28 15))))))




(assert (=> (=(obligation7 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation7 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(assert (=> (= (obligation7 0) true)(= (ASSOC 1) (setminus(union(ASSOC 0)(singleton(mkTuple 1 30 15)))(singleton(mkTuple 17 30 15))))))




; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 1) (ASSIGN* 0))
(or 
(= (obligation7 0) true)(= (obligation6 0) true)(= (obligation3 0) true)(= (obligation2 0) true)(= (obligation5 0) true)(= (obligation4 0) true)(= (obligation1 0) true))))
(assert (=> (distinct (ASSIGN 1) (ASSIGN 0))
(or (= (obligation7 0) true)(= (obligation6 0) true)(= (obligation3 0) true)(= (obligation2 0) true)(= (obligation5 0) true)(= (obligation4 0) true)(= (obligation1 0) true))))
(assert (=> (distinct (ASSOC 1) (ASSOC 0))
(or 
(= (obligation7 0) true)(= (obligation6 0) true)(= (obligation3 0) true)(= (obligation2 0) true)(= (obligation5 0) true)(= (obligation4 0) true)(= (obligation1 0) true))))


; 5.4 Exactly one naive
; AT LEAST ONE
(assert (or(= (obligation7 0) true)(= (obligation6 0) true)(= (obligation3 0) true)(= (obligation2 0) true)(= (obligation5 0) true)(= (obligation4 0) true)(= (obligation1 0) true)))

;PRE PROPERTY
(declare-fun queryVARu () Int)
(declare-fun queryCONSTDENYUA_BM_approve_PDSWhole_-1 () Int)
(declare-fun queryCONSTDENYAT_BM_approve_PDSWhole_-1 () Int)
(declare-fun queryCONSTDENYUA_BM_disapprove_PDSWhole_-1 () Int)
(declare-fun queryCONSTDENYAT_BM_disapprove_PDSWhole_-1 () Int)
(declare-fun queryVARs () Int)
(declare-fun queryVARat () Int)
(assert (and 
(member (mkTuple queryVARu  2  ) (ASSIGN* 0))
 (or (or (or (not 
(and(member (mkTuple  7  queryCONSTDENYUA_BM_approve_PDSWhole_-1 ) (ASSIGN* 0))(member (mkTuple  queryCONSTDENYUA_BM_approve_PDSWhole_-1 30  queryCONSTDENYAT_BM_approve_PDSWhole_-1 ) (ASSOC 0))(member (mkTuple  15  queryCONSTDENYAT_BM_approve_PDSWhole_-1 ) (ASSIGN* 0)))
) (not 
(and(member (mkTuple  7  queryCONSTDENYUA_BM_disapprove_PDSWhole_-1 ) (ASSIGN* 0))(member (mkTuple  queryCONSTDENYUA_BM_disapprove_PDSWhole_-1 26  queryCONSTDENYAT_BM_disapprove_PDSWhole_-1 ) (ASSOC 0))(member (mkTuple  15  queryCONSTDENYAT_BM_disapprove_PDSWhole_-1 ) (ASSIGN* 0)))
)) (and (and (and 
(member (mkTuple  2  30  15 ) (ASSOC 0))
 (not 
(member (mkTuple  queryVARs  30  queryVARat ) (ASSOC 0))
)) 
(member (mkTuple  2  queryVARs ) (setminus (ASSIGN* 0)(ASSIGN 0)))
) 
(member (mkTuple  15  queryVARat ) (setminus (ASSIGN* 0)(ASSIGN 0)))
)) (and (and (and 
(member (mkTuple  2  26  15 ) (ASSOC 0))
 (not 
(member (mkTuple  queryVARs  26  queryVARat ) (ASSOC 0))
)) 
(member (mkTuple  2  queryVARs ) (setminus (ASSIGN* 0)(ASSIGN 0)))
) 
(member (mkTuple  15  queryVARat ) (setminus (ASSIGN* 0)(ASSIGN 0)))
))))

;POST PROPERTY
(assert (and (or 
(member (mkTuple  7  30  15 ) (ASSOC 1))
 (or (not 
(member (mkTuple  2  30  15 ) (ASSOC 1))
) (not 
(member (mkTuple  2  26  15 ) (ASSOC 1))
))) 
(and (= (obligation2 0) true)
 (= obligation2U_0 queryVARu ) (= obligation2ar_0 30 ) (= obligation2T_0 15 ))))
(check-sat)
(get-value (obligation7))
(get-value (obligation6))
(get-value (obligation3))
(get-value (obligation2))
(get-value (obligation5))
(get-value (obligation4))
(get-value (obligation1))
(get-value (obligation1U_0))
(get-value (obligation1UA_0))
(get-value (obligation1AT_0))
(get-value (obligation1UO_0))
(get-value (obligation1S_0))
(get-value (obligation1T_0))
(get-value (obligation1ar_0))
(get-value (obligation2U_0))
(get-value (obligation2UA_0))
(get-value (obligation2AT_0))
(get-value (obligation2UO_0))
(get-value (obligation2S_0))
(get-value (obligation2T_0))
(get-value (obligation2ar_0))
(get-value (obligation3U_0))
(get-value (obligation3UA_0))
(get-value (obligation3AT_0))
(get-value (obligation3UO_0))
(get-value (obligation3S_0))
(get-value (obligation3T_0))
(get-value (obligation3ar_0))
(get-value (obligation4U_0))
(get-value (obligation4UA_0))
(get-value (obligation4AT_0))
(get-value (obligation4UO_0))
(get-value (obligation4S_0))
(get-value (obligation4T_0))
(get-value (obligation4ar_0))
(get-value (obligation5U_0))
(get-value (obligation5UA_0))
(get-value (obligation5AT_0))
(get-value (obligation5UO_0))
(get-value (obligation5S_0))
(get-value (obligation5T_0))
(get-value (obligation5ar_0))
(get-value (obligation6U_0))
(get-value (obligation6UA_0))
(get-value (obligation6AT_0))
(get-value (obligation6UO_0))
(get-value (obligation6S_0))
(get-value (obligation6T_0))
(get-value (obligation6ar_0))
(get-value (obligation7U_0))
(get-value (obligation7UA_0))
(get-value (obligation7AT_0))
(get-value (obligation7UO_0))
(get-value (obligation7S_0))
(get-value (obligation7T_0))
(get-value (obligation7ar_0))
(get-value (queryVARu))
(get-value (queryVARs))
(get-value (queryVARat))
