(set-logic ALL)
(set-option :produce-models true)
(declare-fun USERS () (Set (Tuple Int Int)))
(assert (= USERS (insert (mkTuple 2 2) 
(mkTuple 8 8) 
(mkTuple 10 10) 
(singleton (mkTuple 1 1)))))
(declare-fun ASSIGN* (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN* 0) (insert (mkTuple 10 7) 
(mkTuple 5 11) 
(mkTuple 4 11) 
(mkTuple 2 2) 
(mkTuple 3 3) 
(mkTuple 13 12) 
(mkTuple 1 1) 
(mkTuple 11 11) 
(mkTuple 3 11) 
(mkTuple 6 11) 
(mkTuple 7 6) 
(mkTuple 5 12) 
(mkTuple 10 10) 
(mkTuple 12 11) 
(mkTuple 2 11) 
(mkTuple 7 11) 
(mkTuple 10 6) 
(mkTuple 13 13) 
(mkTuple 4 12) 
(mkTuple 1 6) 
(mkTuple 13 11) 
(mkTuple 12 12) 
(mkTuple 5 5) 
(mkTuple 1 11) 
(mkTuple 8 11) 
(mkTuple 4 4) 
(mkTuple 7 7) 
(mkTuple 2 6) 
(mkTuple 8 6) 
(mkTuple 1 7) 
(mkTuple 6 6) 
(mkTuple 3 12) 
(mkTuple 8 8) 
(mkTuple 9 9) 
(mkTuple 9 11) 
(singleton (mkTuple 10 11)))))
(declare-fun ASSIGN (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN 0) (insert (mkTuple 10 7) 
(mkTuple 13 13) 
(mkTuple 4 12) 
(mkTuple 2 2) 
(mkTuple 3 3) 
(mkTuple 13 12) 
(mkTuple 1 1) 
(mkTuple 5 5) 
(mkTuple 12 12) 
(mkTuple 4 4) 
(mkTuple 2 6) 
(mkTuple 7 7) 
(mkTuple 8 6) 
(mkTuple 1 7) 
(mkTuple 6 11) 
(mkTuple 6 6) 
(mkTuple 7 6) 
(mkTuple 3 12) 
(mkTuple 5 12) 
(mkTuple 8 8) 
(mkTuple 9 9) 
(mkTuple 9 11) 
(mkTuple 10 10) 
(singleton (mkTuple 12 11)))))
(declare-fun ASSOC (Int) (Set (Tuple Int Int Int)))

(assert (= (ASSOC 0) (insert(mkTuple 6 14 12) 
(mkTuple 6 16 12) 
(mkTuple 7 17 12) 
(singleton (mkTuple 7 15 9)))))

(declare-fun NODES () (Set (Tuple Int Int)))
(assert (= NODES (insert (mkTuple 1 1) 
(mkTuple 2 2) 
(mkTuple 3 3) 
(mkTuple 4 4) 
(mkTuple 5 5) 
(mkTuple 6 6) 
(mkTuple 7 7) 
(mkTuple 8 8) 
(mkTuple 9 9) 
(mkTuple 10 10) 
(mkTuple 11 11) 
(mkTuple 12 12) 
(singleton (mkTuple 13 13))))) 


(declare-fun accept_case (Int) Bool)
(declare-fun withdraw_case (Int) Bool)
(declare-fun approve_case (Int) Bool)
(declare-fun remove_available_attorney (Int) Bool)
;--------------------------------------------------------------------------------------------------------------------
;STEP1

; 5.1 a->PRE
(declare-fun accept_caseU_0 () Int)
(declare-fun accept_caseUA_0 () Int)
(declare-fun accept_caseAT_0 () Int)
(declare-fun accept_caseUO_0 () Int)
(declare-fun accept_casear_0 () Int)
(declare-fun accept_caseS_0 () Int)
(declare-fun accept_caseT_0 () Int)
(assert (>= accept_caseU_0 0))
(assert (>= accept_caseUA_0 0))
(assert (>= accept_caseAT_0 0))
(assert (>= accept_caseUO_0 0))
(assert (or (= accept_casear_0 16)
))
(assert (= accept_caseS_0 6))
(assert (= accept_caseT_0 12))
(assert (=> (= (accept_case 0) true) (and
 (member (mkTuple  accept_caseU_0 accept_caseS_0) (ASSIGN* 0))
 (member (mkTuple  accept_caseU_0 accept_caseUA_0) (ASSIGN* 0))
(member (mkTuple accept_caseUA_0 accept_casear_0 accept_caseAT_0) (ASSOC 0))
 (member (mkTuple  accept_caseUO_0 accept_caseT_0) (ASSIGN* 0))
 (member (mkTuple  accept_caseUO_0 accept_caseAT_0) (ASSIGN* 0))
 (member (mkTuple  accept_caseU_0 accept_caseU_0) USERS)
 (distinct accept_caseS_0 accept_caseU_0)
 (distinct accept_caseUO_0 accept_caseT_0)
)))


(declare-fun approve_caseU_0 () Int)
(declare-fun approve_caseUA_0 () Int)
(declare-fun approve_caseAT_0 () Int)
(declare-fun approve_caseUO_0 () Int)
(declare-fun approve_casear_0 () Int)
(declare-fun approve_caseS_0 () Int)
(declare-fun approve_caseT_0 () Int)
(assert (>= approve_caseU_0 0))
(assert (>= approve_caseUA_0 0))
(assert (>= approve_caseAT_0 0))
(assert (>= approve_caseUO_0 0))
(assert (or (= approve_casear_0 15)
))
(assert (= approve_caseS_0 7))
(assert (= approve_caseT_0 9))
(assert (=> (= (approve_case 0) true) (and
 (member (mkTuple  approve_caseU_0 approve_caseS_0) (ASSIGN* 0))
 (member (mkTuple  approve_caseU_0 approve_caseUA_0) (ASSIGN* 0))
(member (mkTuple approve_caseUA_0 approve_casear_0 approve_caseAT_0) (ASSOC 0))
 (member (mkTuple  approve_caseUO_0 approve_caseT_0) (ASSIGN* 0))
 (member (mkTuple  approve_caseUO_0 approve_caseAT_0) (ASSIGN* 0))
 (member (mkTuple  approve_caseU_0 approve_caseU_0) USERS)
 (distinct approve_caseS_0 approve_caseU_0)
 (distinct approve_caseUO_0 approve_caseT_0)
)))


(declare-fun remove_available_attorneyU_0 () Int)
(declare-fun remove_available_attorneyUA_0 () Int)
(declare-fun remove_available_attorneyAT_0 () Int)
(declare-fun remove_available_attorneyUO_0 () Int)
(declare-fun remove_available_attorneyar_0 () Int)
(declare-fun remove_available_attorneyS_0 () Int)
(declare-fun remove_available_attorneyT_0 () Int)
(assert (>= remove_available_attorneyU_0 0))
(assert (>= remove_available_attorneyUA_0 0))
(assert (>= remove_available_attorneyAT_0 0))
(assert (>= remove_available_attorneyUO_0 0))
(assert (or (= remove_available_attorneyar_0 18)
))
(assert (= remove_available_attorneyS_0 7))
(assert (= remove_available_attorneyT_0 6))
(assert (=> (= (remove_available_attorney 0) true) (and
 (member (mkTuple  remove_available_attorneyU_0 remove_available_attorneyS_0) (ASSIGN* 0))
 (member (mkTuple  remove_available_attorneyU_0 remove_available_attorneyUA_0) (ASSIGN* 0))
(member (mkTuple remove_available_attorneyUA_0 remove_available_attorneyar_0 remove_available_attorneyAT_0) (ASSOC 0))
 (member (mkTuple  remove_available_attorneyUO_0 remove_available_attorneyT_0) (ASSIGN* 0))
 (member (mkTuple  remove_available_attorneyUO_0 remove_available_attorneyAT_0) (ASSIGN* 0))
 (member (mkTuple  remove_available_attorneyU_0 remove_available_attorneyU_0) USERS)
 (distinct remove_available_attorneyS_0 remove_available_attorneyU_0)
 (distinct remove_available_attorneyUO_0 remove_available_attorneyT_0)
(member (mkTuple remove_available_attorneyT_0 6) (ASSIGN* 0)))))


(declare-fun withdraw_caseU_0 () Int)
(declare-fun withdraw_caseUA_0 () Int)
(declare-fun withdraw_caseAT_0 () Int)
(declare-fun withdraw_caseUO_0 () Int)
(declare-fun withdraw_casear_0 () Int)
(declare-fun withdraw_caseS_0 () Int)
(declare-fun withdraw_caseT_0 () Int)
(assert (>= withdraw_caseU_0 0))
(assert (>= withdraw_caseUA_0 0))
(assert (>= withdraw_caseAT_0 0))
(assert (>= withdraw_caseUO_0 0))
(assert (or (= withdraw_casear_0 17)
))
(assert (= withdraw_caseS_0 7))
(assert (= withdraw_caseT_0 12))
(assert (=> (= (withdraw_case 0) true) (and
 (member (mkTuple  withdraw_caseU_0 withdraw_caseS_0) (ASSIGN* 0))
 (member (mkTuple  withdraw_caseU_0 withdraw_caseUA_0) (ASSIGN* 0))
(member (mkTuple withdraw_caseUA_0 withdraw_casear_0 withdraw_caseAT_0) (ASSOC 0))
 (member (mkTuple  withdraw_caseUO_0 withdraw_caseT_0) (ASSIGN* 0))
 (member (mkTuple  withdraw_caseUO_0 withdraw_caseAT_0) (ASSIGN* 0))
 (member (mkTuple  withdraw_caseU_0 withdraw_caseU_0) USERS)
 (distinct withdraw_caseS_0 withdraw_caseU_0)
 (distinct withdraw_caseUO_0 withdraw_caseT_0)
)))




; 5.2 a->Eff


(assert (=> (= (accept_case 0) true)(= (ASSIGN* 1) (setminus (union (singleton (mkTuple accept_caseT_0 9)) (union (join (singleton (mkTuple accept_caseT_0 9)) (join (singleton (mkTuple 9 9)) (ASSIGN* 0))) (ASSIGN* 0))) (setminus (join (singleton (mkTuple accept_caseT_0 12)) (ASSIGN* 0)) (join (join (singleton (mkTuple accept_caseT_0 accept_caseT_0)) (setminus (setminus (ASSIGN 0) (singleton (mkTuple accept_caseT_0 12))) (singleton (mkTuple accept_caseT_0 accept_caseT_0)))) (ASSIGN* 0)))))))
(assert (=> (= (accept_case 0) true)(= (ASSIGN 1) (setminus ( union (ASSIGN 0) (singleton (mkTuple accept_caseT_0 9))) (singleton (mkTuple accept_caseT_0 12))))))

(assert (=> (=(accept_case 0) true) (= (ASSOC 1) (ASSOC 0))))




(assert (=> (= (approve_case 0) true)(= (ASSIGN* 1) (setminus  (setminus (ASSIGN* 0) (setminus (join (singleton (mkTuple approve_caseT_0 9)) (ASSIGN* 0)) (join (join (singleton (mkTuple approve_caseT_0 approve_caseT_0)) (setminus (setminus (ASSIGN 0) (singleton (mkTuple approve_caseT_0 9))) (singleton (mkTuple approve_caseT_0 approve_caseT_0)))) (ASSIGN* 0)))) (setminus (join (singleton (mkTuple 8 6)) (ASSIGN* 0)) (join (join (singleton (mkTuple 8 8)) (setminus (setminus (ASSIGN 0) (singleton (mkTuple 8 6))) (singleton (mkTuple 8 8)))) (ASSIGN* 0)))))))
(assert (=> (= (approve_case 0) true)(= (ASSIGN 1) (setminus  (setminus (ASSIGN 0) (singleton (mkTuple approve_caseT_0 9))) (singleton (mkTuple 8 6))))))
(assert (=> (= (approve_case 0) true)(= (ASSOC 1) (union(ASSOC 0)(singleton(mkTuple 7 18 6))))))




(assert (=> (= (remove_available_attorney 0) true)(= (ASSIGN* 1) (setminus (ASSIGN* 0) (setminus (join (singleton (mkTuple remove_available_attorneyT_0 6)) (ASSIGN* 0)) (join (join (singleton (mkTuple remove_available_attorneyT_0 remove_available_attorneyT_0)) (setminus (setminus (ASSIGN 0) (singleton (mkTuple remove_available_attorneyT_0 6))) (singleton (mkTuple remove_available_attorneyT_0 remove_available_attorneyT_0)))) (ASSIGN* 0)))))))
(assert (=> (= (remove_available_attorney 0) true)(= (ASSIGN 1) (setminus (ASSIGN 0) (singleton (mkTuple remove_available_attorneyT_0 6))))))
(assert (=> (= (remove_available_attorney 0) true)(= (ASSOC 1) (setminus(ASSOC 0)(singleton(mkTuple 7 18 6))))))




(assert (=> (= (withdraw_case 0) true)(= (ASSIGN* 1)(union (singleton (mkTuple withdraw_caseT_0 12)) (union (join (singleton (mkTuple withdraw_caseT_0 12)) (join (singleton (mkTuple 12 12)) (ASSIGN* 0))) (ASSIGN* 0))))))
(assert (=> (= (withdraw_case 0) true)(= (ASSIGN 1)( union (ASSIGN 0) (singleton (mkTuple withdraw_caseT_0 12))))))

(assert (=> (=(withdraw_case 0) true) (= (ASSOC 1) (ASSOC 0))))




; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 1) (ASSIGN* 0))
(or 
(= (accept_case 0) true)(= (withdraw_case 0) true)(= (approve_case 0) true)(= (remove_available_attorney 0) true))))
(assert (=> (distinct (ASSIGN 1) (ASSIGN 0))
(or (= (accept_case 0) true)(= (withdraw_case 0) true)(= (approve_case 0) true)(= (remove_available_attorney 0) true))))
(assert (=> (distinct (ASSOC 1) (ASSOC 0))
(or 
(= (accept_case 0) true)(= (withdraw_case 0) true)(= (approve_case 0) true)(= (remove_available_attorney 0) true))))


; 5.4 Exactly one naive
; AT LEAST ONE
(assert (or(= (accept_case 0) true)(= (withdraw_case 0) true)(= (approve_case 0) true)(= (remove_available_attorney 0) true)))

;PRE PROPERTY

;POST PROPERTY
(declare-fun queryVARu () Int)
(declare-fun queryVARar () Int)
(declare-fun queryVARat () Int)
(assert 
(and (= (remove_available_attorney 0) true)
 (= remove_available_attorneyU_0 queryVARu ) (= remove_available_attorneyar_0 queryVARar ) (= remove_available_attorneyT_0 queryVARat )))
(check-sat)
(get-value (accept_case))
(get-value (withdraw_case))
(get-value (approve_case))
(get-value (remove_available_attorney))
(get-value (accept_caseU_0))
(get-value (accept_caseUA_0))
(get-value (accept_caseAT_0))
(get-value (accept_caseUO_0))
(get-value (accept_caseS_0))
(get-value (accept_caseT_0))
(get-value (accept_casear_0))
(get-value (approve_caseU_0))
(get-value (approve_caseUA_0))
(get-value (approve_caseAT_0))
(get-value (approve_caseUO_0))
(get-value (approve_caseS_0))
(get-value (approve_caseT_0))
(get-value (approve_casear_0))
(get-value (remove_available_attorneyU_0))
(get-value (remove_available_attorneyUA_0))
(get-value (remove_available_attorneyAT_0))
(get-value (remove_available_attorneyUO_0))
(get-value (remove_available_attorneyS_0))
(get-value (remove_available_attorneyT_0))
(get-value (remove_available_attorneyar_0))
(get-value (withdraw_caseU_0))
(get-value (withdraw_caseUA_0))
(get-value (withdraw_caseAT_0))
(get-value (withdraw_caseUO_0))
(get-value (withdraw_caseS_0))
(get-value (withdraw_caseT_0))
(get-value (withdraw_casear_0))
(get-value (queryVARu))
(get-value (queryVARar))
(get-value (queryVARat))
(get-value ((ASSIGN 0)))
(get-value ((ASSIGN 1)))
(get-value ((ASSOC 0)))
(get-value ((ASSOC 1)))
