(set-logic ALL)
(set-option :produce-models true)
(declare-fun SetToCheckUA () (Set (Tuple Int Int)))
(assert (= SetToCheckUA (insert (mkTuple 13 13) 
(mkTuple 15 15) 
(mkTuple 2 2) 
(mkTuple 3 3) 
(mkTuple 18 18) 
(mkTuple 1 1) 
(mkTuple 11 11) 
(mkTuple 5 5) 
(mkTuple 12 12) 
(mkTuple 4 4) 
(mkTuple 14 14) 
(mkTuple 7 7) 
(mkTuple 8 8) 
(mkTuple 9 9) 
(mkTuple 10 10) 
(singleton (mkTuple 19 19)))))
(declare-fun SetToCheckAT () (Set (Tuple Int Int)))
(assert (= SetToCheckAT (insert (mkTuple 6 6) 
(singleton (mkTuple 16 16)))))
(declare-fun ASSIGN* (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN* 0) (insert (mkTuple 4 17) 
(mkTuple 9 17) 
(mkTuple 14 3) 
(mkTuple 15 17) 
(mkTuple 15 15) 
(mkTuple 2 2) 
(mkTuple 11 17) 
(mkTuple 16 17) 
(mkTuple 3 3) 
(mkTuple 18 18) 
(mkTuple 8 17) 
(mkTuple 1 1) 
(mkTuple 11 11) 
(mkTuple 3 17) 
(mkTuple 12 15) 
(mkTuple 12 17) 
(mkTuple 14 14) 
(mkTuple 14 10) 
(mkTuple 17 17) 
(mkTuple 10 10) 
(mkTuple 7 17) 
(mkTuple 13 13) 
(mkTuple 18 17) 
(mkTuple 13 17) 
(mkTuple 16 16) 
(mkTuple 2 17) 
(mkTuple 6 17) 
(mkTuple 19 17) 
(mkTuple 5 5) 
(mkTuple 12 12) 
(mkTuple 4 4) 
(mkTuple 7 7) 
(mkTuple 3 10) 
(mkTuple 6 6) 
(mkTuple 14 17) 
(mkTuple 1 17) 
(mkTuple 8 8) 
(mkTuple 10 17) 
(mkTuple 9 9) 
(mkTuple 5 17) 
(singleton (mkTuple 19 19)))))
(declare-fun ASSIGN (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN 0) (insert (mkTuple 4 17) 
(mkTuple 9 17) 
(mkTuple 14 3) 
(mkTuple 15 17) 
(mkTuple 15 15) 
(mkTuple 2 2) 
(mkTuple 11 17) 
(mkTuple 16 17) 
(mkTuple 3 3) 
(mkTuple 8 17) 
(mkTuple 18 18) 
(mkTuple 1 1) 
(mkTuple 11 11) 
(mkTuple 3 17) 
(mkTuple 12 15) 
(mkTuple 14 14) 
(mkTuple 10 10) 
(mkTuple 7 17) 
(mkTuple 13 13) 
(mkTuple 18 17) 
(mkTuple 13 17) 
(mkTuple 16 16) 
(mkTuple 2 17) 
(mkTuple 6 17) 
(mkTuple 19 17) 
(mkTuple 5 5) 
(mkTuple 12 12) 
(mkTuple 4 4) 
(mkTuple 7 7) 
(mkTuple 3 10) 
(mkTuple 6 6) 
(mkTuple 1 17) 
(mkTuple 8 8) 
(mkTuple 10 17) 
(mkTuple 9 9) 
(mkTuple 5 17) 
(singleton (mkTuple 19 19)))))
(declare-fun ASSOC (Int) (Set (Tuple Int Int Int)))

(assert (= (ASSOC 0) (insert(mkTuple 3 23 16) 
(mkTuple 3 20 19) 
(mkTuple 3 25 19) 
(mkTuple 15 26 3) 
(mkTuple 15 28 3) 
(mkTuple 15 40 16) 
(mkTuple 15 24 16) 
(mkTuple 15 42 16) 
(singleton (mkTuple 19 21 16)))))

(declare-fun NODES () (Set (Tuple Int Int)))
(assert (= NODES (insert (mkTuple 1 1) 
(mkTuple 2 2) 
(mkTuple 3 3) 
(mkTuple 4 4) 
(mkTuple 5 5) 
(mkTuple 6 6) 
(mkTuple 7 7) 
(mkTuple 8 8) 
(mkTuple 9 9) 
(mkTuple 10 10) 
(mkTuple 11 11) 
(mkTuple 12 12) 
(mkTuple 13 13) 
(mkTuple 14 14) 
(mkTuple 15 15) 
(mkTuple 16 16) 
(mkTuple 17 17) 
(mkTuple 18 18) 
(singleton (mkTuple 19 19))))) 


(declare-fun obligation13 (Int) Bool)
(declare-fun obligation7 (Int) Bool)
(declare-fun obligation6 (Int) Bool)
(declare-fun obligation9 (Int) Bool)
(declare-fun obligation8 (Int) Bool)
(declare-fun obligation3 (Int) Bool)
(declare-fun obligation2 (Int) Bool)
(declare-fun obligation5 (Int) Bool)
(declare-fun obligation4 (Int) Bool)
(declare-fun obligation1 (Int) Bool)
(declare-fun obligation12 (Int) Bool)
(declare-fun obligation11 (Int) Bool)
(declare-fun obligation10 (Int) Bool)
;--------------------------------------------------------------------------------------------------------------------
;STEP1

; 5.1 a->PRE
(declare-fun obligation1U_1 () Int)
(declare-fun obligation1UA_1 () Int)
(declare-fun obligation1AT_1 () Int)
(declare-fun obligation1UO_1 () Int)
(assert (>= obligation1U_1 0))
(assert (>= obligation1UA_1 0))
(assert (>= obligation1AT_1 0))
(assert (>= obligation1UO_1 0))
(declare-fun obligation1ar_1 () Int)
(assert (= obligation1ar_1 40))
(assert (=> (= (obligation1 0) true) (let((.def_U obligation1U_1)(.def_UO obligation1UO_1) (.def_UA obligation1UA_1)(.def_AT obligation1AT_1))(and
 (member (mkTuple  15 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation1ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation2U_1 () Int)
(declare-fun obligation2UA_1 () Int)
(declare-fun obligation2AT_1 () Int)
(declare-fun obligation2UO_1 () Int)
(assert (>= obligation2U_1 0))
(assert (>= obligation2UA_1 0))
(assert (>= obligation2AT_1 0))
(assert (>= obligation2UO_1 0))
(declare-fun obligation2ar_1 () Int)
(assert (= obligation2ar_1 39))
(assert (=> (= (obligation2 0) true) (let((.def_U obligation2U_1)(.def_UO obligation2UO_1) (.def_UA obligation2UA_1)(.def_AT obligation2AT_1))(and
 (member (mkTuple  2 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation2ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation3U_1 () Int)
(declare-fun obligation3UA_1 () Int)
(declare-fun obligation3AT_1 () Int)
(declare-fun obligation3UO_1 () Int)
(assert (>= obligation3U_1 0))
(assert (>= obligation3UA_1 0))
(assert (>= obligation3AT_1 0))
(assert (>= obligation3UO_1 0))
(declare-fun obligation3ar_1 () Int)
(assert (= obligation3ar_1 39))
(assert (=> (= (obligation3 0) true) (let((.def_U obligation3U_1)(.def_UO obligation3UO_1) (.def_UA obligation3UA_1)(.def_AT obligation3AT_1))(and
 (member (mkTuple  7 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation3ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation4U_1 () Int)
(declare-fun obligation4UA_1 () Int)
(declare-fun obligation4AT_1 () Int)
(declare-fun obligation4UO_1 () Int)
(assert (>= obligation4U_1 0))
(assert (>= obligation4UA_1 0))
(assert (>= obligation4AT_1 0))
(assert (>= obligation4UO_1 0))
(declare-fun obligation4ar_1 () Int)
(assert (= obligation4ar_1 39))
(assert (=> (= (obligation4 0) true) (let((.def_U obligation4U_1)(.def_UO obligation4UO_1) (.def_UA obligation4UA_1)(.def_AT obligation4AT_1))(and
 (member (mkTuple  9 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation4ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation5U_1 () Int)
(declare-fun obligation5UA_1 () Int)
(declare-fun obligation5AT_1 () Int)
(declare-fun obligation5UO_1 () Int)
(assert (>= obligation5U_1 0))
(assert (>= obligation5UA_1 0))
(assert (>= obligation5AT_1 0))
(assert (>= obligation5UO_1 0))
(declare-fun obligation5ar_1 () Int)
(assert (= obligation5ar_1 40))
(assert (=> (= (obligation5 0) true) (let((.def_U obligation5U_1)(.def_UO obligation5UO_1) (.def_UA obligation5UA_1)(.def_AT obligation5AT_1))(and
 (member (mkTuple  11 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation5ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation6U_1 () Int)
(declare-fun obligation6UA_1 () Int)
(declare-fun obligation6AT_1 () Int)
(declare-fun obligation6UO_1 () Int)
(assert (>= obligation6U_1 0))
(assert (>= obligation6UA_1 0))
(assert (>= obligation6AT_1 0))
(assert (>= obligation6UO_1 0))
(declare-fun obligation6ar_1 () Int)
(assert (= obligation6ar_1 41))
(assert (=> (= (obligation6 0) true) (let((.def_U obligation6U_1)(.def_UO obligation6UO_1) (.def_UA obligation6UA_1)(.def_AT obligation6AT_1))(and
 (member (mkTuple  13 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation6ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation7U_1 () Int)
(declare-fun obligation7UA_1 () Int)
(declare-fun obligation7AT_1 () Int)
(declare-fun obligation7UO_1 () Int)
(assert (>= obligation7U_1 0))
(assert (>= obligation7UA_1 0))
(assert (>= obligation7AT_1 0))
(assert (>= obligation7UO_1 0))
(declare-fun obligation7ar_1 () Int)
(assert (= obligation7ar_1 39))
(assert (=> (= (obligation7 0) true) (let((.def_U obligation7U_1)(.def_UO obligation7UO_1) (.def_UA obligation7UA_1)(.def_AT obligation7AT_1))(and
 (member (mkTuple  18 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation7ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation8U_1 () Int)
(declare-fun obligation8UA_1 () Int)
(declare-fun obligation8AT_1 () Int)
(declare-fun obligation8UO_1 () Int)
(assert (>= obligation8U_1 0))
(assert (>= obligation8UA_1 0))
(assert (>= obligation8AT_1 0))
(assert (>= obligation8UO_1 0))
(declare-fun obligation8ar_1 () Int)
(assert (= obligation8ar_1 39))
(assert (=> (= (obligation8 0) true) (let((.def_U obligation8U_1)(.def_UO obligation8UO_1) (.def_UA obligation8UA_1)(.def_AT obligation8AT_1))(and
 (member (mkTuple  1 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation8ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation9U_1 () Int)
(declare-fun obligation9UA_1 () Int)
(declare-fun obligation9AT_1 () Int)
(declare-fun obligation9UO_1 () Int)
(assert (>= obligation9U_1 0))
(assert (>= obligation9UA_1 0))
(assert (>= obligation9AT_1 0))
(assert (>= obligation9UO_1 0))
(declare-fun obligation9ar_1 () Int)
(assert (= obligation9ar_1 39))
(assert (=> (= (obligation9 0) true) (let((.def_U obligation9U_1)(.def_UO obligation9UO_1) (.def_UA obligation9UA_1)(.def_AT obligation9AT_1))(and
 (member (mkTuple  8 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation9ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation10U_1 () Int)
(declare-fun obligation10UA_1 () Int)
(declare-fun obligation10AT_1 () Int)
(declare-fun obligation10UO_1 () Int)
(assert (>= obligation10U_1 0))
(assert (>= obligation10UA_1 0))
(assert (>= obligation10AT_1 0))
(assert (>= obligation10UO_1 0))
(declare-fun obligation10ar_1 () Int)
(assert (= obligation10ar_1 40))
(assert (=> (= (obligation10 0) true) (let((.def_U obligation10U_1)(.def_UO obligation10UO_1) (.def_UA obligation10UA_1)(.def_AT obligation10AT_1))(and
 (member (mkTuple  4 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation10ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation11U_1 () Int)
(declare-fun obligation11UA_1 () Int)
(declare-fun obligation11AT_1 () Int)
(declare-fun obligation11UO_1 () Int)
(assert (>= obligation11U_1 0))
(assert (>= obligation11UA_1 0))
(assert (>= obligation11AT_1 0))
(assert (>= obligation11UO_1 0))
(declare-fun obligation11ar_1 () Int)
(assert (= obligation11ar_1 41))
(assert (=> (= (obligation11 0) true) (let((.def_U obligation11U_1)(.def_UO obligation11UO_1) (.def_UA obligation11UA_1)(.def_AT obligation11AT_1))(and
 (member (mkTuple  5 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation11ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation12U_1 () Int)
(declare-fun obligation12UA_1 () Int)
(declare-fun obligation12AT_1 () Int)
(declare-fun obligation12UO_1 () Int)
(assert (>= obligation12U_1 0))
(assert (>= obligation12UA_1 0))
(assert (>= obligation12AT_1 0))
(assert (>= obligation12UO_1 0))
(declare-fun obligation12ar_1 () Int)
(assert (= obligation12ar_1 42))
(assert (=> (= (obligation12 0) true) (let((.def_U obligation12U_1)(.def_UO obligation12UO_1) (.def_UA obligation12UA_1)(.def_AT obligation12AT_1))(and
 (member (mkTuple  5 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation12ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))


(declare-fun obligation13U_1 () Int)
(declare-fun obligation13UA_1 () Int)
(declare-fun obligation13AT_1 () Int)
(declare-fun obligation13UO_1 () Int)
(assert (>= obligation13U_1 0))
(assert (>= obligation13UA_1 0))
(assert (>= obligation13AT_1 0))
(assert (>= obligation13UO_1 0))
(declare-fun obligation13ar_1 () Int)
(assert (= obligation13ar_1 44))
(assert (=> (= (obligation13 0) true) (let((.def_U obligation13U_1)(.def_UO obligation13UO_1) (.def_UA obligation13UA_1)(.def_AT obligation13AT_1))(and
 (member (mkTuple  4 .def_UA) (ASSIGN* 0))
(member (mkTuple .def_UA obligation13ar_1 .def_AT) (ASSOC 0))
 (member (mkTuple  16 .def_AT) (ASSIGN* 0))
))))




; 5.2 a->Eff

(assert (=> (=(obligation1 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation1 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(declare-fun ASSOCobligation1_0_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation1 0) true)(subset ASSOCobligation1_0_1 (union  (ASSOC 0) (singleton(mkTuple 2 39 16))))))
(declare-fun ASSOCobligation1_1_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation1 0) true)(subset ASSOCobligation1_1_1 (union  (ASSOC 0) (singleton(mkTuple 2 39 16))))))
(assert (= (ASSOC 1)  (union ASSOCobligation1_0_1 ASSOCobligation1_1_1))) 



(assert (=> (=(obligation2 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation2 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(declare-fun ASSOCobligation2_0_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation2 0) true)(subset ASSOCobligation2_0_1 (union  (ASSOC 0) (singleton(mkTuple 7 39 16))))))
(declare-fun ASSOCobligation2_1_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation2 0) true)(subset ASSOCobligation2_1_1 (union  (ASSOC 0) (singleton(mkTuple 7 39 16))))))
(declare-fun ASSOCobligation2_2_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation2 0) true)(subset ASSOCobligation2_2_1 (union  (ASSOC 0) (singleton(mkTuple 7 39 16))))))
(declare-fun ASSOCobligation2_3_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation2 0) true)(subset ASSOCobligation2_3_1 (union  (ASSOC 0) (singleton(mkTuple 7 39 16))))))
(assert (= (ASSOC 1) (union ASSOCobligation2_0_1(union ASSOCobligation2_1_1 (union ASSOCobligation2_2_1 ASSOCobligation2_3_1))) ))



(assert (=> (= (obligation3 0) true)(subset (ASSIGN* 1) (union (join (join (union (singleton (mkTuple 12 12)) (join (ASSIGN* 0) (singleton (mkTuple 12 12)))) (singleton (mkTuple 12 3))) (union (singleton (mkTuple 3 3)) (join (singleton (mkTuple 3 3)) (ASSIGN* 0) ))) (ASSIGN* 0)))))
(assert (=> (= (obligation3 0) true)(subset (ASSIGN 1)( union (ASSIGN 0) (singleton (mkTuple 12 3))))))
(declare-fun ASSOCobligation3_0_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation3 0) true)(subset ASSOCobligation3_0_1 (union  (ASSOC 0) (singleton(mkTuple 9 39 16))))))
(declare-fun ASSOCobligation3_1_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation3 0) true)(subset ASSOCobligation3_1_1 (union  (ASSOC 0) (singleton(mkTuple 9 39 16))))))
(assert (= (ASSOC 1)  (union ASSOCobligation3_0_1 ASSOCobligation3_1_1))) 



(assert (=> (= (obligation4 0) true)(subset (ASSIGN* 1) (setminus (ASSIGN* 0) (setminus (setminus (union (singleton (mkTuple 12 3)) (join (singleton (mkTuple 12 3)) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 12 12)) (join (ASSIGN* 0)  (singleton (mkTuple 12 12)))) (transpose (union  (singleton (mkTuple 12 12)) (join (ASSIGN* 0)  (singleton (mkTuple 12 12)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 12 3)))) (ASSIGN* 0))) (join (join (intersection (join (union  (singleton (mkTuple 12 12)) (join (ASSIGN* 0)  (singleton (mkTuple 12 12)))) (transpose (union  (singleton (mkTuple 12 12)) (join (ASSIGN* 0)  (singleton (mkTuple 12 12)))))) NODES) (setminus (ASSIGN 0) (singleton (mkTuple 12 3)))) (ASSIGN* 0)))))))
(assert (=> (= (obligation4 0) true)(subset (ASSIGN* 1) (setminus (ASSIGN 0) (singleton (mkTuple 12 3))))))

(declare-fun ASSOCobligation4_0_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation4 0) true)(subset ASSOCobligation4_0_1 (union  (ASSOC 0) (singleton(mkTuple 11 40 16))))))
(declare-fun ASSOCobligation4_1_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation4 0) true)(subset ASSOCobligation4_1_1 (union  (ASSOC 0) (singleton(mkTuple 11 40 16))))))
(assert (= (ASSOC 1)  (union ASSOCobligation4_0_1 ASSOCobligation4_1_1))) 



(assert (=> (=(obligation5 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation5 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(declare-fun ASSOCobligation5_0_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation5 0) true)(subset ASSOCobligation5_0_1 (union  (ASSOC 0) (singleton(mkTuple 13 41 16))))))
(declare-fun ASSOCobligation5_1_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation5 0) true)(subset ASSOCobligation5_1_1 (union  (ASSOC 0) (singleton(mkTuple 13 41 16))))))
(assert (= (ASSOC 1)  (union ASSOCobligation5_0_1 ASSOCobligation5_1_1))) 



(assert (=> (=(obligation6 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation6 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(declare-fun ASSOCobligation6_0_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation6 0) true)(subset ASSOCobligation6_0_1 (union  (ASSOC 0) (singleton(mkTuple 18 39 16))))))
(declare-fun ASSOCobligation6_1_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation6 0) true)(subset ASSOCobligation6_1_1 (union  (ASSOC 0) (singleton(mkTuple 18 39 16))))))
(assert (= (ASSOC 1)  (union ASSOCobligation6_0_1 ASSOCobligation6_1_1))) 



(assert (=> (=(obligation7 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation7 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(declare-fun ASSOCobligation7_0_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation7 0) true)(subset ASSOCobligation7_0_1 (union  (ASSOC 0) (singleton(mkTuple 1 39 16))))))
(declare-fun ASSOCobligation7_1_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation7 0) true)(subset ASSOCobligation7_1_1 (union  (ASSOC 0) (singleton(mkTuple 1 39 16))))))
(assert (= (ASSOC 1)  (union ASSOCobligation7_0_1 ASSOCobligation7_1_1))) 



(assert (=> (=(obligation8 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation8 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(declare-fun ASSOCobligation8_0_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation8 0) true)(subset ASSOCobligation8_0_1 (union  (ASSOC 0) (singleton(mkTuple 8 39 16))))))
(declare-fun ASSOCobligation8_1_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation8 0) true)(subset ASSOCobligation8_1_1 (union  (ASSOC 0) (singleton(mkTuple 8 39 16))))))
(assert (= (ASSOC 1)  (union ASSOCobligation8_0_1 ASSOCobligation8_1_1))) 



(assert (=> (=(obligation9 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation9 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(declare-fun ASSOCobligation9_0_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation9 0) true)(subset ASSOCobligation9_0_1 (union  (ASSOC 0) (singleton(mkTuple 4 40 16))))))
(declare-fun ASSOCobligation9_1_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation9 0) true)(subset ASSOCobligation9_1_1 (union  (ASSOC 0) (singleton(mkTuple 4 40 16))))))
(assert (= (ASSOC 1)  (union ASSOCobligation9_0_1 ASSOCobligation9_1_1))) 



(assert (=> (=(obligation10 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation10 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(declare-fun ASSOCobligation10_0_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation10 0) true)(subset ASSOCobligation10_0_1 (union  (ASSOC 0) (singleton(mkTuple 5 41 16))))))
(declare-fun ASSOCobligation10_1_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation10 0) true)(subset ASSOCobligation10_1_1 (union  (ASSOC 0) (singleton(mkTuple 5 41 16))))))
(assert (= (ASSOC 1)  (union ASSOCobligation10_0_1 ASSOCobligation10_1_1))) 



(assert (=> (=(obligation11 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation11 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(declare-fun ASSOCobligation11_0_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation11 0) true)(subset ASSOCobligation11_0_1 (union  (ASSOC 0) (singleton(mkTuple 5 42 16))))))
(declare-fun ASSOCobligation11_1_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation11 0) true)(subset ASSOCobligation11_1_1 (union  (ASSOC 0) (singleton(mkTuple 5 42 16))))))
(assert (= (ASSOC 1)  (union ASSOCobligation11_0_1 ASSOCobligation11_1_1))) 



(assert (=> (=(obligation12 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation12 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(declare-fun ASSOCobligation12_0_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation12 0) true)(subset ASSOCobligation12_0_1 (union  (ASSOC 0) (singleton(mkTuple 4 44 16))))))
(declare-fun ASSOCobligation12_1_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation12 0) true)(subset ASSOCobligation12_1_1 (union  (ASSOC 0) (singleton(mkTuple 4 44 16))))))
(assert (= (ASSOC 1)  (union ASSOCobligation12_0_1 ASSOCobligation12_1_1))) 



(assert (=> (=(obligation13 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation13 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(declare-fun ASSOCobligation13_0_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation13 0) true)(subset ASSOCobligation13_0_1 (union  (ASSOC 0) (singleton(mkTuple 5 44 16))))))
(declare-fun ASSOCobligation13_1_1 () (Set (Tuple Int Int Int)))
(assert (=> (= (obligation13 0) true)(subset ASSOCobligation13_1_1 (union  (ASSOC 0) (singleton(mkTuple 5 44 16))))))
(assert (= (ASSOC 1)  (union ASSOCobligation13_0_1 ASSOCobligation13_1_1))) 




; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 1) (ASSIGN* 0))
(or 
(= (obligation13 0) true)(= (obligation7 0) true)(= (obligation6 0) true)(= (obligation9 0) true)(= (obligation8 0) true)(= (obligation3 0) true)(= (obligation2 0) true)(= (obligation5 0) true)(= (obligation4 0) true)(= (obligation1 0) true)(= (obligation12 0) true)(= (obligation11 0) true)(= (obligation10 0) true))))
(assert (=> (distinct (ASSOC 1) (ASSOC 0))
(or 
(= (obligation13 0) true)(= (obligation7 0) true)(= (obligation6 0) true)(= (obligation9 0) true)(= (obligation8 0) true)(= (obligation3 0) true)(= (obligation2 0) true)(= (obligation5 0) true)(= (obligation4 0) true)(= (obligation1 0) true)(= (obligation12 0) true)(= (obligation11 0) true)(= (obligation10 0) true))))


; 5.4 Exactly one naive


; AT MOST ONE
(assert (not (and (= (obligation13 0) true) (= (obligation7 0) true))))
(assert (not (and (= (obligation13 0) true) (= (obligation6 0) true))))
(assert (not (and (= (obligation13 0) true) (= (obligation9 0) true))))
(assert (not (and (= (obligation13 0) true) (= (obligation8 0) true))))
(assert (not (and (= (obligation13 0) true) (= (obligation3 0) true))))
(assert (not (and (= (obligation13 0) true) (= (obligation2 0) true))))
(assert (not (and (= (obligation13 0) true) (= (obligation5 0) true))))
(assert (not (and (= (obligation13 0) true) (= (obligation4 0) true))))
(assert (not (and (= (obligation13 0) true) (= (obligation1 0) true))))
(assert (not (and (= (obligation13 0) true) (= (obligation12 0) true))))
(assert (not (and (= (obligation13 0) true) (= (obligation11 0) true))))
(assert (not (and (= (obligation13 0) true) (= (obligation10 0) true))))
(assert (not (and (= (obligation7 0) true) (= (obligation6 0) true))))
(assert (not (and (= (obligation7 0) true) (= (obligation9 0) true))))
(assert (not (and (= (obligation7 0) true) (= (obligation8 0) true))))
(assert (not (and (= (obligation7 0) true) (= (obligation3 0) true))))
(assert (not (and (= (obligation7 0) true) (= (obligation2 0) true))))
(assert (not (and (= (obligation7 0) true) (= (obligation5 0) true))))
(assert (not (and (= (obligation7 0) true) (= (obligation4 0) true))))
(assert (not (and (= (obligation7 0) true) (= (obligation1 0) true))))
(assert (not (and (= (obligation7 0) true) (= (obligation12 0) true))))
(assert (not (and (= (obligation7 0) true) (= (obligation11 0) true))))
(assert (not (and (= (obligation7 0) true) (= (obligation10 0) true))))
(assert (not (and (= (obligation6 0) true) (= (obligation9 0) true))))
(assert (not (and (= (obligation6 0) true) (= (obligation8 0) true))))
(assert (not (and (= (obligation6 0) true) (= (obligation3 0) true))))
(assert (not (and (= (obligation6 0) true) (= (obligation2 0) true))))
(assert (not (and (= (obligation6 0) true) (= (obligation5 0) true))))
(assert (not (and (= (obligation6 0) true) (= (obligation4 0) true))))
(assert (not (and (= (obligation6 0) true) (= (obligation1 0) true))))
(assert (not (and (= (obligation6 0) true) (= (obligation12 0) true))))
(assert (not (and (= (obligation6 0) true) (= (obligation11 0) true))))
(assert (not (and (= (obligation6 0) true) (= (obligation10 0) true))))
(assert (not (and (= (obligation9 0) true) (= (obligation8 0) true))))
(assert (not (and (= (obligation9 0) true) (= (obligation3 0) true))))
(assert (not (and (= (obligation9 0) true) (= (obligation2 0) true))))
(assert (not (and (= (obligation9 0) true) (= (obligation5 0) true))))
(assert (not (and (= (obligation9 0) true) (= (obligation4 0) true))))
(assert (not (and (= (obligation9 0) true) (= (obligation1 0) true))))
(assert (not (and (= (obligation9 0) true) (= (obligation12 0) true))))
(assert (not (and (= (obligation9 0) true) (= (obligation11 0) true))))
(assert (not (and (= (obligation9 0) true) (= (obligation10 0) true))))
(assert (not (and (= (obligation8 0) true) (= (obligation3 0) true))))
(assert (not (and (= (obligation8 0) true) (= (obligation2 0) true))))
(assert (not (and (= (obligation8 0) true) (= (obligation5 0) true))))
(assert (not (and (= (obligation8 0) true) (= (obligation4 0) true))))
(assert (not (and (= (obligation8 0) true) (= (obligation1 0) true))))
(assert (not (and (= (obligation8 0) true) (= (obligation12 0) true))))
(assert (not (and (= (obligation8 0) true) (= (obligation11 0) true))))
(assert (not (and (= (obligation8 0) true) (= (obligation10 0) true))))
(assert (not (and (= (obligation3 0) true) (= (obligation2 0) true))))
(assert (not (and (= (obligation3 0) true) (= (obligation5 0) true))))
(assert (not (and (= (obligation3 0) true) (= (obligation4 0) true))))
(assert (not (and (= (obligation3 0) true) (= (obligation1 0) true))))
(assert (not (and (= (obligation3 0) true) (= (obligation12 0) true))))
(assert (not (and (= (obligation3 0) true) (= (obligation11 0) true))))
(assert (not (and (= (obligation3 0) true) (= (obligation10 0) true))))
(assert (not (and (= (obligation2 0) true) (= (obligation5 0) true))))
(assert (not (and (= (obligation2 0) true) (= (obligation4 0) true))))
(assert (not (and (= (obligation2 0) true) (= (obligation1 0) true))))
(assert (not (and (= (obligation2 0) true) (= (obligation12 0) true))))
(assert (not (and (= (obligation2 0) true) (= (obligation11 0) true))))
(assert (not (and (= (obligation2 0) true) (= (obligation10 0) true))))
(assert (not (and (= (obligation5 0) true) (= (obligation4 0) true))))
(assert (not (and (= (obligation5 0) true) (= (obligation1 0) true))))
(assert (not (and (= (obligation5 0) true) (= (obligation12 0) true))))
(assert (not (and (= (obligation5 0) true) (= (obligation11 0) true))))
(assert (not (and (= (obligation5 0) true) (= (obligation10 0) true))))
(assert (not (and (= (obligation4 0) true) (= (obligation1 0) true))))
(assert (not (and (= (obligation4 0) true) (= (obligation12 0) true))))
(assert (not (and (= (obligation4 0) true) (= (obligation11 0) true))))
(assert (not (and (= (obligation4 0) true) (= (obligation10 0) true))))
(assert (not (and (= (obligation1 0) true) (= (obligation12 0) true))))
(assert (not (and (= (obligation1 0) true) (= (obligation11 0) true))))
(assert (not (and (= (obligation1 0) true) (= (obligation10 0) true))))
(assert (not (and (= (obligation12 0) true) (= (obligation11 0) true))))
(assert (not (and (= (obligation12 0) true) (= (obligation10 0) true))))
(assert (not (and (= (obligation11 0) true) (= (obligation10 0) true))))

; AT LEAST ONE
(assert (or(= (obligation13 0) true)(= (obligation7 0) true)(= (obligation6 0) true)(= (obligation9 0) true)(= (obligation8 0) true)(= (obligation3 0) true)(= (obligation2 0) true)(= (obligation5 0) true)(= (obligation4 0) true)(= (obligation1 0) true)(= (obligation12 0) true)(= (obligation11 0) true)(= (obligation10 0) true)))


;QUERY
(assert (= (obligation7 0) true))


(check-sat)
(get-value (obligation13))
(get-value (obligation7))
(get-value (obligation6))
(get-value (obligation9))
(get-value (obligation8))
(get-value (obligation3))
(get-value (obligation2))
(get-value (obligation5))
(get-value (obligation4))
(get-value (obligation1))
(get-value (obligation12))
(get-value (obligation11))
(get-value (obligation10))
