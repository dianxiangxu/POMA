(set-logic ALL)
(set-option :produce-models true)
(declare-fun SetToCheckUA () (Set (Tuple Int Int)))
(assert (= SetToCheckUA (insert (mkTuple 26 26) 
(mkTuple 15 15) 
(mkTuple 2 2) 
(mkTuple 3 3) 
(mkTuple 18 18) 
(mkTuple 22 22) 
(mkTuple 1 1) 
(mkTuple 11 11) 
(mkTuple 25 25) 
(mkTuple 14 14) 
(mkTuple 21 21) 
(mkTuple 24 24) 
(mkTuple 13 13) 
(mkTuple 28 28) 
(mkTuple 20 20) 
(mkTuple 16 16) 
(mkTuple 5 5) 
(mkTuple 12 12) 
(mkTuple 4 4) 
(mkTuple 7 7) 
(mkTuple 6 6) 
(mkTuple 8 8) 
(mkTuple 9 9) 
(mkTuple 19 19) 
(singleton (mkTuple 23 23)))))
(declare-fun SetToCheckAT () (Set (Tuple Int Int)))
(assert (= SetToCheckAT (insert (mkTuple 27 27) 
(singleton (mkTuple 17 17)))))
(declare-fun ASSIGN* (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN* 0) (insert (mkTuple 2 10) 
(mkTuple 16 21) 
(mkTuple 26 26) 
(mkTuple 18 10) 
(mkTuple 26 10) 
(mkTuple 19 10) 
(mkTuple 18 18) 
(mkTuple 11 11) 
(mkTuple 25 25) 
(mkTuple 1 10) 
(mkTuple 4 10) 
(mkTuple 17 17) 
(mkTuple 14 24) 
(mkTuple 9 12) 
(mkTuple 10 10) 
(mkTuple 27 10) 
(mkTuple 24 24) 
(mkTuple 16 10) 
(mkTuple 5 10) 
(mkTuple 20 10) 
(mkTuple 28 26) 
(mkTuple 15 22) 
(mkTuple 18 2) 
(mkTuple 15 10) 
(mkTuple 28 10) 
(mkTuple 12 12) 
(mkTuple 17 10) 
(mkTuple 27 27) 
(mkTuple 6 10) 
(mkTuple 5 23) 
(mkTuple 21 10) 
(mkTuple 7 26) 
(mkTuple 7 10) 
(mkTuple 22 10) 
(mkTuple 15 15) 
(mkTuple 2 2) 
(mkTuple 3 3) 
(mkTuple 22 22) 
(mkTuple 8 15) 
(mkTuple 13 10) 
(mkTuple 1 1) 
(mkTuple 23 10) 
(mkTuple 25 15) 
(mkTuple 8 22) 
(mkTuple 14 14) 
(mkTuple 19 6) 
(mkTuple 8 10) 
(mkTuple 14 10) 
(mkTuple 21 21) 
(mkTuple 9 10) 
(mkTuple 11 10) 
(mkTuple 13 13) 
(mkTuple 28 28) 
(mkTuple 20 20) 
(mkTuple 16 16) 
(mkTuple 24 10) 
(mkTuple 5 5) 
(mkTuple 1 11) 
(mkTuple 4 4) 
(mkTuple 7 7) 
(mkTuple 3 10) 
(mkTuple 6 6) 
(mkTuple 8 8) 
(mkTuple 9 9) 
(mkTuple 25 22) 
(mkTuple 25 10) 
(mkTuple 23 23) 
(mkTuple 19 19) 
(singleton (mkTuple 12 10)))))
(declare-fun ASSIGN (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN 0) (insert (mkTuple 2 10) 
(mkTuple 16 21) 
(mkTuple 26 26) 
(mkTuple 26 10) 
(mkTuple 18 18) 
(mkTuple 11 11) 
(mkTuple 25 25) 
(mkTuple 4 10) 
(mkTuple 17 17) 
(mkTuple 14 24) 
(mkTuple 9 12) 
(mkTuple 27 10) 
(mkTuple 24 24) 
(mkTuple 20 10) 
(mkTuple 28 26) 
(mkTuple 15 22) 
(mkTuple 18 2) 
(mkTuple 15 10) 
(mkTuple 12 12) 
(mkTuple 17 10) 
(mkTuple 27 27) 
(mkTuple 6 10) 
(mkTuple 5 23) 
(mkTuple 21 10) 
(mkTuple 7 26) 
(mkTuple 22 10) 
(mkTuple 15 15) 
(mkTuple 2 2) 
(mkTuple 3 3) 
(mkTuple 22 22) 
(mkTuple 13 10) 
(mkTuple 8 15) 
(mkTuple 1 1) 
(mkTuple 25 15) 
(mkTuple 23 10) 
(mkTuple 19 6) 
(mkTuple 14 14) 
(mkTuple 21 21) 
(mkTuple 11 10) 
(mkTuple 13 13) 
(mkTuple 28 28) 
(mkTuple 20 20) 
(mkTuple 16 16) 
(mkTuple 24 10) 
(mkTuple 5 5) 
(mkTuple 1 11) 
(mkTuple 4 4) 
(mkTuple 7 7) 
(mkTuple 3 10) 
(mkTuple 6 6) 
(mkTuple 8 8) 
(mkTuple 9 9) 
(mkTuple 19 19) 
(mkTuple 23 23) 
(singleton (mkTuple 12 10)))))
(declare-fun ASSOC (Int) (Set (Tuple Int Int Int)))

(assert (= (ASSOC 0) (insert(mkTuple 12 30 27) 
(mkTuple 15 32 27) 
(mkTuple 15 29 12) 
(mkTuple 15 34 12) 
(mkTuple 26 35 15) 
(mkTuple 26 37 15) 
(mkTuple 26 44 27) 
(mkTuple 26 33 27) 
(singleton (mkTuple 26 36 27)))))

(declare-fun NODES () (Set (Tuple Int Int)))
(assert (= NODES (insert (mkTuple 1 1) 
(mkTuple 2 2) 
(mkTuple 3 3) 
(mkTuple 4 4) 
(mkTuple 5 5) 
(mkTuple 6 6) 
(mkTuple 7 7) 
(mkTuple 8 8) 
(mkTuple 9 9) 
(mkTuple 10 10) 
(mkTuple 11 11) 
(mkTuple 12 12) 
(mkTuple 13 13) 
(mkTuple 14 14) 
(mkTuple 15 15) 
(mkTuple 16 16) 
(mkTuple 17 17) 
(mkTuple 18 18) 
(mkTuple 19 19) 
(mkTuple 20 20) 
(mkTuple 21 21) 
(mkTuple 22 22) 
(mkTuple 23 23) 
(mkTuple 24 24) 
(mkTuple 25 25) 
(mkTuple 26 26) 
(mkTuple 27 27) 
(singleton (mkTuple 28 28))))) 


(declare-fun obligation7 (Int) Bool)
(declare-fun obligation6 (Int) Bool)
(declare-fun obligation3 (Int) Bool)
(declare-fun obligation2 (Int) Bool)
(declare-fun obligation5 (Int) Bool)
(declare-fun obligation4 (Int) Bool)
(declare-fun obligation1 (Int) Bool)
;--------------------------------------------------------------------------------------------------------------------
;STEP1

; 5.1 a->PRE
(declare-fun obligation1U_0 () Int)
(declare-fun obligation1UA_0 () Int)
(declare-fun obligation1AT_0 () Int)
(declare-fun obligation1UO_0 () Int)
(declare-fun obligation1ar_0 () Int)
(declare-fun obligation1S_0 () Int)
(declare-fun obligation1T_0 () Int)
(assert (>= obligation1U_0 0))
(assert (>= obligation1UA_0 0))
(assert (>= obligation1AT_0 0))
(assert (>= obligation1UO_0 0))
(assert (= obligation1ar_0 44))
(assert (= obligation1S_0 26))
(assert (= obligation1T_0 27))
(assert (=> (= (obligation1 0) true) (and
 (member (mkTuple  obligation1U_0 obligation1S_0) (ASSIGN* 0))
 (member (mkTuple  obligation1S_0 obligation1UA_0) (ASSIGN* 0))
(member (mkTuple obligation1UA_0 obligation1ar_0 obligation1AT_0) (ASSOC 0))
 (member (mkTuple  obligation1UO_0 obligation1AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation1T_0 obligation1UO_0) (ASSIGN* 0))
 (distinct obligation1S_0 obligation1U_0)
)))


(declare-fun obligation2U_0 () Int)
(declare-fun obligation2UA_0 () Int)
(declare-fun obligation2AT_0 () Int)
(declare-fun obligation2UO_0 () Int)
(declare-fun obligation2ar_0 () Int)
(declare-fun obligation2S_0 () Int)
(declare-fun obligation2T_0 () Int)
(assert (>= obligation2U_0 0))
(assert (>= obligation2UA_0 0))
(assert (>= obligation2AT_0 0))
(assert (>= obligation2UO_0 0))
(assert (= obligation2ar_0 47))
(assert (= obligation2S_0 2))
(assert (= obligation2T_0 27))
(assert (=> (= (obligation2 0) true) (and
 (member (mkTuple  obligation2U_0 obligation2S_0) (ASSIGN* 0))
 (member (mkTuple  obligation2S_0 obligation2UA_0) (ASSIGN* 0))
(member (mkTuple obligation2UA_0 obligation2ar_0 obligation2AT_0) (ASSOC 0))
 (member (mkTuple  obligation2UO_0 obligation2AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation2T_0 obligation2UO_0) (ASSIGN* 0))
 (distinct obligation2S_0 obligation2U_0)
)))


(declare-fun obligation3U_0 () Int)
(declare-fun obligation3UA_0 () Int)
(declare-fun obligation3AT_0 () Int)
(declare-fun obligation3UO_0 () Int)
(declare-fun obligation3ar_0 () Int)
(declare-fun obligation3S_0 () Int)
(declare-fun obligation3T_0 () Int)
(assert (>= obligation3U_0 0))
(assert (>= obligation3UA_0 0))
(assert (>= obligation3AT_0 0))
(assert (>= obligation3UO_0 0))
(assert (= obligation3ar_0 47))
(assert (= obligation3S_0 6))
(assert (= obligation3T_0 27))
(assert (=> (= (obligation3 0) true) (and
 (member (mkTuple  obligation3U_0 obligation3S_0) (ASSIGN* 0))
 (member (mkTuple  obligation3S_0 obligation3UA_0) (ASSIGN* 0))
(member (mkTuple obligation3UA_0 obligation3ar_0 obligation3AT_0) (ASSOC 0))
 (member (mkTuple  obligation3UO_0 obligation3AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation3T_0 obligation3UO_0) (ASSIGN* 0))
 (distinct obligation3S_0 obligation3U_0)
)))


(declare-fun obligation4U_0 () Int)
(declare-fun obligation4UA_0 () Int)
(declare-fun obligation4AT_0 () Int)
(declare-fun obligation4UO_0 () Int)
(declare-fun obligation4ar_0 () Int)
(declare-fun obligation4S_0 () Int)
(declare-fun obligation4T_0 () Int)
(assert (>= obligation4U_0 0))
(assert (>= obligation4UA_0 0))
(assert (>= obligation4AT_0 0))
(assert (>= obligation4UO_0 0))
(assert (= obligation4ar_0 47))
(assert (= obligation4S_0 21))
(assert (= obligation4T_0 27))
(assert (=> (= (obligation4 0) true) (and
 (member (mkTuple  obligation4U_0 obligation4S_0) (ASSIGN* 0))
 (member (mkTuple  obligation4S_0 obligation4UA_0) (ASSIGN* 0))
(member (mkTuple obligation4UA_0 obligation4ar_0 obligation4AT_0) (ASSOC 0))
 (member (mkTuple  obligation4UO_0 obligation4AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation4T_0 obligation4UO_0) (ASSIGN* 0))
 (distinct obligation4S_0 obligation4U_0)
)))


(declare-fun obligation5U_0 () Int)
(declare-fun obligation5UA_0 () Int)
(declare-fun obligation5AT_0 () Int)
(declare-fun obligation5UO_0 () Int)
(declare-fun obligation5ar_0 () Int)
(declare-fun obligation5S_0 () Int)
(declare-fun obligation5T_0 () Int)
(assert (>= obligation5U_0 0))
(assert (>= obligation5UA_0 0))
(assert (>= obligation5AT_0 0))
(assert (>= obligation5UO_0 0))
(assert (= obligation5ar_0 44))
(assert (= obligation5S_0 23))
(assert (= obligation5T_0 27))
(assert (=> (= (obligation5 0) true) (and
 (member (mkTuple  obligation5U_0 obligation5S_0) (ASSIGN* 0))
 (member (mkTuple  obligation5S_0 obligation5UA_0) (ASSIGN* 0))
(member (mkTuple obligation5UA_0 obligation5ar_0 obligation5AT_0) (ASSOC 0))
 (member (mkTuple  obligation5UO_0 obligation5AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation5T_0 obligation5UO_0) (ASSIGN* 0))
 (distinct obligation5S_0 obligation5U_0)
)))


(declare-fun obligation6U_0 () Int)
(declare-fun obligation6UA_0 () Int)
(declare-fun obligation6AT_0 () Int)
(declare-fun obligation6UO_0 () Int)
(declare-fun obligation6ar_0 () Int)
(declare-fun obligation6S_0 () Int)
(declare-fun obligation6T_0 () Int)
(assert (>= obligation6U_0 0))
(assert (>= obligation6UA_0 0))
(assert (>= obligation6AT_0 0))
(assert (>= obligation6UO_0 0))
(assert (= obligation6ar_0 45))
(assert (= obligation6S_0 24))
(assert (= obligation6T_0 27))
(assert (=> (= (obligation6 0) true) (and
 (member (mkTuple  obligation6U_0 obligation6S_0) (ASSIGN* 0))
 (member (mkTuple  obligation6S_0 obligation6UA_0) (ASSIGN* 0))
(member (mkTuple obligation6UA_0 obligation6ar_0 obligation6AT_0) (ASSOC 0))
 (member (mkTuple  obligation6UO_0 obligation6AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation6T_0 obligation6UO_0) (ASSIGN* 0))
 (distinct obligation6S_0 obligation6U_0)
)))


(declare-fun obligation7U_0 () Int)
(declare-fun obligation7UA_0 () Int)
(declare-fun obligation7AT_0 () Int)
(declare-fun obligation7UO_0 () Int)
(declare-fun obligation7ar_0 () Int)
(declare-fun obligation7S_0 () Int)
(declare-fun obligation7T_0 () Int)
(assert (>= obligation7U_0 0))
(assert (>= obligation7UA_0 0))
(assert (>= obligation7AT_0 0))
(assert (>= obligation7UO_0 0))
(assert (= obligation7ar_0 47))
(assert (= obligation7S_0 11))
(assert (= obligation7T_0 27))
(assert (=> (= (obligation7 0) true) (and
 (member (mkTuple  obligation7U_0 obligation7S_0) (ASSIGN* 0))
 (member (mkTuple  obligation7S_0 obligation7UA_0) (ASSIGN* 0))
(member (mkTuple obligation7UA_0 obligation7ar_0 obligation7AT_0) (ASSOC 0))
 (member (mkTuple  obligation7UO_0 obligation7AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation7T_0 obligation7UO_0) (ASSIGN* 0))
 (distinct obligation7S_0 obligation7U_0)
)))




; 5.2 a->Eff


(assert (=> (=(obligation1 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation1 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(assert (=> (= (obligation1 0) true)(= (ASSOC 1) (setminus(setminus(union(union(ASSOC 0)(singleton(mkTuple 2 47 27)))(singleton(mkTuple 2 43 27)))(singleton(mkTuple 26 47 27)))(singleton(mkTuple 26 43 27))))))




(assert (=> (=(obligation2 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation2 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(assert (=> (= (obligation2 0) true)(= (ASSOC 1) (setminus(union(ASSOC 0)(singleton(mkTuple 6 47 27)))(singleton(mkTuple 2 47 27))))))




(assert (=> (=(obligation3 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation3 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(assert (=> (= (obligation3 0) true)(= (ASSOC 1) (setminus(union(ASSOC 0)(singleton(mkTuple 21 47 27)))(singleton(mkTuple 6 47 27))))))




(assert (=> (=(obligation4 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation4 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(assert (=> (= (obligation4 0) true)(= (ASSOC 1) (setminus(union(ASSOC 0)(singleton(mkTuple 23 44 27)))(singleton(mkTuple 21 47 27))))))




(assert (=> (=(obligation5 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation5 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(assert (=> (= (obligation5 0) true)(= (ASSOC 1) (setminus(union(ASSOC 0)(singleton(mkTuple 24 45 27)))(singleton(mkTuple 23 44 27))))))




(assert (=> (=(obligation6 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation6 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(assert (=> (= (obligation6 0) true)(= (ASSOC 1) (setminus(union(ASSOC 0)(singleton(mkTuple 11 47 27)))(singleton(mkTuple 24 45 27))))))




(assert (=> (=(obligation7 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation7 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(assert (=> (= (obligation7 0) true)(= (ASSOC 1) (setminus(union(ASSOC 0)(singleton(mkTuple 13 47 27)))(singleton(mkTuple 11 47 27))))))




; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 1) (ASSIGN* 0))
(or 
(= (obligation7 0) true)(= (obligation6 0) true)(= (obligation3 0) true)(= (obligation2 0) true)(= (obligation5 0) true)(= (obligation4 0) true)(= (obligation1 0) true))))
(assert (=> (distinct (ASSIGN 1) (ASSIGN 0))
(or (= (obligation7 0) true)(= (obligation6 0) true)(= (obligation3 0) true)(= (obligation2 0) true)(= (obligation5 0) true)(= (obligation4 0) true)(= (obligation1 0) true))))
(assert (=> (distinct (ASSOC 1) (ASSOC 0))
(or 
(= (obligation7 0) true)(= (obligation6 0) true)(= (obligation3 0) true)(= (obligation2 0) true)(= (obligation5 0) true)(= (obligation4 0) true)(= (obligation1 0) true))))


; 5.4 Exactly one naive


; AT MOST ONE
(assert (not (and (= (obligation7 0) true) (= (obligation6 0) true))))
(assert (not (and (= (obligation7 0) true) (= (obligation3 0) true))))
(assert (not (and (= (obligation7 0) true) (= (obligation2 0) true))))
(assert (not (and (= (obligation7 0) true) (= (obligation5 0) true))))
(assert (not (and (= (obligation7 0) true) (= (obligation4 0) true))))
(assert (not (and (= (obligation7 0) true) (= (obligation1 0) true))))
(assert (not (and (= (obligation6 0) true) (= (obligation3 0) true))))
(assert (not (and (= (obligation6 0) true) (= (obligation2 0) true))))
(assert (not (and (= (obligation6 0) true) (= (obligation5 0) true))))
(assert (not (and (= (obligation6 0) true) (= (obligation4 0) true))))
(assert (not (and (= (obligation6 0) true) (= (obligation1 0) true))))
(assert (not (and (= (obligation3 0) true) (= (obligation2 0) true))))
(assert (not (and (= (obligation3 0) true) (= (obligation5 0) true))))
(assert (not (and (= (obligation3 0) true) (= (obligation4 0) true))))
(assert (not (and (= (obligation3 0) true) (= (obligation1 0) true))))
(assert (not (and (= (obligation2 0) true) (= (obligation5 0) true))))
(assert (not (and (= (obligation2 0) true) (= (obligation4 0) true))))
(assert (not (and (= (obligation2 0) true) (= (obligation1 0) true))))
(assert (not (and (= (obligation5 0) true) (= (obligation4 0) true))))
(assert (not (and (= (obligation5 0) true) (= (obligation1 0) true))))
(assert (not (and (= (obligation4 0) true) (= (obligation1 0) true))))

; AT LEAST ONE
(assert (or(= (obligation7 0) true)(= (obligation6 0) true)(= (obligation3 0) true)(= (obligation2 0) true)(= (obligation5 0) true)(= (obligation4 0) true)(= (obligation1 0) true)))


(assert 
(= (obligation3 0) true)
)
(check-sat)
(get-value (obligation7))
(get-value (obligation6))
(get-value (obligation3))
(get-value (obligation2))
(get-value (obligation5))
(get-value (obligation4))
(get-value (obligation1))
(get-value (obligation1U_0))
(get-value (obligation1UA_0))
(get-value (obligation1AT_0))
(get-value (obligation1UO_0))
(get-value (obligation1S_0))
(get-value (obligation1T_0))
(get-value (obligation1ar_0))
(get-value (obligation2U_0))
(get-value (obligation2UA_0))
(get-value (obligation2AT_0))
(get-value (obligation2UO_0))
(get-value (obligation2S_0))
(get-value (obligation2T_0))
(get-value (obligation2ar_0))
(get-value (obligation3U_0))
(get-value (obligation3UA_0))
(get-value (obligation3AT_0))
(get-value (obligation3UO_0))
(get-value (obligation3S_0))
(get-value (obligation3T_0))
(get-value (obligation3ar_0))
(get-value (obligation4U_0))
(get-value (obligation4UA_0))
(get-value (obligation4AT_0))
(get-value (obligation4UO_0))
(get-value (obligation4S_0))
(get-value (obligation4T_0))
(get-value (obligation4ar_0))
(get-value (obligation5U_0))
(get-value (obligation5UA_0))
(get-value (obligation5AT_0))
(get-value (obligation5UO_0))
(get-value (obligation5S_0))
(get-value (obligation5T_0))
(get-value (obligation5ar_0))
(get-value (obligation6U_0))
(get-value (obligation6UA_0))
(get-value (obligation6AT_0))
(get-value (obligation6UO_0))
(get-value (obligation6S_0))
(get-value (obligation6T_0))
(get-value (obligation6ar_0))
(get-value (obligation7U_0))
(get-value (obligation7UA_0))
(get-value (obligation7AT_0))
(get-value (obligation7UO_0))
(get-value (obligation7S_0))
(get-value (obligation7T_0))
(get-value (obligation7ar_0))
