(set-logic ALL)
(set-option :produce-models true)
(declare-fun USERS () (Set (Tuple Int Int)))
(assert (= USERS (insert (mkTuple 13 13) 
(mkTuple 17 17) 
(mkTuple 8 8) 
(mkTuple 3 3) 
(mkTuple 11 11) 
(singleton (mkTuple 1 1)))))
(declare-fun ASSIGN* (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN* 0) (insert (mkTuple 13 16) 
(mkTuple 18 16) 
(mkTuple 13 4) 
(mkTuple 2 16) 
(mkTuple 15 15) 
(mkTuple 2 2) 
(mkTuple 6 16) 
(mkTuple 3 3) 
(mkTuple 17 2) 
(mkTuple 18 18) 
(mkTuple 1 1) 
(mkTuple 11 11) 
(mkTuple 14 14) 
(mkTuple 14 16) 
(mkTuple 1 16) 
(mkTuple 5 12) 
(mkTuple 17 17) 
(mkTuple 8 9) 
(mkTuple 10 16) 
(mkTuple 10 10) 
(mkTuple 5 16) 
(mkTuple 9 16) 
(mkTuple 4 16) 
(mkTuple 13 13) 
(mkTuple 15 16) 
(mkTuple 16 16) 
(mkTuple 11 16) 
(mkTuple 11 14) 
(mkTuple 8 16) 
(mkTuple 5 5) 
(mkTuple 12 12) 
(mkTuple 4 4) 
(mkTuple 3 16) 
(mkTuple 7 7) 
(mkTuple 1 7) 
(mkTuple 3 10) 
(mkTuple 12 16) 
(mkTuple 17 16) 
(mkTuple 6 6) 
(mkTuple 8 8) 
(mkTuple 9 9) 
(singleton (mkTuple 7 16)))))
(declare-fun ASSIGN (Int) (Set (Tuple Int Int)))
(assert (= (ASSIGN 0) (insert (mkTuple 18 16) 
(mkTuple 13 4) 
(mkTuple 2 16) 
(mkTuple 15 15) 
(mkTuple 2 2) 
(mkTuple 6 16) 
(mkTuple 3 3) 
(mkTuple 17 2) 
(mkTuple 18 18) 
(mkTuple 11 11) 
(mkTuple 1 1) 
(mkTuple 14 14) 
(mkTuple 14 16) 
(mkTuple 5 12) 
(mkTuple 17 17) 
(mkTuple 8 9) 
(mkTuple 10 16) 
(mkTuple 10 10) 
(mkTuple 9 16) 
(mkTuple 4 16) 
(mkTuple 13 13) 
(mkTuple 15 16) 
(mkTuple 11 14) 
(mkTuple 5 5) 
(mkTuple 12 12) 
(mkTuple 4 4) 
(mkTuple 7 7) 
(mkTuple 12 16) 
(mkTuple 1 7) 
(mkTuple 3 10) 
(mkTuple 6 6) 
(mkTuple 8 8) 
(mkTuple 9 9) 
(singleton (mkTuple 7 16)))))
(declare-fun ASSOC (Int) (Set (Tuple Int Int Int)))

(assert (= (ASSOC 0) (insert(mkTuple 4 20 15) 
(mkTuple 14 19 15) 
(mkTuple 4 20 15) 
(mkTuple 14 19 15) 
(mkTuple 4 20 15) 
(singleton (mkTuple 14 19 15)))))

(declare-fun NODES () (Set (Tuple Int Int)))
(assert (= NODES (insert (mkTuple 1 1) 
(mkTuple 2 2) 
(mkTuple 3 3) 
(mkTuple 4 4) 
(mkTuple 5 5) 
(mkTuple 6 6) 
(mkTuple 7 7) 
(mkTuple 8 8) 
(mkTuple 9 9) 
(mkTuple 10 10) 
(mkTuple 11 11) 
(mkTuple 12 12) 
(mkTuple 13 13) 
(mkTuple 14 14) 
(mkTuple 15 15) 
(mkTuple 16 16) 
(mkTuple 17 17) 
(singleton (mkTuple 18 18))))) 


(declare-fun obligation2 (Int) Bool)
(declare-fun obligation1 (Int) Bool)
;--------------------------------------------------------------------------------------------------------------------
;STEP1

; 5.1 a->PRE
(declare-fun obligation1U_0 () Int)
(declare-fun obligation1UA_0 () Int)
(declare-fun obligation1AT_0 () Int)
(declare-fun obligation1UO_0 () Int)
(declare-fun obligation1ar_0 () Int)
(declare-fun obligation1S_0 () Int)
(declare-fun obligation1T_0 () Int)
(assert (>= obligation1U_0 0))
(assert (>= obligation1UA_0 0))
(assert (>= obligation1AT_0 0))
(assert (>= obligation1UO_0 0))
(assert (or (= obligation1ar_0 19)
))
(assert (= obligation1S_0 14))
(assert (= obligation1T_0 15))
(assert (=> (= (obligation1 0) true) (and
 (member (mkTuple  obligation1U_0 obligation1S_0) (ASSIGN* 0))
 (member (mkTuple  obligation1U_0 obligation1UA_0) (ASSIGN* 0))
(member (mkTuple obligation1UA_0 obligation1ar_0 obligation1AT_0) (ASSOC 0))
 (member (mkTuple  obligation1UO_0 obligation1T_0) (ASSIGN* 0))
 (member (mkTuple  obligation1UO_0 obligation1AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation1U_0 obligation1U_0) USERS)
 (distinct obligation1S_0 obligation1U_0)
)))


(declare-fun obligation2U_0 () Int)
(declare-fun obligation2UA_0 () Int)
(declare-fun obligation2AT_0 () Int)
(declare-fun obligation2UO_0 () Int)
(declare-fun obligation2ar_0 () Int)
(declare-fun obligation2S_0 () Int)
(declare-fun obligation2T_0 () Int)
(assert (>= obligation2U_0 0))
(assert (>= obligation2UA_0 0))
(assert (>= obligation2AT_0 0))
(assert (>= obligation2UO_0 0))
(assert (or (= obligation2ar_0 19)
))
(assert (= obligation2S_0 14))
(assert (= obligation2T_0 15))
(assert (=> (= (obligation2 0) true) (and
 (member (mkTuple  obligation2U_0 obligation2S_0) (ASSIGN* 0))
 (member (mkTuple  obligation2U_0 obligation2UA_0) (ASSIGN* 0))
(member (mkTuple obligation2UA_0 obligation2ar_0 obligation2AT_0) (ASSOC 0))
 (member (mkTuple  obligation2UO_0 obligation2T_0) (ASSIGN* 0))
 (member (mkTuple  obligation2UO_0 obligation2AT_0) (ASSIGN* 0))
 (member (mkTuple  obligation2U_0 obligation2U_0) USERS)
 (distinct obligation2S_0 obligation2U_0)
)))




; 5.2 a->Eff


(assert (=> (= (obligation1 0) true)(= (ASSIGN* 1)(union (singleton (mkTuple 1 7)) (union (join (singleton (mkTuple 1 7)) (join (singleton (mkTuple 7 7)) (ASSIGN* 0))) (ASSIGN* 0))))))
(assert (=> (= (obligation1 0) true)(= (ASSIGN 1)( union (ASSIGN 0) (singleton (mkTuple 1 7))))))

(assert (=> (=(obligation1 0) true) (= (ASSOC 1) (ASSOC 0))))




(assert (=> (=(obligation2 0) true) (= (ASSIGN* 1) (ASSIGN* 0))))
(assert (=> (=(obligation2 0) true) (= (ASSIGN 1) (ASSIGN 0))))
(assert (=> (= (obligation2 0) true)(= (ASSOC 1) (union(union(ASSOC 0)(singleton(mkTuple 7 21 15)))(singleton(mkTuple 7 22 15))))))




; 5.3 change implies the execution
(assert (=> (distinct (ASSIGN* 1) (ASSIGN* 0))
(or 
(= (obligation2 0) true)(= (obligation1 0) true))))
(assert (=> (distinct (ASSIGN 1) (ASSIGN 0))
(or (= (obligation2 0) true)(= (obligation1 0) true))))
(assert (=> (distinct (ASSOC 1) (ASSOC 0))
(or 
(= (obligation2 0) true)(= (obligation1 0) true))))


; 5.4 Exactly one naive
; AT LEAST ONE
(assert (or(= (obligation2 0) true)(= (obligation1 0) true)))

;PRE PROPERTY
(declare-fun queryVARu () Int)
(declare-fun queryCONSTPERMITUA_?u_?ar_PendingCases_0 () Int)
(declare-fun queryVARar () Int)
(declare-fun queryCONSTPERMITAT_?u_?ar_PendingCases_0 () Int)
(assert 
(and(member (mkTuple queryVARu  queryCONSTPERMITUA_?u_?ar_PendingCases_0 ) (ASSIGN* 0))(member (mkTuple  queryCONSTPERMITUA_?u_?ar_PendingCases_0  queryVARar  queryCONSTPERMITAT_?u_?ar_PendingCases_0 ) (ASSOC 0))(member (mkTuple  -1  queryCONSTPERMITAT_?u_?ar_PendingCases_0 ) (ASSIGN* 0)))
)

;POST PROPERTY
(check-sat)
(get-value (obligation2))
(get-value (obligation1))
(get-value (obligation1U_0))
(get-value (obligation1UA_0))
(get-value (obligation1AT_0))
(get-value (obligation1UO_0))
(get-value (obligation1S_0))
(get-value (obligation1T_0))
(get-value (obligation1ar_0))
(get-value (obligation2U_0))
(get-value (obligation2UA_0))
(get-value (obligation2AT_0))
(get-value (obligation2UO_0))
(get-value (obligation2S_0))
(get-value (obligation2T_0))
(get-value (obligation2ar_0))
(get-value (queryVARu))
(get-value (queryVARar))
(get-value ((ASSIGN 0)))
(get-value ((ASSIGN 1)))
(get-value ((ASSOC 0)))
(get-value ((ASSOC 1)))
