(set-logic ALL_SUPPORTED)
(set-option :produce-models true)
(declare-fun Associations (Int) (Set (Tuple String String String)))
(declare-fun SetToCheckUA () (Set (Tuple String String)))
(declare-fun SetToCheckAT () (Set (Tuple String String)))
(assert (= SetToCheckUA (insert (mkTuple "UA_test1" "UA_test1") (mkTuple "UA1_1" "UA1_1") (mkTuple "UA2_2" "UA2_2") (singleton (mkTuple "UA3_1_2" "UA3_1_2")))))
(assert (= SetToCheckAT (insert (mkTuple "Container1" "Container1")  (singleton (mkTuple "Container2" "Container2")))))
(declare-fun Containment (Int) (Set (Tuple String String)))
(declare-fun Tclosure(Int) (Set (Tuple String String)))
(declare-fun AssociationsForUA (Int) (Set (Tuple String String String)))
(declare-fun UA_U_Reachability (Int) (Set (Tuple String String)))
(declare-fun AT_Reachability (Int) (Set (Tuple String String)))
(declare-fun AssignmentAdded (Int) (Set (Tuple String String)))
(declare-fun AssociationAdded (Int) (Set (Tuple String String String)))
(declare-fun FinalJoin(Int) (Set (Tuple String String String)))
(declare-fun SetToCheckUAOnlyAR () (Set (Tuple String String)))
(declare-fun FinalJoinOnlyAR (Int) (Set (Tuple String String String)))
(declare-fun SetToCheckATOnlyAR () (Set (Tuple String String)))
(assert (= SetToCheckUAOnlyAR (insert (mkTuple "UA_test1" "0") (mkTuple "UA1_1" "0") (mkTuple "UA2_2" "0") (singleton (mkTuple "UA3_1_2" "0")))))

(assert (= SetToCheckATOnlyAR (insert (mkTuple "Container1" "0")  (singleton (mkTuple "Container2" "0")))))

(assert (= (Tclosure 0) (tclosure (Containment 0))))
(assert (= (Associations 0) (insert (mkTuple "UA_test1" "test3" "Container1") (singleton (mkTuple "UA_test1" "test2" "Container2")))))
(assert (= (Containment 0) (insert (mkTuple "UA1_1" "UA1_1") (mkTuple "UA_test1" "UA_test1")(mkTuple "UA1_1" "Container1") (mkTuple "Container1" "Container1") (mkTuple "Container1" "PC1") (mkTuple "UA_test1" "PC1")(mkTuple "Container2" "Container2") (mkTuple "UA2_2" "Container2") (mkTuple "UA2_2" "UA2_2") (mkTuple "UA3_1_2" "Container2") (mkTuple "UA3_1_2" "UA3_1_2") (mkTuple "UA3_1_2" "Container1") (mkTuple "Container1" "PC1") (singleton (mkTuple "Container2" "PC1")))))

(assert (= (UA_U_Reachability 0) (join SetToCheckUA (Tclosure 0))))
(assert (= (AT_Reachability 0) (join SetToCheckAT (Tclosure 0))))
(assert (= (AssociationsForUA 0) (join (UA_U_Reachability 0) (Associations 0)) ))
(assert (= (FinalJoin 0) (join (AssociationsForUA 0) (transpose (AT_Reachability 0))) ))
(assert (= (FinalJoinOnlyAR 0) (join (transpose (join (FinalJoin 0)  SetToCheckATOnlyAR)) SetToCheckUAOnlyAR)))

(assert (member (mkTuple "UA1_1" "test1" "Container1") (FinalJoin 13)))
(assert (= (Tclosure 1) (tclosure (Containment 1))))
(assert (or(and (= (Containment 1) (union(singleton(mkTuple "UA2_2" "UA_test1"))
(Containment 0))) (= (Associations 1) (Associations 0)))(and (= (Containment 1) (union(singleton(mkTuple "UA1_1" "UA_test1"))
(Containment 0))) (= (Associations 1) (Associations 0)))))

(assert (= (UA_U_Reachability 1) (join SetToCheckUA (Tclosure 1))))
(assert (= (AT_Reachability 1) (join SetToCheckAT (Tclosure 1))))
(assert (= (AssociationsForUA 1) (join (UA_U_Reachability 1) (Associations 1)) ))
(assert (= (FinalJoin 1) (join (AssociationsForUA 1) (transpose (AT_Reachability 1))) ))
(assert (= (FinalJoinOnlyAR 1) (join (transpose (join (FinalJoin 1)  SetToCheckATOnlyAR)) SetToCheckUAOnlyAR)))
(assert (= (Tclosure 2) (tclosure (Containment 2))))
(assert (or(and (= (Containment 2) (union(singleton(mkTuple "UA2_2" "UA_test1"))
(Containment 1))) (= (Associations 2) (Associations 1)))(and (= (Containment 2) (union(singleton(mkTuple "UA1_1" "UA_test1"))
(Containment 1))) (= (Associations 2) (Associations 1)))))

(assert (= (UA_U_Reachability 2) (join SetToCheckUA (Tclosure 2))))
(assert (= (AT_Reachability 2) (join SetToCheckAT (Tclosure 2))))
(assert (= (AssociationsForUA 2) (join (UA_U_Reachability 2) (Associations 2)) ))
(assert (= (FinalJoin 2) (join (AssociationsForUA 2) (transpose (AT_Reachability 2))) ))
(assert (= (FinalJoinOnlyAR 2) (join (transpose (join (FinalJoin 2)  SetToCheckATOnlyAR)) SetToCheckUAOnlyAR)))
(assert (= (Tclosure 3) (tclosure (Containment 3))))
(assert (or(and (= (Containment 3) (union(singleton(mkTuple "UA2_2" "UA_test1"))
(Containment 2))) (= (Associations 3) (Associations 2)))(and (= (Containment 3) (union(singleton(mkTuple "UA1_1" "UA_test1"))
(Containment 2))) (= (Associations 3) (Associations 2)))))

(assert (= (UA_U_Reachability 3) (join SetToCheckUA (Tclosure 3))))
(assert (= (AT_Reachability 3) (join SetToCheckAT (Tclosure 3))))
(assert (= (AssociationsForUA 3) (join (UA_U_Reachability 3) (Associations 3)) ))
(assert (= (FinalJoin 3) (join (AssociationsForUA 3) (transpose (AT_Reachability 3))) ))
(assert (= (FinalJoinOnlyAR 3) (join (transpose (join (FinalJoin 3)  SetToCheckATOnlyAR)) SetToCheckUAOnlyAR)))
(assert (= (Tclosure 4) (tclosure (Containment 4))))
(assert (or(and (= (Containment 4) (union(singleton(mkTuple "UA2_2" "UA_test1"))
(Containment 3))) (= (Associations 4) (Associations 3)))(and (= (Containment 4) (union(singleton(mkTuple "UA1_1" "UA_test1"))
(Containment 3))) (= (Associations 4) (Associations 3)))))

(assert (= (UA_U_Reachability 4) (join SetToCheckUA (Tclosure 4))))
(assert (= (AT_Reachability 4) (join SetToCheckAT (Tclosure 4))))
(assert (= (AssociationsForUA 4) (join (UA_U_Reachability 4) (Associations 4)) ))
(assert (= (FinalJoin 4) (join (AssociationsForUA 4) (transpose (AT_Reachability 4))) ))
(assert (= (FinalJoinOnlyAR 4) (join (transpose (join (FinalJoin 4)  SetToCheckATOnlyAR)) SetToCheckUAOnlyAR)))
(assert (= (Tclosure 5) (tclosure (Containment 5))))
(assert (or(and (= (Containment 5) (union(singleton(mkTuple "UA2_2" "UA_test1"))
(Containment 4))) (= (Associations 5) (Associations 4)))(and (= (Containment 5) (union(singleton(mkTuple "UA1_1" "UA_test1"))
(Containment 4))) (= (Associations 5) (Associations 4)))))

(assert (= (UA_U_Reachability 5) (join SetToCheckUA (Tclosure 5))))
(assert (= (AT_Reachability 5) (join SetToCheckAT (Tclosure 5))))
(assert (= (AssociationsForUA 5) (join (UA_U_Reachability 5) (Associations 5)) ))
(assert (= (FinalJoin 5) (join (AssociationsForUA 5) (transpose (AT_Reachability 5))) ))
(assert (= (FinalJoinOnlyAR 5) (join (transpose (join (FinalJoin 5)  SetToCheckATOnlyAR)) SetToCheckUAOnlyAR)))
(assert (= (Tclosure 6) (tclosure (Containment 6))))
(assert (or(and (= (Containment 6) (union(singleton(mkTuple "UA2_2" "UA_test1"))
(Containment 5))) (= (Associations 6) (Associations 5)))(and (= (Containment 6) (union(singleton(mkTuple "UA1_1" "UA_test1"))
(Containment 5))) (= (Associations 6) (Associations 5)))))

(assert (= (UA_U_Reachability 6) (join SetToCheckUA (Tclosure 6))))
(assert (= (AT_Reachability 6) (join SetToCheckAT (Tclosure 6))))
(assert (= (AssociationsForUA 6) (join (UA_U_Reachability 6) (Associations 6)) ))
(assert (= (FinalJoin 6) (join (AssociationsForUA 6) (transpose (AT_Reachability 6))) ))
(assert (= (FinalJoinOnlyAR 6) (join (transpose (join (FinalJoin 6)  SetToCheckATOnlyAR)) SetToCheckUAOnlyAR)))
(assert (= (Tclosure 7) (tclosure (Containment 7))))
(assert (or(and (= (Containment 7) (union(singleton(mkTuple "UA2_2" "UA_test1"))
(Containment 6))) (= (Associations 7) (Associations 6)))(and (= (Containment 7) (union(singleton(mkTuple "UA1_1" "UA_test1"))
(Containment 6))) (= (Associations 7) (Associations 6)))))

(assert (= (UA_U_Reachability 7) (join SetToCheckUA (Tclosure 7))))
(assert (= (AT_Reachability 7) (join SetToCheckAT (Tclosure 7))))
(assert (= (AssociationsForUA 7) (join (UA_U_Reachability 7) (Associations 7)) ))
(assert (= (FinalJoin 7) (join (AssociationsForUA 7) (transpose (AT_Reachability 7))) ))
(assert (= (FinalJoinOnlyAR 7) (join (transpose (join (FinalJoin 7)  SetToCheckATOnlyAR)) SetToCheckUAOnlyAR)))
(assert (= (Tclosure 8) (tclosure (Containment 8))))
(assert (or(and (= (Containment 8) (union(singleton(mkTuple "UA2_2" "UA_test1"))
(Containment 7))) (= (Associations 8) (Associations 7)))(and (= (Containment 8) (union(singleton(mkTuple "UA1_1" "UA_test1"))
(Containment 7))) (= (Associations 8) (Associations 7)))))

(assert (= (UA_U_Reachability 8) (join SetToCheckUA (Tclosure 8))))
(assert (= (AT_Reachability 8) (join SetToCheckAT (Tclosure 8))))
(assert (= (AssociationsForUA 8) (join (UA_U_Reachability 8) (Associations 8)) ))
(assert (= (FinalJoin 8) (join (AssociationsForUA 8) (transpose (AT_Reachability 8))) ))
(assert (= (FinalJoinOnlyAR 8) (join (transpose (join (FinalJoin 8)  SetToCheckATOnlyAR)) SetToCheckUAOnlyAR)))
(assert (= (Tclosure 9) (tclosure (Containment 9))))
(assert (or(and (= (Containment 9) (union(singleton(mkTuple "UA2_2" "UA_test1"))
(Containment 8))) (= (Associations 9) (Associations 8)))(and (= (Containment 9) (union(singleton(mkTuple "UA1_1" "UA_test1"))
(Containment 8))) (= (Associations 9) (Associations 8)))))

(assert (= (UA_U_Reachability 9) (join SetToCheckUA (Tclosure 9))))
(assert (= (AT_Reachability 9) (join SetToCheckAT (Tclosure 9))))
(assert (= (AssociationsForUA 9) (join (UA_U_Reachability 9) (Associations 9)) ))
(assert (= (FinalJoin 9) (join (AssociationsForUA 9) (transpose (AT_Reachability 9))) ))
(assert (= (FinalJoinOnlyAR 9) (join (transpose (join (FinalJoin 9)  SetToCheckATOnlyAR)) SetToCheckUAOnlyAR)))
(assert (= (Tclosure 10) (tclosure (Containment 10))))
(assert (or(and (= (Containment 10) (union(singleton(mkTuple "UA2_2" "UA_test1"))
(Containment 9))) (= (Associations 10) (Associations 9)))(and (= (Containment 10) (union(singleton(mkTuple "UA1_1" "UA_test1"))
(Containment 9))) (= (Associations 10) (Associations 9)))))

(assert (= (UA_U_Reachability 10) (join SetToCheckUA (Tclosure 10))))
(assert (= (AT_Reachability 10) (join SetToCheckAT (Tclosure 10))))
(assert (= (AssociationsForUA 10) (join (UA_U_Reachability 10) (Associations 10)) ))
(assert (= (FinalJoin 10) (join (AssociationsForUA 10) (transpose (AT_Reachability 10))) ))
(assert (= (FinalJoinOnlyAR 10) (join (transpose (join (FinalJoin 10)  SetToCheckATOnlyAR)) SetToCheckUAOnlyAR)))
(assert (= (Tclosure 11) (tclosure (Containment 11))))
(assert (or(and (= (Containment 11) (union(singleton(mkTuple "UA2_2" "UA_test1"))
(Containment 10))) (= (Associations 11) (Associations 10)))(and (= (Containment 11) (union(singleton(mkTuple "UA1_1" "UA_test1"))
(Containment 10))) (= (Associations 11) (Associations 10)))))

(assert (= (UA_U_Reachability 11) (join SetToCheckUA (Tclosure 11))))
(assert (= (AT_Reachability 11) (join SetToCheckAT (Tclosure 11))))
(assert (= (AssociationsForUA 11) (join (UA_U_Reachability 11) (Associations 11)) ))
(assert (= (FinalJoin 11) (join (AssociationsForUA 11) (transpose (AT_Reachability 11))) ))
(assert (= (FinalJoinOnlyAR 11) (join (transpose (join (FinalJoin 11)  SetToCheckATOnlyAR)) SetToCheckUAOnlyAR)))
(assert (= (Tclosure 12) (tclosure (Containment 12))))
(assert (or(and (= (Containment 12) (union(singleton(mkTuple "UA2_2" "UA_test1"))
(Containment 11))) (= (Associations 12) (Associations 11)))(and (= (Containment 12) (union(singleton(mkTuple "UA1_1" "UA_test1"))
(Containment 11))) (= (Associations 12) (Associations 11)))))

(assert (= (UA_U_Reachability 12) (join SetToCheckUA (Tclosure 12))))
(assert (= (AT_Reachability 12) (join SetToCheckAT (Tclosure 12))))
(assert (= (AssociationsForUA 12) (join (UA_U_Reachability 12) (Associations 12)) ))
(assert (= (FinalJoin 12) (join (AssociationsForUA 12) (transpose (AT_Reachability 12))) ))
(assert (= (FinalJoinOnlyAR 12) (join (transpose (join (FinalJoin 12)  SetToCheckATOnlyAR)) SetToCheckUAOnlyAR)))
(assert (= (Tclosure 13) (tclosure (Containment 13))))
(assert (or(and (= (Containment 13) (union(singleton(mkTuple "UA2_2" "UA_test1"))
(Containment 12))) (= (Associations 13) (Associations 12)))(and (= (Containment 13) (union(singleton(mkTuple "UA1_1" "UA_test1"))
(Containment 12))) (= (Associations 13) (Associations 12)))))

(assert (= (UA_U_Reachability 13) (join SetToCheckUA (Tclosure 13))))
(assert (= (AT_Reachability 13) (join SetToCheckAT (Tclosure 13))))
(assert (= (AssociationsForUA 13) (join (UA_U_Reachability 13) (Associations 13)) ))
(assert (= (FinalJoin 13) (join (AssociationsForUA 13) (transpose (AT_Reachability 13))) ))
(assert (= (FinalJoinOnlyAR 13) (join (transpose (join (FinalJoin 13)  SetToCheckATOnlyAR)) SetToCheckUAOnlyAR)))

(check-sat)
(get-model)