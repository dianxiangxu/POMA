(set-logic ALL_SUPPORTED)
(set-option :produce-models true)
(declare-fun Containment () (Set (Tuple String String)))
(declare-fun Tclosure () (Set (Tuple String String)))
(declare-fun Associations () (Set (Tuple String String String)))
(declare-fun UA_U_Reachability () (Set (Tuple String String)))
(declare-fun AT_Reachability () (Set (Tuple String String)))

(assert (= Associations (insert(mkTuple "teller" "r" "accounts") 
(mkTuple "teller" "w" "accounts") 
(mkTuple "branch1" "r" "products1") 
(singleton (mkTuple "branch1" "w" "products1")))))

(assert (= Containment (insert (mkTuple "assets" "assets") 
(mkTuple "products2" "products2") 
(mkTuple "accounts1" "accounts1") 
(mkTuple "teller" "teller") 
(mkTuple "products" "branch-contraints") 
(mkTuple "teller" "position-contraints") 
(mkTuple "a11" "accounts1") 
(mkTuple "l12" "loans1") 
(mkTuple "loans1" "loans1") 
(mkTuple "loans1" "products1") 
(mkTuple "loans" "assets") 
(mkTuple "loans" "loans") 
(mkTuple "branch1" "branch-contraints") 
(mkTuple "loans2" "loans") 
(mkTuple "accounts1" "products1") 
(mkTuple "products" "products") 
(mkTuple "l11" "loans1") 
(mkTuple "accounts" "accounts") 
(mkTuple "u1" "teller") 
(mkTuple "products1" "products") 
(mkTuple "products2" "products") 
(mkTuple "loans2" "loans2") 
(mkTuple "u1" "branch1") 
(mkTuple "accounts2" "accounts2") 
(mkTuple "products1" "products1") 
(mkTuple "branch1" "branch1") 
(mkTuple "loans2" "products2") 
(mkTuple "accounts" "assets") 
(mkTuple "loans1" "loans") 
(mkTuple "accounts1" "accounts") 
(mkTuple "accounts2" "products2") 
(mkTuple "assets" "position-contraints") 
(mkTuple "a21" "accounts2") 
(singleton (mkTuple "accounts2" "accounts")))))

(assert (= Tclosure (tclosure Containment)))

(declare-fun SingletonToCheckUA () (Set (Tuple String String)))
(declare-fun SingletonToCheckAT () (Set (Tuple String String)))
(push 1)
(assert (= SingletonToCheckUA (singleton (mkTuple  "branch1" "branch1"))))
(assert (= SingletonToCheckAT (singleton (mkTuple "products1" "products1"))))
(assert (= UA_U_Reachability (join SingletonToCheckUA Tclosure )))
(assert (= AT_Reachability (join SingletonToCheckAT Tclosure )))
(declare-fun AssociationsForUA () (Set (Tuple String String String)))
(assert (= AssociationsForUA (join UA_U_Reachability Associations) ))
(declare-fun FinalJoin () (Set (Tuple String String String)))
(assert (= FinalJoin (join AssociationsForUA (transpose AT_Reachability)) ))
(check-sat)
(get-model)
(get-value (FinalJoin))
(pop 1)
