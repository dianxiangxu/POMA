(set-logic ALL_SUPPORTED)
(set-option :produce-models true)
(declare-fun Containment () (Set (Tuple String String)))
(declare-fun Containment_Prohibition () (Set (Tuple String String)))
(declare-fun Tclosure () (Set (Tuple String String)))
(declare-fun Tclosure_Prohibition () (Set (Tuple String String)))
(declare-fun Associations () (Set (Tuple String String String)))
(declare-fun UA_U_Reachability () (Set (Tuple String String)))
(declare-fun AT_Reachability () (Set (Tuple String String)))

(assert (= Associations (insert(mkTuple "HRManager" "hire" "Engineer") 
(mkTuple "EngineerManager" "approve" "LeaveRecord") 
(mkTuple "EngineerManager" "disapprove" "LeaveRecord") 
(singleton (mkTuple "Engineer" "read" "LeaveRecord")))))

(assert (= Containment (insert (mkTuple "EngineerManager" "EngineerManager") 
(mkTuple "Tom" "Engineer") 
(mkTuple "EngineerManager" "Engineer") 
(mkTuple "Engineer" "Engineer") 
(mkTuple "LeaveRecord" "HRSystem") 
(mkTuple "John" "EngineerManager") 
(mkTuple "Engineer" "HRSystem") 
(mkTuple "LeaveRequest1" "LeaveRecord") 
(mkTuple "Cris" "HRManager") 
(mkTuple "LeaveRecord" "LeaveRecord") 
(mkTuple "HRManager" "HRSystem") 
(singleton (mkTuple "HRManager" "HRManager")))))

(assert (= Containment_Prohibition (insert (mkTuple "Tom" "Engineer") 
(mkTuple "EngineerManager" "Engineer") 
(mkTuple "LeaveRecord" "HRSystem") 
(mkTuple "John" "EngineerManager") 
(mkTuple "Engineer" "HRSystem") 
(mkTuple "LeaveRequest1" "LeaveRecord") 
(mkTuple "Cris" "HRManager") 
(singleton (mkTuple "HRManager" "HRSystem")))))

(assert (= Tclosure (tclosure Containment)))
(assert (= Tclosure_Prohibition (tclosure Containment_Prohibition)))

(declare-fun SetToCheckUA () (Set (Tuple String String)))
(declare-fun SetToCheckAT () (Set (Tuple String String)))

(assert (= SetToCheckUA (singleton (mkTuple "John" "John"))))

(assert (= SetToCheckAT (singleton (mkTuple "LeaveRecord" "LeaveRecord"))))

(assert (= UA_U_Reachability (join SetToCheckUA Tclosure )))
(assert (= AT_Reachability (join SetToCheckAT Tclosure )))
(declare-fun AssociationsForUA () (Set (Tuple String String String)))
(assert (= AssociationsForUA (join UA_U_Reachability Associations) ))
(declare-fun FinalJoin () (Set (Tuple String String String)))
(assert (= FinalJoin (join AssociationsForUA (transpose AT_Reachability)) ))

(declare-fun AssociationsForProhibitions () (Set (Tuple String String String)))

(assert (= AssociationsForProhibitions (insert(mkTuple "hire" "hire" "Engineer") 
(mkTuple "approve" "approve" "LeaveRecord") 
(mkTuple "disapprove" "disapprove" "LeaveRecord") 
(singleton (mkTuple "read" "read" "LeaveRecord")))))


(check-sat)
(get-model)
(get-value (FinalJoin))