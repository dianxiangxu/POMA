(set-logic ALL_SUPPORTED)
(set-option :produce-unsat-cores true)
(set-option :produce-models true)
(set-option :produce-assignments true)
(declare-fun Containment () (Set (Tuple String String)))
(declare-fun Tclosure () (Set (Tuple String String)))
(declare-datatypes ((association 0))
   (((rec (UA String) (access_rights (Set String)) (AT String)))))
(define-sort SetAssociation () (Set association)) (declare-const setAssociation SetAssociation)
(declare-fun access_for_data-steward_assets () (Set String))
(declare-fun size_access_for_data-steward_assets () Int)
(assert (= size_access_for_data-steward_assets 2))
(assert (member "offline" access_for_data-steward_assets))
(assert (member "online" access_for_data-steward_assets))
(assert (= size_access_for_data-steward_assets (card access_for_data-steward_assets)))
(declare-const data-steward_assets association)
(assert (and (= (UA data-steward_assets) "data-steward") (= (access_rights data-steward_assets) access_for_data-steward_assets) (= (AT data-steward_assets) "assets")))
(assert (member data-steward_assets setAssociation))
(declare-fun access_for_loan-officer_loans () (Set String))
(declare-fun size_access_for_loan-officer_loans () Int)
(assert (= size_access_for_loan-officer_loans 2))
(assert (member "r" access_for_loan-officer_loans))
(assert (member "w" access_for_loan-officer_loans))
(assert (= size_access_for_loan-officer_loans (card access_for_loan-officer_loans)))
(declare-const loan-officer_loans association)
(assert (and (= (UA loan-officer_loans) "loan-officer") (= (access_rights loan-officer_loans) access_for_loan-officer_loans) (= (AT loan-officer_loans) "loans")))
(assert (member loan-officer_loans setAssociation))
(declare-fun access_for_teller_accounts () (Set String))
(declare-fun size_access_for_teller_accounts () Int)
(assert (= size_access_for_teller_accounts 2))
(assert (member "r" access_for_teller_accounts))
(assert (member "w" access_for_teller_accounts))
(assert (= size_access_for_teller_accounts (card access_for_teller_accounts)))
(declare-const teller_accounts association)
(assert (and (= (UA teller_accounts) "teller") (= (access_rights teller_accounts) access_for_teller_accounts) (= (AT teller_accounts) "accounts")))
(assert (member teller_accounts setAssociation))
(declare-fun access_for_branch2_products2 () (Set String))
(declare-fun size_access_for_branch2_products2 () Int)
(assert (= size_access_for_branch2_products2 2))
(assert (member "r" access_for_branch2_products2))
(assert (member "w" access_for_branch2_products2))
(assert (= size_access_for_branch2_products2 (card access_for_branch2_products2)))
(declare-const branch2_products2 association)
(assert (and (= (UA branch2_products2) "branch2") (= (access_rights branch2_products2) access_for_branch2_products2) (= (AT branch2_products2) "products2")))
(assert (member branch2_products2 setAssociation))
(declare-fun access_for_hq_products () (Set String))
(declare-fun size_access_for_hq_products () Int)
(assert (= size_access_for_hq_products 2))
(assert (member "offline" access_for_hq_products))
(assert (member "online" access_for_hq_products))
(assert (= size_access_for_hq_products (card access_for_hq_products)))
(declare-const hq_products association)
(assert (and (= (UA hq_products) "hq") (= (access_rights hq_products) access_for_hq_products) (= (AT hq_products) "products")))
(assert (member hq_products setAssociation))
(declare-fun access_for_branch1_products1 () (Set String))
(declare-fun size_access_for_branch1_products1 () Int)
(assert (= size_access_for_branch1_products1 2))
(assert (member "r" access_for_branch1_products1))
(assert (member "w" access_for_branch1_products1))
(assert (= size_access_for_branch1_products1 (card access_for_branch1_products1)))
(declare-const branch1_products1 association)
(assert (and (= (UA branch1_products1) "branch1") (= (access_rights branch1_products1) access_for_branch1_products1) (= (AT branch1_products1) "products1")))
(assert (member branch1_products1 setAssociation))
(assert (= 6 (card setAssociation)))
(assert (= Containment (insert (mkTuple "a11" "accounts1") (mkTuple "l12" "loans1") (mkTuple "loans1" "products1") (mkTuple "loans" "assets") (mkTuple "loans2" "loans") (mkTuple "accounts1" "products1") (mkTuple "loan-officer" "position-constraints") (mkTuple "l11" "loans1") (mkTuple "u1" "teller") (mkTuple "products1" "products") (mkTuple "products2" "products") (mkTuple "hq" "branch-constraints") (mkTuple "branch1" "branch-constraints") (mkTuple "u2" "branch2") (mkTuple "u3" "branch2") (mkTuple "u1" "branch1") (mkTuple "u3" "loan-officer") (mkTuple "u2" "branch1") (mkTuple "u2" "teller") (mkTuple "loans2" "products2") (mkTuple "accounts" "assets") (mkTuple "u4" "hq") (mkTuple "loans1" "loans") (mkTuple "accounts1" "accounts") (mkTuple "products" "branch-constraints") (mkTuple "accounts2" "products2") (mkTuple "teller" "position-constraints") (mkTuple "data-steward" "position-constraints") (mkTuple "assets" "position-constraints") (mkTuple "branch2" "branch-constraints") (mkTuple "u4" "data-steward") (mkTuple "a21" "accounts2") (singleton (mkTuple "accounts2" "accounts")))))
(assert (= Tclosure (tclosure Containment)))
(echo "u1 a11")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 a11")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 a11")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 a11")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 l12")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l12" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 l12")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l12" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 l12")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l12" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 l12")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l12" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 l11")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 l11")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 l11")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 l11")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 u2")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 u2")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 u2")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 u2")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 u3")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 u3")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 u3")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 u3")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 u4")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u4" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 u4")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u4" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 u4")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u4" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 u4")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u4" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 a21")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a21" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 a21")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a21" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 a21")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a21" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u1 a21")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a21" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 a11")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 a11")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 a11")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 a11")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 l12")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l12" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 l12")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l12" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 l12")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l12" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 l12")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l12" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 l11")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 l11")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 l11")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 l11")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 u1")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 u1")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 u1")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 u1")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 u3")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 u3")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 u3")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 u3")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 u4")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u4" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 u4")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u4" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 u4")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u4" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 u4")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u4" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 a21")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a21" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 a21")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a21" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 a21")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a21" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u2 a21")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a21" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 a11")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 a11")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 a11")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 a11")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 l12")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l12" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 l12")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l12" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 l12")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l12" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 l12")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l12" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 l11")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 l11")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 l11")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 l11")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 u1")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 u1")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 u1")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 u1")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 u2")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 u2")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 u2")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 u2")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 u4")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u4" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 u4")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u4" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 u4")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u4" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 u4")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u4" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 a21")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a21" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 a21")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a21" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 a21")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a21" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u3 a21")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a21" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 a11")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 a11")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 a11")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 a11")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 l12")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l12" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 l12")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l12" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 l12")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l12" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 l12")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l12" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 l11")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 l11")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 l11")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 l11")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "l11" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 u1")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 u1")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 u1")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 u1")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 u2")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 u2")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 u2")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 u2")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 u3")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 u3")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 u3")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 u3")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "u3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 a21")
(push 1)
(declare-fun ar () String)
(assert (= "offline" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a21" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 a21")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a21" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 a21")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a21" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "u4 a21")
(push 1)
(declare-fun ar () String)
(assert (= "online" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "u4" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "a21" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

