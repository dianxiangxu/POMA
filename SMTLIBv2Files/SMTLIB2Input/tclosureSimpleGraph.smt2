(set-logic ALL_SUPPORTED)
(set-option :produce-unsat-cores true)
(set-option :produce-models true)
(set-option :produce-assignments true)
(declare-fun Containment () (Set (Tuple String String)))
(declare-fun Tclosure () (Set (Tuple String String)))
(declare-datatypes ((association 0))
   (((rec (UA String) (access_rights (Set String)) (AT String)))))
(define-sort SetAssociation () (Set association)) (declare-const setAssociation SetAssociation)
(declare-fun access_for_ua1_ua3 () (Set String))
(declare-fun size_access_for_ua1_ua3 () Int)
(assert (= size_access_for_ua1_ua3 1))
(assert (member "add" access_for_ua1_ua3))
(assert (= size_access_for_ua1_ua3 (card access_for_ua1_ua3)))
(declare-const ua1_ua3 association)
(assert (and (= (UA ua1_ua3) "UA1") (= (access_rights ua1_ua3) access_for_ua1_ua3) (= (AT ua1_ua3) "UA3")))
(assert (member ua1_ua3 setAssociation))
(declare-fun access_for_ua1_ua2 () (Set String))
(declare-fun size_access_for_ua1_ua2 () Int)
(assert (= size_access_for_ua1_ua2 1))
(assert (member "test" access_for_ua1_ua2))
(assert (= size_access_for_ua1_ua2 (card access_for_ua1_ua2)))
(declare-const ua1_ua2 association)
(assert (and (= (UA ua1_ua2) "UA1") (= (access_rights ua1_ua2) access_for_ua1_ua2) (= (AT ua1_ua2) "UA2")))
(assert (member ua1_ua2 setAssociation))
(declare-fun access_for_ua1_oa1 () (Set String))
(declare-fun size_access_for_ua1_oa1 () Int)
(assert (= size_access_for_ua1_oa1 1))
(assert (member "w" access_for_ua1_oa1))
(assert (= size_access_for_ua1_oa1 (card access_for_ua1_oa1)))
(declare-const ua1_oa1 association)
(assert (and (= (UA ua1_oa1) "UA1") (= (access_rights ua1_oa1) access_for_ua1_oa1) (= (AT ua1_oa1) "OA1")))
(assert (member ua1_oa1 setAssociation))
(declare-fun access_for_ua2_oa2 () (Set String))
(declare-fun size_access_for_ua2_oa2 () Int)
(assert (= size_access_for_ua2_oa2 2))
(assert (member "r" access_for_ua2_oa2))
(assert (member "x" access_for_ua2_oa2))
(assert (= size_access_for_ua2_oa2 (card access_for_ua2_oa2)))
(declare-const ua2_oa2 association)
(assert (and (= (UA ua2_oa2) "UA2") (= (access_rights ua2_oa2) access_for_ua2_oa2) (= (AT ua2_oa2) "OA2")))
(assert (member ua2_oa2 setAssociation))
(assert (= 4 (card setAssociation)))
(assert (= Containment (insert (mkTuple "OA1" "OA2") (mkTuple "U2" "UA2") (mkTuple "O1" "OA1") (mkTuple "O2" "OA2") (mkTuple "UA1" "UA2") (mkTuple "UA3" "PC1") (mkTuple "U3" "UA3") (mkTuple "UA2" "PC1") (mkTuple "OA2" "PC1") (singleton (mkTuple "U1" "UA1")))))
(assert (= Tclosure (tclosure Containment)))
(echo "U1 O1")
(push 1)
(declare-fun ar () String)
(assert (= "add" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U1 O1")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U1 O1")
(push 1)
(declare-fun ar () String)
(assert (= "test" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U1 O1")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U1 O1")
(push 1)
(declare-fun ar () String)
(assert (= "x" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U1 O2")
(push 1)
(declare-fun ar () String)
(assert (= "add" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U1 O2")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U1 O2")
(push 1)
(declare-fun ar () String)
(assert (= "test" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U1 O2")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U1 O2")
(push 1)
(declare-fun ar () String)
(assert (= "x" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U1 U2")
(push 1)
(declare-fun ar () String)
(assert (= "add" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U1 U2")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U1 U2")
(push 1)
(declare-fun ar () String)
(assert (= "test" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U1 U2")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U1 U2")
(push 1)
(declare-fun ar () String)
(assert (= "x" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U1 U3")
(push 1)
(declare-fun ar () String)
(assert (= "add" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U1 U3")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U1 U3")
(push 1)
(declare-fun ar () String)
(assert (= "test" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U1 U3")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U1 U3")
(push 1)
(declare-fun ar () String)
(assert (= "x" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U1" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U2 O1")
(push 1)
(declare-fun ar () String)
(assert (= "add" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U2 O1")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U2 O1")
(push 1)
(declare-fun ar () String)
(assert (= "test" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U2 O1")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U2 O1")
(push 1)
(declare-fun ar () String)
(assert (= "x" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U2 O2")
(push 1)
(declare-fun ar () String)
(assert (= "add" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U2 O2")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U2 O2")
(push 1)
(declare-fun ar () String)
(assert (= "test" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U2 O2")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U2 O2")
(push 1)
(declare-fun ar () String)
(assert (= "x" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U2 U1")
(push 1)
(declare-fun ar () String)
(assert (= "add" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U2 U1")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U2 U1")
(push 1)
(declare-fun ar () String)
(assert (= "test" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U2 U1")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U2 U1")
(push 1)
(declare-fun ar () String)
(assert (= "x" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U2 U3")
(push 1)
(declare-fun ar () String)
(assert (= "add" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U2 U3")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U2 U3")
(push 1)
(declare-fun ar () String)
(assert (= "test" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U2 U3")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U2 U3")
(push 1)
(declare-fun ar () String)
(assert (= "x" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U2" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U3" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U3 O1")
(push 1)
(declare-fun ar () String)
(assert (= "add" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U3 O1")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U3 O1")
(push 1)
(declare-fun ar () String)
(assert (= "test" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U3 O1")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U3 O1")
(push 1)
(declare-fun ar () String)
(assert (= "x" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U3 O2")
(push 1)
(declare-fun ar () String)
(assert (= "add" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U3 O2")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U3 O2")
(push 1)
(declare-fun ar () String)
(assert (= "test" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U3 O2")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U3 O2")
(push 1)
(declare-fun ar () String)
(assert (= "x" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "O2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U3 U1")
(push 1)
(declare-fun ar () String)
(assert (= "add" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U3 U1")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U3 U1")
(push 1)
(declare-fun ar () String)
(assert (= "test" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U3 U1")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U3 U1")
(push 1)
(declare-fun ar () String)
(assert (= "x" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U1" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U3 U2")
(push 1)
(declare-fun ar () String)
(assert (= "add" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U3 U2")
(push 1)
(declare-fun ar () String)
(assert (= "r" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U3 U2")
(push 1)
(declare-fun ar () String)
(assert (= "test" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U3 U2")
(push 1)
(declare-fun ar () String)
(assert (= "w" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

(echo "U3 U2")
(push 1)
(declare-fun ar () String)
(assert (= "x" ar))
(assert (exists ((relationAssociation association)) (and (= relationAssociation (choose setAssociation)) (member (mkTuple "U3" (UA relationAssociation)) Tclosure) (member ar (access_rights relationAssociation)) (member (mkTuple "U2" (AT relationAssociation)) Tclosure))))
(check-sat)
(get-value (ar))
(pop 1)

