(set-logic ALL_SUPPORTED)
(set-option :produce-models true)
(declare-fun Associations (Int) (Set (Tuple String String String)))
(declare-fun SetToCheckUA () (Set (Tuple String String)))
(declare-fun SetToCheckAT () (Set (Tuple String String)))
(assert (= SetToCheckUA (insert (mkTuple "UA_test1" "UA_test1") (mkTuple "UA1_1" "UA1_1") (mkTuple "UA2_2" "UA2_2") (singleton (mkTuple "UA3_1_2" "UA3_1_2")))))
(assert (= SetToCheckAT (insert (mkTuple "Container1" "Container1")  (singleton (mkTuple "Container2" "Container2")))))
(declare-fun Containment (Int) (Set (Tuple String String)))
(declare-fun Tclosure(Int) (Set (Tuple String String)))
(declare-fun AssociationsForUA (Int) (Set (Tuple String String String)))
(declare-fun UA_U_Reachability (Int) (Set (Tuple String String)))
(declare-fun AT_Reachability (Int) (Set (Tuple String String)))
(declare-fun AssignmentAdded (Int) (Set (Tuple String String)))
(declare-fun AssociationAdded (Int) (Set (Tuple String String String)))
(declare-fun FinalJoin(Int) (Set (Tuple String String String)))
(declare-fun SetToCheckUAOnlyAR () (Set (Tuple String String)))
(declare-fun FinalJoinOnlyAR (Int) (Set (Tuple String String String)))
(declare-fun SetToCheckATOnlyAR () (Set (Tuple String String)))
(assert (= SetToCheckUAOnlyAR (insert (mkTuple "UA_test1" "0") (mkTuple "UA1_1" "0") (mkTuple "UA2_2" "0") (singleton (mkTuple "UA3_1_2" "0")))))

(assert (= SetToCheckATOnlyAR (insert (mkTuple "Container1" "0")  (singleton (mkTuple "Container2" "0")))))

(assert (= (Tclosure 0) (tclosure (Containment 0))))
(assert (= (Associations 0) (insert (mkTuple "UA_test1" "test1" "Container1") (mkTuple "UA_test1" "test3" "Container1") (singleton (mkTuple "UA_test1" "test2" "Container2")))))
(assert (= (Containment 0) (insert (mkTuple "UA1_1" "UA1_1") (mkTuple "UA_test1" "UA_test1")(mkTuple "UA1_1" "Container1") (mkTuple "Container1" "Container1") (mkTuple "Container1" "PC1") (mkTuple "UA_test1" "PC1")(mkTuple "Container2" "Container2") (mkTuple "UA2_2" "Container2") (mkTuple "UA2_2" "UA2_2") (mkTuple "UA3_1_2" "Container2") (mkTuple "UA3_1_2" "UA3_1_2") (mkTuple "UA3_1_2" "Container1") (mkTuple "Container1" "PC1") (singleton (mkTuple "Container2" "PC1")))))

(assert (= (UA_U_Reachability 0) (join SetToCheckUA (Tclosure 0))))
(assert (= (AT_Reachability 0) (join SetToCheckAT (Tclosure 0))))
(assert (= (AssociationsForUA 0) (join (UA_U_Reachability 0) (Associations 0)) ))
(assert (= (FinalJoin 0) (join (AssociationsForUA 0) (transpose (AT_Reachability 0))) ))
(assert (= (FinalJoinOnlyAR 0) (join (transpose (join (FinalJoin 0)  SetToCheckATOnlyAR)) SetToCheckUAOnlyAR)))

(assert (member (mkTuple "UA1_1" "test1" "Container1") (FinalJoin 1)))
(assert (= (Tclosure 1) (tclosure (Containment 1))))
(assert (or(and (= (Containment 1) (union(singleton(mkTuple "UA2_2" "UA_test1"))
(Containment 0))) (= (Associations 1) (Associations 0)))(and (= (Containment 1) (union(singleton(mkTuple "UA1_1" "UA_test1"))
(Containment 0))) (= (Associations 1) (Associations 0)))))

(assert (= (UA_U_Reachability 1) (join SetToCheckUA (Tclosure 1))))
(assert (= (AT_Reachability 1) (join SetToCheckAT (Tclosure 1))))
(assert (= (AssociationsForUA 1) (join (UA_U_Reachability 1) (Associations 1)) ))
(assert (= (FinalJoin 1) (join (AssociationsForUA 1) (transpose (AT_Reachability 1))) ))
(assert (= (FinalJoinOnlyAR 1) (join (transpose (join (FinalJoin 1)  SetToCheckATOnlyAR)) SetToCheckUAOnlyAR)))

(check-sat)
(get-model)