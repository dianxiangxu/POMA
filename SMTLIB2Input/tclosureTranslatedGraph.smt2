(set-logic ALL_SUPPORTED)
(set-option :produce-unsat-cores true)
(set-option :produce-models true)
(set-option :produce-assignments true)
(declare-fun UA_containment () (Set (Tuple String String)))
(declare-fun OA_containment () (Set (Tuple String String)))
(declare-fun UA_tclosure () (Set (Tuple String String)))
(declare-fun OA_tclosure () (Set (Tuple String String)))
(declare-datatypes ((association 0))
   (((rec (UA String) (access_rights (Set String)) (AT String)))))
(declare-fun access_for_ua1_ua3 () (Set String))
(declare-fun size_access_for_ua1_ua3 () Int)
(assert (= size_access_for_ua1_ua3 1))
(assert (member "add" access_for_ua1_ua3))
(assert (= size_access_for_ua1_ua3 (card access_for_ua1_ua3)))
(declare-const ua1_ua3 association)
(assert (and (= (UA ua1_ua3) "ua1") (= (access_rights ua1_ua3) access_for_ua1_ua3) (= (AT ua1_ua3) "ua3")))
(declare-fun access_for_ua1_oa1 () (Set String))
(declare-fun size_access_for_ua1_oa1 () Int)
(assert (= size_access_for_ua1_oa1 1))
(assert (member "w" access_for_ua1_oa1))
(assert (= size_access_for_ua1_oa1 (card access_for_ua1_oa1)))
(declare-const ua1_oa1 association)
(assert (and (= (UA ua1_oa1) "ua1") (= (access_rights ua1_oa1) access_for_ua1_oa1) (= (AT ua1_oa1) "oa1")))
(declare-fun access_for_ua2_oa2 () (Set String))
(declare-fun size_access_for_ua2_oa2 () Int)
(assert (= size_access_for_ua2_oa2 2))
(assert (member "r" access_for_ua2_oa2))
(assert (member "x" access_for_ua2_oa2))
(assert (= size_access_for_ua2_oa2 (card access_for_ua2_oa2)))
(declare-const ua2_oa2 association)
(assert (and (= (UA ua2_oa2) "ua2") (= (access_rights ua2_oa2) access_for_ua2_oa2) (= (AT ua2_oa2) "oa2")))
(assert (= UA_containment (insert (mkTuple "ua2" "pc1") (mkTuple "ua3" "pc1") (singleton (mkTuple "ua1" "ua2")))))(assert (= UA_containment (insert (mkTuple "ua2" "pc1") (mkTuple "ua3" "pc1") (singleton (mkTuple "ua1" "ua2")))))(assert (= OA_containment (insert (mkTuple "oa2" "pc1") (singleton (mkTuple "oa1" "oa2")))))(assert (= UA_tclosure (tclosure UA_containment)))
(assert (= OA_tclosure (tclosure OA_containment)))