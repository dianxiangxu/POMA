/* Generated By:JavaCC: Do not edit this line. FOLGrammar.java */
package POMA.Verification.ReachabilityAnalysis.FOLparser.parser;
import POMA.Verification.ReachabilityAnalysis.FOLparser.model.connectives.*;
import POMA.Verification.ReachabilityAnalysis.FOLparser.model.predicates.*;
import POMA.Verification.ReachabilityAnalysis.FOLparser.model.terms.*;
import POMA.Verification.ReachabilityAnalysis.FOLparser.model.IFormula;
import java.util.ArrayList;
import java.util.List;

/**
 * Parser for queries NGAC.
 * 
 * Syntax: variables start with ?, predicates and constants
 * with either letters or digits. 
 * The binary operators "AND", "OR" must be put in parentheses; Predicates have parentheses for parameters.
 * The negation operator is "NOT". Comma is used as a delimiter for predicate parameters
 * The input has to end with ";"
 * 
 * TODO: "EXISTS" - needs to be added
 * < formula > ::=  < predicate > | < binary > | <negation> {, formula} ";"
 * < binary > :==  "(" < formula > "AND" < formula > ")"
 *          		| "(" < formula > "OR" < formula > ")"
 * < negation > :== "NOT" "(" < formula > ")"
 * < predicate > ::=  < PERMIT > | < ASSOCIATE > | < DENY > | < EXPLICITASSIGN > | < ASSIGN >
 * < PERMIT >  ::=  "PERMIT" "("< term > < term > < term >")"
 * < ASSOCIATE > ::=  "ASSOCIATE""(" < term > < term > < term >")"
 * < DENY > ::= "DENY""(" < term > < term > < term >")"
 * < EXPLICITASSIGN > "EXPLICITASSIGN""(" ::=  < term > < term >")"
 * < ASSIGN > ::=  "ASSIGN""(" < term > < term >")"
 * < HIERARCHY > ::= "HIERARCHY""(" < term > < term >")"
 * < term >  ::= CONST | VAR
 *
 * @author Vladislav Dubrovenski
 */

public class FOLGrammar implements FOLGrammarConstants {
  public static void main(String args []) throws ParseException
  {
    FOLGrammar parser = new FOLGrammar(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression: ");
      try
      {
        IFormula f = FOLGrammar.parse();
        System.out.println(f);
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        FOLGrammar.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public IFormula parse() throws ParseException {
  IFormula f;
    f = formula();
    jj_consume_token(22);
    {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  static final public ITerm term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      jj_consume_token(CONST);
    {if (true) return new Constant(token.image);}
      break;
    case VAR:
      jj_consume_token(VAR);
    {if (true) return new Variable(token.image);}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public IPredicate getPredicate() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PERMIT:
      jj_consume_token(PERMIT);
    {if (true) return new PermitPredicate();}
      break;
    case DENY:
      jj_consume_token(DENY);
    {if (true) return new DenyPredicate();}
      break;
    case EXPLICITASSIGN:
      jj_consume_token(EXPLICITASSIGN);
    {if (true) return new ExplicitAssignPredicate();}
      break;
    case ASSIGN:
      jj_consume_token(ASSIGN);
    {if (true) return new AssignPredicate();}
      break;
    case ASSOCIATE:
      jj_consume_token(ASSOCIATE);
    {if (true) return new AssociatePredicate();}
      break;
    case HIERARCHY:
      jj_consume_token(HIERARCHY);
    {if (true) return new HierarchyPredicate();}
      break;
    case OBLIGATIONLABEL:
      jj_consume_token(OBLIGATIONLABEL);
  {if (true) return new ObligationLabelPredicate();}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public IPredicate predicate() throws ParseException {
  List < ITerm > tuple = new ArrayList < ITerm > ();
  IPredicate predicate;
  ITerm t;
    predicate = getPredicate();

    jj_consume_token(OPEN);
    t = term();
    tuple.add(t);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
      t = term();
      tuple.add(t);
    }
    jj_consume_token(CLOSE);
    predicate.setTuple(tuple);
    {if (true) return predicate;}
    throw new Error("Missing return statement in function");
  }

  static final public IFormula binary() throws ParseException {
  IFormula subformulaA, subformulaB;
    jj_consume_token(OPEN);
    subformulaA = formula();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      jj_consume_token(OR);
      subformulaB = formula();
      jj_consume_token(CLOSE);
      {if (true) return new Disjunctive(subformulaA, subformulaB);}
      break;
    case AND:
      jj_consume_token(AND);
      subformulaB = formula();
      jj_consume_token(CLOSE);
      {if (true) return new Conjunctive(subformulaA, subformulaB);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public IFormula negation() throws ParseException {
  IFormula subformula;
    jj_consume_token(NOT);
    jj_consume_token(OPEN);
    subformula = formula();
    jj_consume_token(CLOSE);
    {if (true) return new Negation(subformula);}
    throw new Error("Missing return statement in function");
  }

  static final public IFormula formula() throws ParseException {
  IFormula form;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PERMIT:
    case DENY:
    case EXPLICITASSIGN:
    case ASSIGN:
    case ASSOCIATE:
    case HIERARCHY:
    case OBLIGATIONLABEL:
      form = predicate();
      break;
    case OPEN:
      form = binary();
      break;
    case NOT:
      form = negation();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return form;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public FOLGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x180000,0xfe00,0x80,0x30000,0x4fe20,};
   }

  /** Constructor with InputStream. */
  public FOLGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FOLGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FOLGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public FOLGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FOLGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public FOLGrammar(FOLGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FOLGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[23];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
